<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 天生我材必有用，千金散尽还复来</title>
    <link>https://linuxing3.github.io/posts/</link>
    <description>Recent content in Posts on 天生我材必有用，千金散尽还复来</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© 2018 Linuxing3 blog powered by Hugo</copyright>
    <lastBuildDate>Sun, 25 Mar 2018 23:22:58 -0400</lastBuildDate>
    
	<atom:link href="https://linuxing3.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cp Work Pedro</title>
      <link>https://linuxing3.github.io/posts/misc/cp-work-pedro/</link>
      <pubDate>Sun, 25 Mar 2018 23:22:58 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/cp-work-pedro/</guid>
      <description></description>
    </item>
    
    <item>
      <title>using-macros-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/hugo/using-macros-in-emacs/</link>
      <pubDate>Sun, 18 Feb 2018 10:49:42 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/using-macros-in-emacs/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Edit Hugo Faster</title>
      <link>https://linuxing3.github.io/posts/hugo/edit-hugo-faster/</link>
      <pubDate>Sun, 18 Feb 2018 00:27:05 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/edit-hugo-faster/</guid>
      <description>For fast hugo, I defined some aliases alias blog_deploy=&amp;#34;sh ~/Dropbox/xingwenju.com/hugo/deploy.sh&amp;#34; alias blog_new=&amp;#34;cd ~/Dropbox/xingwenju.com/hugo &amp;amp;&amp;amp; hugo new $1&amp;#34; alias blog_gen=&amp;#34;cd ~/Dropbox/xingwenju.com/hugo &amp;amp;&amp;amp; hugo&amp;#34; alias blog_serve=&amp;#34;cd ~/Dropbox/xingwenju.com/hugo &amp;amp;&amp;amp; hugo server --disableFastRender&amp;#34; The Deploy.sh is like this. #!/bin/bash  echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; echo -e &amp;#34;~/Dropbox/xingwenju.com/hugo/&amp;#34; cd ~/Dropbox/xingwenju.com/hugo # Build the project. hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`  # Go To Public folder cd public # Add changes to git.</description>
    </item>
    
    <item>
      <title>Asm</title>
      <link>https://linuxing3.github.io/posts/linux/asm/</link>
      <pubDate>Sat, 17 Feb 2018 15:38:46 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/linux/asm/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Layer PDFs Key bindings  Description This layer adds support for Assembly code. The built-in major mode for editing assembly code in Emacs is asm-mode.
The layer also adds nasm-mode for NASM-specific syntax. Although =nasm-mode= is intended for NASM, it actually works well with other variants of Assembly in general, and provides Imenu integration so you can jump around with SPC s j.</description>
    </item>
    
    <item>
      <title>using-nodejs-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/nodejs/using-nodejs-in-emacs/</link>
      <pubDate>Sat, 17 Feb 2018 10:06:18 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/using-nodejs-in-emacs/</guid>
      <description>Table of Contents  Description Features:  Description This layer introduces packages that target Node.js. Currently this layer should not be used directly, as it will be used by other layers.
Features:  Integration of packages necessary to execute node.js modules from other layers.  </description>
    </item>
    
    <item>
      <title>Easy Hugo With Emacs</title>
      <link>https://linuxing3.github.io/posts/hugo/easy-hugo-with-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/easy-hugo-with-emacs/</guid>
      <description>Hugo Tips ---title: &amp;#34;Easy Hugo With Emacs&amp;#34;date: &amp;#34;2018-02-16T20:03:50-04:00&amp;#34;draft: false--- If use equal sign, must leave no space ---title=&amp;#34;Easy Hugo With Emacs&amp;#34;date=&amp;#34;2018-02-16T20:03:50-04:00&amp;#34;draft=false---</description>
    </item>
    
    <item>
      <title>building-modern-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/building-modern-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/building-modern-emacs/</guid>
      <description>Day 3 A modern emacs configuration Spliting the spacemacs/init #+srcname: init #+begin_src language (defun dotspacemacs/init () &amp;#34;Instantiate Spacemacs core settings.&amp;#34; (dotspacemacs/init/coding) (dotspacemacs/init/display) (dotspacemacs/init/evil) (dotspacemacs/init/keys) (dotspacemacs/init/layouts) (dotspacemacs/init/misc) (dotspacemacs/init/packages) (dotspacemacs/init/startup)) #+end_src Spliting the spacemacs/config #+srcname: config #+begin_src language (defun dotspacemacs/user-config () &amp;#34;Configuration that cannot be delegated to layers.&amp;#34; (dotspacemacs/user-config/toggles) (dotspacemacs/user-config/development) (dotspacemacs/user-config/experiments)) #+end_src
Spliting the spacemacs/layers #+srcname: layers #+begin_src language (defun dotspacemacs/layers () &amp;#34;Instantiate Spacemacs layers declarations and package configurations.&amp;#34; (dotspacemacs/layers/config) (dotspacemacs/layers/packages)) #+end_src</description>
    </item>
    
    <item>
      <title>evil.org</title>
      <link>https://linuxing3.github.io/posts/emacs/evil/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/evil/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Key bindings  Description This layer replaces evil-nerd-commenter with evil-commentary for those who prefer the behaviour of vim-commentary.
Features:  Provides the original vim behaviour for commenting out lines via evil-commentary.  Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add evil-commentary to the existing dotspacemacs-configuration-layers list in this file.
Key bindings    Key Binding Description     SPC ; comment operator   gcc comment current line   gcap comment paragraphs   gc comment out the target of a motion   gc SPC y comment up to a line with avy   gy comment and yank    </description>
    </item>
    
    <item>
      <title>smart.org</title>
      <link>https://linuxing3.github.io/posts/emacs/smart/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/smart/</guid>
      <description></description>
    </item>
    
    <item>
      <title>test-easy-hugo-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/test-easy-hugo-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/test-easy-hugo-in-emacs/</guid>
      <description>Tips You can type the post name as emacs/test-easy-hugo-in-emacs to put the post in subdirectory
#+srcname: easy-hugo-newpost #+begin_src emacs-lisp (defun x/smart-create-hugo-newpost-with-current-buffer (post-file) &amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34; (interactive (list (read-from-minibuffer &amp;#34;输入文件名: &amp;#34; `(,easy-hugo-default-ext . 1) nil nil nil))) (easy-hugo-with-env (let ( (filename (expand-file-name post-file easy-hugo-postdir)) ;; file to create (file-ext (file-name-extension post-file)) ;; file extention (current-buffer-file-name (buffer-file-name)) ;; buffer to copy content ) ;; Check file extention (when (not (member file-ext easy-hugo--formats)) (error &amp;#34;please enter .</description>
    </item>
    
    <item>
      <title>using-auto-completion-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-auto-completion-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-auto-completion-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Configuration Key bindings Snippets directories Show snippets in auto-completion popup Tooltips Sort results by usage Enable company or auto-complete globally Replacing company by auto-complete Add auto-completion in a layer Completion back ends Improved faces Key Bindings Company Auto-complete Yasnippet Auto-yasnippet  Description This layer provides auto-completion to Spacemacs.
 The following completion engines are supported: company auto-complete  Snippets are supported via yasnippet and auto-yasnippet.</description>
    </item>
    
    <item>
      <title>using-chinese-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-chinese-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-chinese-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Layer Configuration Configure the Default Input Method(配置默认中文输入法) Configure the Chinese-pyim Input Method(配置中文拼音输入法) Enable fcitx Requirement Enable YouDao(有道) Dictionary(激活有道字典) Set monospaced font size(设置等宽字体） Enable/Disable ace-pinyin in avy-goto-char Key Bindings Youdao Dictionary Find-by-pinyin-dired  Description This layer adds support for traditional Chinese script to Spacemacs.
Features:  Support for the Pinyin(拼音) input method via chinese-pyim. Support for the Wubi(五笔) input method via chinese-wbim.</description>
    </item>
    
    <item>
      <title>using-chrome-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-chrome-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-chrome-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Layer Chrome extension Configuration Key bindings  Description This layer provides some integration with the Google Chrome browser.
Features:  Edit text boxes with Emacs using edit-server Write markdown in Emacs and realtime show in chrome using flymd gmail message mode uses standard markdown keybindings  Install Layer To use this configuration layer, add it to your ~/.spacemacs. You will need to add chrome to the existing dotspacemacs-configuration-layers list in this file.</description>
    </item>
    
    <item>
      <title>using-clojure-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-clojure-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-clojure-in-emacs/</guid>
      <description>Clojure layer Table of Contents  Clojure layer Description Features: Install Layer Pretty Symbols CIDER and clj-refactor Quick Start with boot Quick Start with lein More details Usage Cheatsheet Structuraly safe editing Key Bindings Working with clojure files (barfage, slurpage &amp; more) Leader Documentation Evaluation Goto REPL Tests Toggles Debugging Refactoring Reformatting CIDER Buffers stacktrace-mode inspector-mode test-report-mode Sayid Buffers sayid-mode sayid-traced-mode sayid-pprint cider-repl-mode Development Notes Indentation  Description This layer adds support for Clojure language using CIDER.</description>
    </item>
    
    <item>
      <title>using-dotemacs-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-dotemacs-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-dotemacs-in-emacs/</guid>
      <description>Day 1 1. Using the manual to find emacs configuration convention  Keybings is =Ctrl h ?=	for further options   Keybings is =Ctrl h r=	for reading the manual  	#+begin_src emacs-lisp :tangle yes (info-manual ARG) ;; C-h r runs the command info-manual (found in global-map), which is an ;; interactive Lisp function in ‘info+.el’. ;; ;; It is bound to C-h r, &amp;lt;f1&amp;gt; r, &amp;lt;help&amp;gt; r, &amp;lt;menu-bar&amp;gt; &amp;lt;help-menu&amp;gt; &amp;lt;emacs-manual&amp;gt;.</description>
    </item>
    
    <item>
      <title>using-go-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-go-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-go-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Install Pre-requisites Layer Configuration Indentation Tests Guru Autocomplete Working with Go Go commands (start with m): Go Guru Refactoring  Description This layer adds extensive support for go.
Features:  gofmt/goimports on file save Auto-completion using go-autocomplete (with the auto-completion layer) Source analysis using go-guru Refactoring with godoctor Edit struct field tag with gomodifytags Linting with flycheck&#39;s built-in checkers or flycheck-gometalinter Coverage profile visualization  Install Pre-requisites You will need gocode, godef and =godoctor=:</description>
    </item>
    
    <item>
      <title>using-hugo-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-hugo-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-hugo-in-emacs/</guid>
      <description>Start the Hugo #+begin_src emacs-lisp :tangle yes (defun find-blog-dir () (interactive) &amp;#34;Open hugo blog files&amp;#34; (find-file &amp;#34;~/Dropbox/xingwenju.com/hugo/content&amp;#34;) ) ;;;###autoload (defun blog-deploy () &amp;#34;Run hugo and push changes upstream.&amp;#34; (interactive) (with-dir blog-public-dir (shell-command &amp;#34;git rm -rf .&amp;#34;) (shell-command &amp;#34;git clean -fxd&amp;#34;) (with-temp-file &amp;#34;CNAME&amp;#34; (insert &amp;#34;www.xingwenju.com\spacemacs&amp;#34;)) (with-dir blog-dir (-&amp;gt;&amp;gt; blog-public-dir (concat &amp;#34;hugo -d &amp;#34;) shell-command)) (shell-command &amp;#34;git add .&amp;#34;) (--&amp;gt; (current-time-string) (concat &amp;#34;git commit -m \&amp;#34;&amp;#34; it &amp;#34;\&amp;#34;&amp;#34;) (shell-command it)) (magit-push-current-to-upstream nil))) ;;;###autoload (defun blog-start-server () &amp;#34;Run hugo server if not already running and open its webpage.</description>
    </item>
    
    <item>
      <title>using-hy-mode-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-hy-mode-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-hy-mode-in-emacs/</guid>
      <description>You can type the post name as emacs/test-easy-hugo-in-emacs to put the post in subdirectory
#+srcname: easy-hugo-newpost #+begin_src emacs-lisp (defun x/smart-create-hugo-newpost-with-current-buffer (post-file) &amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34; (interactive (list (read-from-minibuffer &amp;#34;输入文件名: &amp;#34; `(,easy-hugo-default-ext . 1) nil nil nil))) (easy-hugo-with-env (let ( (filename (expand-file-name post-file easy-hugo-postdir)) ;; file to create (file-ext (file-name-extension post-file)) ;; file extention (current-buffer-file-name (buffer-file-name)) ;; buffer to copy content ) ;; Check file extention (when (not (member file-ext easy-hugo--formats)) (error &amp;#34;please enter .</description>
    </item>
    
    <item>
      <title>using-interactive-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-interactive-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-interactive-in-emacs/</guid>
      <description>Using Interactive #+BEGIN_SRC (defun x/hugo-save-current-buffer-as-hugo-post (hugo-post-subdir) &amp;#34;Saving the current buffer as a hugo post in a specific hugo post directory&amp;#34; (interactive (let ((hugo-post-subdirs &amp;#39;(&amp;#34;emacs&amp;#34; &amp;#34;linux&amp;#34; &amp;#34;hugo&amp;#34;))) (list (ido-completing-read &amp;#34;Directory Name:&amp;#34; hugo-post-subdirs)) )) (progn (setq hugo-post-title (read-from-minibuffer &amp;#34;请输入文件名：&amp;#34; (buffer-name))) (setq hugo-post-dir (concat easy-hugo-basedir easy-hugo-postdir &amp;#34;/&amp;#34; hugo-post-subdir)) (write-file (concat hugo-post-dir hugo-post-title)) (find-alternate-file-other-window (concat hugo-post-dir hugo-post-title)) ) ) #+END_SRC </description>
    </item>
    
    <item>
      <title>using-java-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-java-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-java-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description Features: Layer Installation Layer Choosing a backend Backends Meghanada Installation About Maven Eclim Installation Eclipse Eclim Configuration Usage ENSIME Installation when using SBT Installation when using Gradle Configuration Usage Issues Key bindings Meghanada Server Navigation Compilation Tests (junit) Refactoring Tasks Eclim Java-mode Ant Project management Eclim daemon Goto Refactoring Documentation, Find Errors (problems) Tests Errors (problems) buffer Projects buffer Ensime key bindings Search Ensime Search Mode sbt Typecheck Debug Errors Goto Print and yank types Documentation, Inspect Server Refactoring Tests REPL Maven Gradle  Description This layer adds support for the Java language.</description>
    </item>
    
    <item>
      <title>using-javascript-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-javascript-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-javascript-in-emacs/</guid>
      <description>Day 2 Javascript mode of emacs Description 	This layer adds support for the JavaScript language using js2-mode.
Features:  Smart code folding Refactoring: done using s2-refactor]. Auto-completion and documentation: provided by tern CoffeeScript support Formatting with web-beautify Get the path to a JSON value with json-snatcher REPL available via skewer-mode and livid-mode  Install 	To use this configuration layer, add it to your ~/.spacemacs. You will need to add javascript to the existing dotspacemacs-configuration-layers list in this file.</description>
    </item>
    
    <item>
      <title>using-lua-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-lua-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-lua-in-emacs/</guid>
      <description>Table of Contents  Description Features: Install Key Bindings Commands  Description This layer adds support for editing Lua.
Features:  Editing lua files using lua-mode Sending code to a lua REPL Code linting using Luacheck  Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add lua to the existing dotspacemacs-configuration-layers list in this file.
In order to enable code linting, install Luacheck.</description>
    </item>
    
    <item>
      <title>using-macro-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-macro-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-macro-in-emacs/</guid>
      <description>Codes Define macros #+srcname: define-macros #+begin_src emacs-lisp ;;; with-dir (defmacro do-in-dir (DIR &amp;amp;rest FORMS) &amp;#34;Execute FORMS in DIR.&amp;#34; (let ((orig-dir (gensym))) `(prog2 (setq ,orig-dir default-directory) (progn (cd ,DIR) ,@FORMS) (cd ,orig-dir)))) #+end_src #+RESULTS: define-macros : do-in-dir Run macros #+srcname: run-macros #+begin_src emacs-lisp (macroexpand &amp;#39;(do-in-dir &amp;#34;~/.emacs.d&amp;#34;)) #+end_src #+RESULTS: run-macros | prog2 | (setq G1829 default-directory) | (progn (cd ~/.emacs.d)) | (cd G1829) |</description>
    </item>
    
    <item>
      <title>using-orgmode-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-orgmode-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-orgmode-in-emacs/</guid>
      <description>the super org is the module of emacs Org-mode is a fabulous organizational tool originally built by Carsten Dominik that operates on plain text files. Org-mode is part of Emacs.
This document assumes you&#39;ve had some exposure to org-mode already so concepts like the agenda, capture mode, etc. won&#39;t be completely foreign to you. More information about org-mode can be found in the Org-Mode Manual and on the Worg Site.</description>
    </item>
    
    <item>
      <title>using-python-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-python-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-python-in-emacs/</guid>
      <description>Table of Contents  Description Features: Install Layer Dependencies Auto-completion: Anaconda dependencies Syntax checking Test runner Automatic buffer formatting on save Automatic save of buffer when testing autoflake pylookup Hy-mode Configuration Fill column Sort imports Management of Python versions and virtual environments Manage virtual environments with pyvenv Manage multiple Python versions with pyenv Automatic activation of local pyenv version Key Bindings Inferior REPL process Running Python Script in shell Testing Refactoring Pip package management Live coding Hy REPL process Other Python commands  Description This layer adds support for the Python language.</description>
    </item>
    
    <item>
      <title>using-spacemacs-base-in-emacs.org</title>
      <link>https://linuxing3.github.io/posts/emacs/using-spacemacs-base-in-emacs/</link>
      <pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/emacs/using-spacemacs-base-in-emacs/</guid>
      <description>Table of Contents TOC_4_gh noexport   Description describe spacemacs distribution in this file  Description TODO describe spacemacs distribution in this file </description>
    </item>
    
    <item>
      <title>Vim is a life style</title>
      <link>https://linuxing3.github.io/posts/vim/vimer/</link>
      <pubDate>Fri, 16 Feb 2018 14:06:05 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/vim/vimer/</guid>
      <description>vim outstanding configuration file &amp;quot; From cowboy configuration &amp;quot; Use the Solarized Dark theme set background=dark colorscheme solarized &amp;quot;colorscheme desert &amp;quot; Make Vim more useful set nocompatible &amp;quot; Use the OS clipboard by default (on versions compiled with `+clipboard`) set clipboard=unnamed &amp;quot; Enhance command-line completion set wildmenu &amp;quot; Allow cursor keys in insert mode set esckeys &amp;quot; Allow backspace in insert mode set backspace=indent,eol,start &amp;quot; Optimize for fast terminal connections set ttyfast &amp;quot; Add the g flag to search/replace by default set gdefault &amp;quot; Use UTF-8 without BOM set encoding=utf-8 nobomb &amp;quot; Change mapleader let mapleader=&amp;quot;,&amp;quot; &amp;quot; Don’t add empty newlines at the end of files set binary set noeol &amp;quot; Centralize backups, swapfiles and undo history set backupdir=~/dotfiles/.</description>
    </item>
    
    <item>
      <title>2013-05-13-rake-in-coffee1.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee1/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee1/</guid>
      <description>layout: post title: &amp;ldquo;用coffee脚本自动生成MVC&amp;rdquo; description: &amp;ldquo;&amp;rdquo; category: &amp;ldquo;lesson&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 创建程序入口 mkdirp = require(&#39;./node_modules/express/node_modules/mkdirp&#39;) os = require(&#39;os&#39;) fs = require(&#39;fs&#39;) readline = require(&#39;readline&#39;) eol = &#39;win32&#39; == os.platform() ? &#39;\r\n&#39; : &#39;\n&#39; views = [&#39;list&#39;,&#39;create&#39;,&#39;get&#39;,&#39;update&#39;,&#39;layout&#39;] emptyDirectory=(path, fn) -&amp;gt; fs.readdir path, (err, files)-&amp;gt; throw err if err &amp;amp;&amp;amp; &#39;ENOENT&#39; != err.code fn(!files || !files.length) read=(path,fn) -&amp;gt; fs.readFile path,&#39;utf8&#39;,(err,data)-&amp;gt; fn &amp;amp;&amp;amp; fn(data) write=(path, str) -&amp;gt; fs.writeFileSync(path, str,&#39;utf8&#39;) console.log(&#39; &#39; + path) mkdir=(path, fn) -&amp;gt; mkdirp path, 755, (err)-&amp;gt; throw err if err console.</description>
    </item>
    
    <item>
      <title>2013-05-13-rake-in-coffee2.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee2/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee2/</guid>
      <description>layout: post title: &amp;ldquo;用coffee脚本自动生成MVC&amp;rdquo; description: &amp;ldquo;&amp;rdquo; category: &amp;ldquo;lesson&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 创建程序入口 createApplication=(path)-&amp;gt; console.log &#39;creating files...&#39; createMVC path  生成MVC的入口 createMVC=(path)-&amp;gt; console.log path console.log(&amp;quot;请注意，我将为你自动生成相关文件。所有现有文件将被覆盖。&amp;quot;); console.log(&amp;quot;1. 生成数据模块定义文件&amp;quot;) moduleDir = &#39;./module/&#39; + path mkdir moduleDir templateSchemaFile = &#39;./templates/schema.coffee&#39; templateSchemaFileData = fs.readFileSync templateSchemaFile,&#39;utf8&#39; console.log templateSchemaFileData write moduleDir + &#39;/schema.coffee&#39;,templateSchemaFileData console.log(&amp;quot;2. 生成视图定义文件&amp;quot;) viewDir= &#39;./views/&#39; + path mkdir viewDir for view in views templateViewFile= &#39;./templates/&#39; + view + &#39;.jade&#39; write viewDir + &#39;/&#39; + view + &#39;.</description>
    </item>
    
    <item>
      <title>2013-05-13-rake-in-coffee3.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee3/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/2013-05-13-rake-in-coffee3/</guid>
      <description>layout: post title: &amp;ldquo;用coffee脚本自动生成MVC&amp;rdquo; description: &amp;ldquo;&amp;rdquo; category: &amp;ldquo;lesson&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 主程序入口 main=()-&amp;gt; rl = readline.createInterface(process.stdin, process.stdout) console.log &amp;quot;Please define your Module&#39;s name and schema in following format&amp;quot; console.log &amp;quot;name=key1:value1,key2:value2,...&amp;quot; rl.setPrompt(&#39;OHAI&amp;gt; &#39;) rl.prompt() rl.on &#39;line&#39;,(line)-&amp;gt; name = line.split(&#39;=&#39;) MODULE_NAME = name[0] MODULE_SCHEMA = name[1].split(&#39;,&#39;).join(&#39;\n&#39;) console.log MODULE_NAME console.log MODULE_SCHEMA console.log &#39;Generating new MVC files...&#39; createApplication MODULE_NAME console.log &#39;Doing Customization Stuff...&#39; moduleFile = &#39;./module/&#39; + MODULE_NAME + &#39;/schema.coffee&#39; customize moduleFile,MODULE_NAME,MODULE_SCHEMA for view in views viewFile = &#39;.</description>
    </item>
    
    <item>
      <title>2013-05-14-markdown.md</title>
      <link>https://linuxing3.github.io/posts/misc/2013-05-14-markdown/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/2013-05-14-markdown/</guid>
      <description>layout: post category: lessons title: &amp;ldquo;Markdown的深入学习&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] Knockdown Github flavored Markdown Syntax Highlight
Advanced New Files *在设置文件中添加以下内容
&amp;quot;os_specific_alias&amp;quot;: { &amp;quot;pack&amp;quot;: { &amp;quot;windows&amp;quot;: &amp;quot;~\\AppData\\Roaming\\Sublime Text 2\\Packages&amp;quot;, &amp;quot;linux&amp;quot;: &amp;quot;~/.config/sublime-text-2/Packages&amp;quot;, &amp;quot;osx&amp;quot;: &amp;quot;~/Library/Application Support/Sublime Text 2/Packages&amp;quot; }, &amp;quot;post&amp;quot;:{ &amp;quot;windows&amp;quot;:&amp;quot;E:\\wiki_html\\_posts&amp;quot;, &amp;quot;osx&amp;quot;: &amp;quot;~/jekyll.github.com/_posts&amp;quot; }, &amp;quot;home&amp;quot;:{ &amp;quot;windows&amp;quot;:&amp;quot;C:\\Documents and Settings\\user&amp;quot;, &amp;quot;osx&amp;quot;: &amp;quot;~/&amp;quot; } }  这样输入home:.vimrc将直接在根目录下创建新的文件
输入post:post.md可以直接在相关目录下创建文件
感觉相当于一个快捷方式
设置Terminal特别的命令 {&amp;quot;keys&amp;quot;:[&amp;quot;alt+3&amp;quot;],&amp;quot;command&amp;quot;:&amp;quot;open_terminal&amp;quot;, &amp;quot;args&amp;quot;:{ &amp;quot;parameters&amp;quot;:[&amp;quot;/c&amp;quot;,&amp;quot;E:\\devenv\\Rails\\Git\\bin\\sh.exe --login -i&amp;quot;] } },  这样可以直接启用sh的环境来工作</description>
    </item>
    
    <item>
      <title>2013-5-10-redis.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis/</guid>
      <description>layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（一）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 环境搭建 基本架构 设计为Node+Express+Redis的MVC框架，需要安装Node，Express,Redis。
安装Redis 下载Redis
 解压后，存放在一个目录下，假设E:\Redis\，并将该目录路径添加到你的系统path中，方便直接访问可执行文件
 进入Redis目录 cd E:\Redis
 创建redis.conf文件 vim redis.conf，内容如下
port 6379 timeout 300 dir E:\db dbfilename dump.rdb save 900 1 save 300 10 save 60 10000  注意dir和dbfilename选项是必须的，否则你将无法保存数据库文件。
 当然你需要提前创建dir目录mkdir E:\db
 建立一个简单的批处理redis.cmd，来启动redis-server
E:\Redis\redis-server.exe E:\Redis\redis.conf
 同样建立一个简单的批处理redic.cmd，来启动redis-client
E:\Redis\redis-cli
 这样，你可以通过调用redis和redic来启动服务器和客户端
 还可以将Redis-server安装成windows的服务来启动
sc create redisserver binPath= &amp;quot;C:\windows\system32\cmd.exe E:\Redis\redis-server.exe E:\Redis\redis.conf&amp;quot; sc start redisserver   windows在启动该服务时会报错，但没关系，实际上已经启动了，可以打开任务管理器查看cmd和redis-server进程即可。也可以在命令行下执行redic来连接Redis服务器。</description>
    </item>
    
    <item>
      <title>2013-5-10-redis2.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis2/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis2/</guid>
      <description> layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（二）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 安装Node和npm  下载Nodewindows版，可以下载安装版本或者单执行文件版本。
 将coffee-script的文件夹解压，参看其中bin文件夹下是否有coffee这个文件，E:\coffee\bin\coffee.cmd
 下面已单执行文件为例，将该文件存放E:\coffee\bin\node.exe
 修改coffee.cmd文件和npm.cmd文件，将目录添加到系统路径
 在命令行下执行node、npm和coffee命令看是否成功
  </description>
    </item>
    
    <item>
      <title>2013-5-10-redis3.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis3/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis3/</guid>
      <description>layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（三）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 安装Express  安装express十分容易  npm install -gd express   执行express，生成MVC的框架  express blog cd blog npm install node app   打开http://127.0.0.1:3000/，你可以看到Express的`Hello Word`欢迎页面，表示Express已经成功运行。  使用coffee-script开驾驭Express require &amp;quot;coffee-script&amp;quot; http = require &#39;http&#39; path = require &#39;path&#39; express = require &#39;express&#39; app = express() app.configure(-&amp;gt; app.set(&#39;port&#39;, process.env.PORT || 3000) app.use(express.logger(&#39;dev&#39;)) app.use(express.directory(__dirname + &#39;public&#39;)) app.use(express.static(path.join(__dirname, &#39;public&#39;))) app.use(express.favicon()) app.</description>
    </item>
    
    <item>
      <title>2013-5-10-redis4.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis4/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis4/</guid>
      <description> layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（四）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 安装Markdown  vim package.json,在dependencies部分，增加markdown的内容，版本任意即可。
 再次执行npm install安装Markdown模块
 参看Markdown的帮助文件，可以看到使用Markdown很简单
  md = require &#39;Markdown&#39; output = md.Markdown2html &amp;quot;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;quot; console.log output  其它依赖库 </description>
    </item>
    
    <item>
      <title>2013-5-10-redis5.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis5/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis5/</guid>
      <description>layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（五）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 设计MVC Module数据模型 Redis Package  vim package.json,在dependencies部分，增加Redis的内容，版本任意即可。  RON Package  vim package.json,在dependencies部分，增加ron的内容，版本任意即可。
 查看Ron的帮助文件，可以看到语法很简单
 在routes下面建立module_users.coffee文件
 在这个文件中，定义了我们需要的数据库模块
ron = require &#39;ron&#39; client = ron port: 6379 host: &#39;127.0.0.1&#39; name: &#39;auth&#39; Users = client.get &#39;users&#39; Users.property id&#39;, {identifier: true} Users.property &#39;username&#39;, {unique: false} Users.property &#39;email&#39;, {unique: false} data = {username: &#39;ron&#39;, email: &#39;ron@domain.com&#39;} Users.create data, (err, user)- &amp;gt; console.</description>
    </item>
    
    <item>
      <title>2013-5-10-redis6.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis6/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis6/</guid>
      <description>layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（六）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] 与Express结合 module_users = require &#39;./routes/module_users.coffee&#39; app.get &#39;users&#39;,module_users.list   流程很简单   引用模块文件
 调用模块文件中的方法，前提是你要将方法输出，请参见下面的引用
  测试 Controller控制器 Express路由原理  在app.coffee文件中定义路径，添加引用
index = require &#39;./routes/index.coffee&#39; app.get &#39;index&#39;,index.list  在routes/index.coffee中定义方法，输出引用
list=(req,res)-&amp;gt; res.render &#39;index&#39;,{title:&amp;quot;Hello Express&amp;quot;} module.exports.list = list  这样实现了Controller和Module之间的双向通信
 其中req是http请求，res是http回应，具体可参考Express手册中文版
  常用的Express API  req.body
 这个对应的是解析过的请求体。这个特性是bodyParser() 中间件提供,其它的请求体解析中间件可以放在这个中间件之后。当bodyParser()中间件使用后，这个对象默认为 {}。
// POST user[name]=tobi&amp;amp;user[email]=tobi@learnboost.com req.body.user.name // =&amp;gt; &amp;quot;tobi&amp;quot;  req.</description>
    </item>
    
    <item>
      <title>2013-5-10-redis7.md</title>
      <link>https://linuxing3.github.io/posts/database/2013-5-10-redis7/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/database/2013-5-10-redis7/</guid>
      <description> layout: post category: lessons title: &amp;ldquo;自己搭建Node+Express+Redis的MVC框架（七）&amp;rdquo; tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags: [intro, beginner, jekyll, tutorial] Ron模块接口 node-ron的Github
API接口文档
View视图 Jade模板 Jquery Coffee-script的客户端应用 </description>
    </item>
    
    <item>
      <title>2013-5-6-express-tutorial-1.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/2013-5-6-express-tutorial-1/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/2013-5-6-express-tutorial-1/</guid>
      <description>layout: post category : lessons tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags : [intro, beginner, jekyll, tutorial] 从零开始构建Express+Mongoose的程序 如果你已经看过第一部分，请猛击这里看下一章
关于Express的框架 调用http、express和path模块 http = require &#39;http&#39; path = require &#39;path&#39;  生成express应用 express = require &#39;express&#39; app = express() app.configure(-&amp;gt; # 设置端口 app.set(&#39;port&#39;, process.env.PORT || 3000) # 设置视图和公共目录 app.use(express.logger(&#39;dev&#39;)) # app.use(express.directory(__dirname + &#39;public&#39;)) app.use(express.static(path.join(__dirname, &#39;public&#39;))) app.use(express.favicon()) # 设置视图渲染模板为jade app.set(&#39;views&#39;, __dirname + &#39;/views&#39;) app.set(&#39;view engine&#39;, &#39;jade&#39;) # 设置查询体解析为json功能 app.use(express.bodyParser({keepExtensions: true, uploadDir: &#39;./public/resources&#39;})) # 设置http方法重写，如使用put更改数据等 app.</description>
    </item>
    
    <item>
      <title>2013-5-6-express-tutorial-2.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/2013-5-6-express-tutorial-2/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/2013-5-6-express-tutorial-2/</guid>
      <description>layout: post category : lessons tagline: &amp;ldquo;Supporting tagline&amp;rdquo;
tags : [intro, beginner, jekyll, tutorial] 从零开始构建Express+Mongoose的程序2 如果你没有看过第一部分，请猛击这里
本文之间重点讲解如何通过发送网页数据创建Mongodb的文件。
这等于是建立一个数据库的表中的一行记录。
首先我们需要一个页面，在jade模板中应该这样定义 extends single block content3 form(method=&#39;post&#39;,enctype=&amp;quot;multipart/form- data&amp;quot;,action=&#39;/newblog&#39;) input(type=&#39;hidden&#39;,id=&#39;&#39;,value=Date.now(),name=&#39;post[ date]&#39;) textarea(id=&#39;post_convaluent&#39;,id=&#39;Content&#39;,name=&#39;post[ content]&#39;) input(type=&amp;quot;file&amp;quot;,id=&#39;btn-file&#39;,name=&amp;quot;post[image]&amp;quot;) input(type=&#39;submit&#39;,id=&#39;btn-smt&#39;,value=&#39;好了吗？现在点击就可以发布&#39;)   说明：  通过post方法采取newblog的行动，发送多段的数据
网页抓取的数据存储在req.body.post中，以json的格式，供后续处理
需要设定对应的路由 app.post(&#39;/newblog&#39;, mongodb.create)   说明  **通过设定post的路由，告诉express，如果有post数据到newblog页面，就调用mongodb中的create方法 **
####调用的方法 create=(req,res)-&amp;gt; url = req.files.post[&amp;lsquo;image&amp;rsquo;].path json = { name: req.body.post[&amp;lsquo;name&amp;rsquo;], age: req.body.post[&amp;lsquo;age&amp;rsquo;], work: req.body.post[&amp;lsquo;work&amp;rsquo;], email: req.body.post[&amp;lsquo;email&amp;rsquo;], title:req.body.post[&amp;lsquo;title&amp;rsquo;], content:req.body.post[&amp;lsquo;content&amp;rsquo;], image:url.slice(7,url.length), date:req.body.post[&amp;lsquo;date&amp;rsquo;] } aBlog = new Blog(json) aBlog.</description>
    </item>
    
    <item>
      <title>Home.md</title>
      <link>https://linuxing3.github.io/posts/misc/home/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/home/</guid>
      <description> title: Home Welcome to the lua101 wiki! In this wiki I note lua development experience Pages 贪吃蛇一 贪吃蛇二 贪吃蛇三 Quick-cocos2d-x开发学习笔记 openresty game2048 added a gitignore /lua101.wiki  </description>
    </item>
    
    <item>
      <title>Quick-Cocos2dx.md</title>
      <link>https://linuxing3.github.io/posts/game/quick-cocos2dx/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/game/quick-cocos2dx/</guid>
      <description> Quick-cocos2d-x开发经验 安装java 安装android_sdk和android_ndk 设置环境变量 %ANDROID_SKD % %ANDROID_NDK% %QUICK_COCOS2DX_ROOT% %COCOS2DX_ROOT% %JAVA_HOME%  设置路径 D:\usr\lib\android\sdk\tools D:\usr\lib\android\sdk\platform-tools D:\usr\lib\coco\quick-cocos2d-x\bin %QUICK_COCOS2DX_ROOT%\bin\win32 D:\usr\lib\jdk\bin  编译x-plyaer，好像只需要一次就行 导入libcocos2dx，编译成lib（非常关键） 用create_project生成工程模板 执行build_native.bat，生成libgame.so mkdir &amp;quot;%APP_ANDROID_ROOT%assets\scripts&amp;quot; xcopy /s /q &amp;quot;%APP_ROOT%scripts\*.*&amp;quot; &amp;quot;%APP_ANDROID_ROOT%assets\scripts\&amp;quot; mkdir &amp;quot;%APP_ANDROID_ROOT%assets\res&amp;quot; xcopy /s /q &amp;quot;%APP_ROOT%res\*.*&amp;quot; &amp;quot;%APP_ANDROID_ROOT%assets\res\&amp;quot; &amp;quot;%ANDROID_NDK_ROOT%\ndk-build&amp;quot; %ANDROID_NDK_BUILD_FLAGS% -C %APP_ANDROID_ROOT% NDK_MODULE_PATH=%QUICK_COCOS2DX_ROOT%;%COCOS2DX_ROOT%;%COCOS2DX_ROOT%\cocos2dx\platform\third_party\android\prebuilt  确认project.android目录下文件 编辑过程中主要改变两个文件夹  script文件夹，存放脚本文件
 res文件夹，存放资源文件
  将两个文件夹复制到project.android中，就可以改变android程序
将工程导入Eclipse作为Android工程 确认libcocos2dx加载正确 编译运行 </description>
    </item>
    
    <item>
      <title>README.md</title>
      <link>https://linuxing3.github.io/posts/misc/readme/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/readme/</guid>
      <description>+++ title=&amp;ldquo;README.md&amp;rdquo; date=&amp;ldquo;2018-02-16T14:05:34-04:00&amp;rdquo; +++ +++ title=&amp;ldquo;README.md&amp;rdquo; date=&amp;ldquo;2018-02-16T14:05:34-04:00&amp;rdquo; +++ +++ title=&amp;ldquo;README.md&amp;rdquo; date=&amp;ldquo;2018-02-16T14:05:34-04:00&amp;rdquo; +++ +++ title = &amp;ldquo;Quick start&amp;rdquo; author = [&amp;ldquo;linuxing3&amp;rdquo;] draft = false +++
Configuration layers Spacemacs divides its configuration into self-contained units called configuration layers. These layers are stacked on top of each other to achieve a custom configuration.
By default Spacemacs uses a dotfile called ~/.spacemacs to control which layers to load. Within this file you can also configure certain features.</description>
    </item>
    
    <item>
      <title>alpine.md</title>
      <link>https://linuxing3.github.io/posts/linux/alpine/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/linux/alpine/</guid>
      <description>chroot to alpine linux install ./sbin/apk.static -X http://nl.alpinelinux.org/alpine/latest-stable/main/ -U --allow-untrusted --root /alpine --initdb add alpine-base mkdev mknod -m 666 /alpine/dev/full c 1 7 mknod -m 666 /alpine/dev/ptmx c 5 2 mknod -m 644 /alpine/dev/random c 1 8 mknod -m 644 /alpine/dev/urandom c 1 9 mknod -m 666 /alpine/dev/zero c 1 5 mknod -m 666 /alpine/dev/tty c 5 0 mknod -m 666 /alpine/dev/sda b 8 0 mknod -m 666 /alpine/dev/sda1 b 8 1 mknod -m 666 /alpine/dev/sda2 b 8 2 mknod -m 666 /alpine/dev/sda3 b 8 3 mknod -m 666 /alpine/dev/sda4 b 8 4 mknod -m 666 /alpine/dev/sda5 b 8 5 mknod -m 666 /alpine/dev/sda6 b 8 6 mknod -m 666 /alpine/dev/sdb b 8 16 mknod -m 666 /alpine/dev/sda1 b 8 17 mknod -m 666 /alpine/dev/sda2 b 8 18 mknod -m 666 /alpine/dev/sda3 b 8 19 mknod -m 666 /alpine/dev/sda4 b 8 20 mknod -m 666 /alpine/dev/sda5 b 8 21 mknod -m 666 /alpine/dev/sda6 b 8 22 cp /etc/resolv.</description>
    </item>
    
    <item>
      <title>archlinux.md</title>
      <link>https://linuxing3.github.io/posts/linux/archlinux/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/linux/archlinux/</guid>
      <description>Install Archlinux from beggining Boot from iso file 将安装的your_arch_image.iso文件放在win_drive的根目录，假设这里是ntfs格式
使用grub4dos来引导最小镜像文件
root (hd0,0) kernel /vmlinuz archisolabel=ARCH2016 initrd /archiso.img  启动后会进入系统安全模式，在这里执行
mkdir /mnt/iso mount -r -t ntfs /dev/win_drive /mnt/iso modprobe loop losetup /dev/loop6 /mnt/iso/your_arch_image.iso ln -s /dev/loop6 /dev/disks/by-label/ARCH2016 exit  这样就可以启动安装光盘了！
Prepare your partition Using fdisk to create partition table fdisk /dev/sda n # creating new partion w # write  Format partition mkfs.ext4 /dev/sda1  Mount new partition as install target mount /dev/sda1 /mnt  Setting network Setting network with netctl cp /etc/netctl/examples/ethernet-static /etc/netctl/office netctl list netctl start office  office profie as follows Description=&#39;A basic dhcp ethernet connection&#39; Interface=eth0 Connection=ethernet IP=dhcp ForceConnect=yes DHCPClient=&amp;quot;dhclient&amp;quot;  Setting network behind proxy  NAT Forward ssh to the virtual machine with port forward  And don&amp;rsquo;t forget to export your new environment variables</description>
    </item>
    
    <item>
      <title>babel-loader.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/babel-loader/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/babel-loader/</guid>
      <description>babel-loader  Babel is a compiler for writing next generation JavaScript.
 This package allows transpiling JavaScript files using Babel and webpack.
Notes: Issues with the output should be reported on the babel issue tracker;
Installation npm install babel-loader babel-core babel-preset-es2015 babel-preset-react --save-dev  Note: npm will deprecate auto-installing of peerDependencies on the next major release, so required peer dependencies like babel-core and webpack will have to be listed explicitly in your package.</description>
    </item>
    
    <item>
      <title>basic.md</title>
      <link>https://linuxing3.github.io/posts/python/basic/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/python/basic/</guid>
      <description> python basic walk for root,dirs,files in os.walk(&#39;/workspace/techbook&#39;): for file in files: if os.path.splitext(file)[1] == &#39;.markdown&#39;: src = os.path.join(root,file) print(src) new_file = os.path.splitext(file)[0] + &#39;.md&#39; dst = os.path.join(root, new_file) print(dst) os.rename(src,dst)  </description>
    </item>
    
    <item>
      <title>bigdata.md</title>
      <link>https://linuxing3.github.io/posts/academy/bigdata/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/academy/bigdata/</guid>
      <description></description>
    </item>
    
    <item>
      <title>browserify.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/browserify/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/browserify/</guid>
      <description>browserify require(&#39;modules&#39;) in the browser
Use a node-style require() to organize your browser code and load modules installed by npm.
browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single &amp;lt;script&amp;gt; tag.

getting started If you&amp;rsquo;re new to browserify, check out the browserify handbook and the resources on browserify.org.
Check out browserify search to find browserify-compatible packages on npm.</description>
    </item>
    
    <item>
      <title>clojure.md</title>
      <link>https://linuxing3.github.io/posts/misc/clojure/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/clojure/</guid>
      <description>title: Clojure is great Clojure define functions A function can take arguments
A function can have comments as doc
A function will return the last statement
(defn hello [arg1 arg2] &amp;quot;This is my playground of clojure&amp;quot; (println (str &amp;quot;Multiple &amp;quot; arg1 &amp;quot;*&amp;quot; arg2)) (println &amp;quot;=&amp;quot;) (def mul (* arg1 arg2)) (println mul) ) (defn factional [n] (reduce * (range 1 (inc n)))) (println (factional 3))  Discrimination of elements in a list  inc n : Increase the number by 1</description>
    </item>
    
    <item>
      <title>deploy.md</title>
      <link>https://linuxing3.github.io/posts/misc/deploy/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/deploy/</guid>
      <description> title: auto git deploy A simple bash script to push your code to git # !/bin/bash set -o nounset set -o errexit echo $0 echo $* echo $$ echo &amp;quot;Will deploy your code to git server...&amp;quot; git add -A git commit -m &amp;quot;$1&amp;quot; git push -u origin $2 echo &amp;quot;Done!&amp;quot;  </description>
    </item>
    
    <item>
      <title>docker.md</title>
      <link>https://linuxing3.github.io/posts/docker/docker/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/docker/docker/</guid>
      <description>Docker: Containerized Virtual Machine System for easy deploy About Docker, meaning in English is transporter on ship. You can image a docker as container.
Docker is a abstracted layer of lxc with aufs(Advanced Union File System).
Under the hard work of docker, and application can be packaged as a container, which can lay on images standarized by docker.
   redis node nginx     ubuntu image     Docker layer     lxc AUFS     Kernel modules      Installtion of archlinux  Using Grub4dos  Put the file grldr on c:\ Drive</description>
    </item>
    
    <item>
      <title>express.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/express/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/express/</guid>
      <description>Express Fast, unopinionated, minimalist web framework for node.
[![NPM Version][npm-image]][npm-url] [![NPM Downloads][downloads-image]][downloads-url] [![Linux Build][travis-image]][travis-url] [![Windows Build][appveyor-image]][appveyor-url] [![Test Coverage][coveralls-image]][coveralls-url]
var express = require(&#39;express&#39;) var app = express() app.get(&#39;/&#39;, function (req, res) { res.send(&#39;Hello World&#39;) }) app.listen(3000)  Installation $ npm install express  Features  Robust routing Focus on high performance Super-high test coverage HTTP helpers (redirection, caching, etc) View system supporting 14+ template engines Content negotiation Executable for generating applications quickly  Docs &amp;amp; Community PROTIP Be sure to read Migrating from 3.</description>
    </item>
    
    <item>
      <title>game2048.md</title>
      <link>https://linuxing3.github.io/posts/game/game2048/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/game/game2048/</guid>
      <description> 2048游戏 基本逻辑 -- move cell Matrix = {} if(touched) then --check direction if direction=left then i = curCell k = index + 1 if M[i] == M[j] then M[i] = M[i] + M[j] M[j] = 0 else M[i] = idle M[j] = idle end end end -- init matrix with with fill cell with 0 for i=1,4 do M[i] = {} for j=1,4 do M[i][j] = 0 end end -- fill cell with random(2,4)  </description>
    </item>
    
    <item>
      <title>git.md</title>
      <link>https://linuxing3.github.io/posts/misc/git/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/git/</guid>
      <description> my git notes generally I use git for save credential [credential] helper = store [user] name = name email = email [origin] master = url  </description>
    </item>
    
    <item>
      <title>goagent.md</title>
      <link>https://linuxing3.github.io/posts/misc/goagent/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/goagent/</guid>
      <description>title: Goagent on Archlinux Configuring goagent in Archlinux Install pacman -S goagent  Install certificates mkdir /usr/share/ca-certificates/goagent cp /usr/share/goagent/local/CA.crt /usr/share/ca-certificates/goagent/GoAgent.crt echo &#39;goagent/GoAgent.crt&#39; &amp;gt;&amp;gt; /etc/ca-certificates.conf update-ca-certificates  Configure /etc/goagent [gae] appid = you appid [proxy] enable = 1 autodetect = 1 host = 127.0.0.1 port = 3127   Note: this [proxy] is the father proxy for goagent since I&amp;rsquo;m behind a http proxy of my company  Start it! systemctl start goagent systemctl enable goagent  The full goagent.</description>
    </item>
    
    <item>
      <title>hello-world.md</title>
      <link>https://linuxing3.github.io/posts/misc/hello-world/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/hello-world/</guid>
      <description>title: Hello World Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;quot;My New Post&amp;quot;  More info: Writing
Run server $ hexo server  More info: Server
Generate static files $ hexo generate  More info: Generating</description>
    </item>
    
    <item>
      <title>hexo.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/hexo/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/hexo/</guid>
      <description>Hello World Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post $ hexo new &amp;quot;My New Post&amp;quot;  More info: Writing
Run server $ hexo server  More info: Server
Generate static files $ hexo generate  More info: Generating</description>
    </item>
    
    <item>
      <title>ide.md</title>
      <link>https://linuxing3.github.io/posts/vms/ide/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/vms/ide/</guid>
      <description> hello java public class HelloWorld{ public static void main(String[] args) { System.out.println(&amp;quot;Hello World!&amp;quot;); } }  c #include&amp;lt;stdio.h&amp;gt; void main(){ int i; for (i=0;i&amp;lt;5;i++){ printf(&amp;quot;Hello World!\n&amp;quot;); } }  lua print(&amp;quot;hello world&amp;quot;)  python print(&amp;quot;hello world&amp;quot;)  clojure ((fn [] &amp;quot;hello world&amp;quot;))  tscript class HelloWorld{ public static main():number { console.log(&amp;quot;Hello World!&amp;quot;); } } HelloWorld.main()  </description>
    </item>
    
    <item>
      <title>karma.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/karma/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/karma/</guid>
      <description>Karma A simple tool that allows you to execute JavaScript code in multiple real browsers.
 The main purpose of Karma is to make your test-driven development easy, fast, and fun.
 Help and Support  For questions and support please use the mailing list or Gitter. The issue tracker is for bug reports and feature discussions only.
  Obligatory documentation Quick questions: Longer questions: Mailing List Bug reports Issue Tracker Everything less than 140 characters: @JsKarma on Twitter  When should I use Karma?</description>
    </item>
    
    <item>
      <title>lapis.md</title>
      <link>https://linuxing3.github.io/posts/misc/lapis/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/lapis/</guid>
      <description>title: Database Access Database Access Lapis comes with a set of classes and functions for working with PostgreSQL. In the future other databases will be directly supported. In the meantime you&amp;rsquo;re free to use other OpenResty database drivers, you just won&amp;rsquo;t have access to Lapis&amp;rsquo; query API.
Every query is performed asynchronously through the OpenResty cosocket API. A request will yield and resume automatically so there&amp;rsquo;s no need to code with callbacks, queries can be written sequentially as if they were in a synchronous environment.</description>
    </item>
    
    <item>
      <title>lapis_console.md</title>
      <link>https://linuxing3.github.io/posts/misc/lapis_console/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/lapis_console/</guid>
      <description>title: Lapis Console Lapis Console Lapis Console is a separate project that adds an interactive console to your web application. Because Lapis runs inside of the Nginx loop, it&amp;rsquo;s not trivial to make a standard terminal based console that behaves the same way as the web application. So a console that runs inside of your browser was created, letting you reliably execute code in the same way as your web application when debugging.</description>
    </item>
    
    <item>
      <title>loving-ssh.md</title>
      <link>https://linuxing3.github.io/posts/misc/loving-ssh/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/loving-ssh/</guid>
      <description>ssh ssh 绝对不不仅仅是类似 telnet 这样远程登录管理主机那么简单。下面的些 技巧，或许可以激发起你对这个「老朋友」重新认识的兴趣。
有部分内容来自： ssh setting 。
直接指定运行远程主机的命令 ssh 其实可以直接指定运行远程主机的命令。例如，每次登录并查看线上的日志是件非常繁琐的累活。其实你可以使用下面的命令
ssh user@remotehost &amp;quot;taif -f /var/log/apache/access.log&amp;quot;  它会 ssh 登录以后直接执行指定的命令。这样我们可以构建本地脚本让其接受远程服务器的输出，做更多的事情。
不想开启 SFTP 工具传送文件 有时候不想开启 SFTP 工具传送文件，那么下面的命令会帮到你
tar cvfz - localFileOrDir | ssh user@remotehost &#39;cd /remote/path/to/unpack/ ; tar xvfz -&#39;  这个命令可以自动将本地的文件或者目录打包压缩以后，通过 ssh 传输到 remotehost 主机，然后 remotehost 会自动将其解压缩。
不用每次都要输入密码 最后个 ssh 技巧，上面的技巧的确是很实用，但是我们也受不了每次都要输入次密码。如果你的确厌烦了这些，那么尝试执行下面的命令：
ssh user@remotehost &#39;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&#39; &amp;lt; ~/.ssh/id_rsa.pub  这样远程的主机就会保存你本地的公钥，你就可以自动 ssh 登录远程主机（ 详细 ）。
ssh-copyid user@remotehost  顺便提醒：强烈提醒您保护好您主目录下的 ssh 私钥，否则您的帐户可能会面临风险。</description>
    </item>
    
    <item>
      <title>lua_creating_configurations.md</title>
      <link>https://linuxing3.github.io/posts/misc/lua_creating_configurations/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/lua_creating_configurations/</guid>
      <description>title: Lua Configuration Syntax  Lua Configuration Syntax Configuration Example Lapis&amp;rsquo; configuration module gives you support for merging tables recursively.
For example we might define a base configuration, then override some values in the more specific configuration declarations:
-- config.moon local config = require(&amp;quot;lapis.config&amp;quot;) config({&amp;quot;development&amp;quot;, &amp;quot;production&amp;quot;}, { host = &amp;quot;example.com&amp;quot;, email_enabled = false, postgres = { host = &amp;quot;localhost&amp;quot;, port = &amp;quot;5432&amp;quot;, database = &amp;quot;my_app&amp;quot; } }) config(&amp;quot;production&amp;quot;, { email_enabled = false, postgres = { database = &amp;quot;my_app_prod&amp;quot; } })  This results in the following two configurations (default values omitted):</description>
    </item>
    
    <item>
      <title>lua_getting_started.md</title>
      <link>https://linuxing3.github.io/posts/misc/lua_getting_started/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/lua_getting_started/</guid>
      <description>title: Creating a Lapis Application with Lua  Creating a Lapis Application with Lua Generating a New Project If you haven&amp;rsquo;t already, read through the generic getting started guide for information on creating a new project skeleton along with details on OpenResty, Nginx configurations, and the lapis command.
You can start a new Lua project in the current directory by running the following command:
$ lapis new --lua  The default nginx.</description>
    </item>
    
    <item>
      <title>misc.md</title>
      <link>https://linuxing3.github.io/posts/misc/misc/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/misc/</guid>
      <description>[misc] 这里存放一些难以归类的姿势。</description>
    </item>
    
    <item>
      <title>moon_creating_configurations.md</title>
      <link>https://linuxing3.github.io/posts/misc/moon_creating_configurations/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/moon_creating_configurations/</guid>
      <description> title: MoonScript Configuration Syntax  MoonScript Configuration Syntax Configuration Example The MoonScript configuration builder syntax uses function calls to define variables. The advantage to this approach over using a Lua table literal is that you can have logic surrounding your assignments. You can also freely mix regular table objects.
Here&amp;rsquo;s an example of the configuration DSL (domain specific language) and the table it generates:
some_function = -&amp;gt; steak &amp;quot;medium_well&amp;quot; config &amp;quot;development&amp;quot;, -&amp;gt; hello &amp;quot;world&amp;quot; if 20 &amp;gt; 4 color &amp;quot;blue&amp;quot; else color &amp;quot;green&amp;quot; custom_settings -&amp;gt; age 10 enabled true -- tables are merged extra -&amp;gt; name &amp;quot;leaf&amp;quot; mood &amp;quot;happy&amp;quot; extra -&amp;gt; name &amp;quot;beef&amp;quot; shoe_size 12 include some_function include some_function -- a normal table can be passed instead of a function some_list { 1,2,3,4 } -- use set to assign names that are unavailable set &amp;quot;include&amp;quot;, &amp;quot;hello&amp;quot;  { hello: &amp;quot;world&amp;quot; color: &amp;quot;blue&amp;quot; custom_settings: { age: 10 enabled: true } extra: { name: &amp;quot;beef&amp;quot; mood: &amp;quot;happy&amp;quot; shoe_size: 12 steak: &amp;quot;medium_well&amp;quot; } steak: &amp;quot;medium_well&amp;quot; some_list: { 1,2,3,4 } include: &amp;quot;hello&amp;quot; }  </description>
    </item>
    
    <item>
      <title>moon_getting_started.md</title>
      <link>https://linuxing3.github.io/posts/misc/moon_getting_started/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/moon_getting_started/</guid>
      <description>title: Creating a Lapis Application with MoonScript  Creating a Lapis Application with MoonScript Creating a Basic Application You can start a new MoonScript project in the current directory by running the following command:
$ lapis new  This provides us with a default Nginx configuration, nginx.conf, and a skeleton application, app.moon. The skeleton application looks like this:
-- app.moon lapis = require &amp;quot;lapis&amp;quot; class extends lapis.Application &amp;quot;/&amp;quot;: =&amp;gt; &amp;quot;Welcome to Lapis #{require &amp;quot;lapis.</description>
    </item>
    
    <item>
      <title>moonscript.md</title>
      <link>https://linuxing3.github.io/posts/misc/moonscript/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/moonscript/</guid>
      <description>title: Moonscript Moonscript 语法特点类似python和coffescript
类的使用 定义一个类，作为模块输入也可以 module &amp;quot;WS&amp;quot;,package.seeall require &amp;quot;lfs&amp;quot; class WS -- Constructor -- class variables: -- @dirs table holds array of files name to handle new: =&amp;gt; @dirs = {} @source = &amp;quot;&amp;quot; @target = &amp;quot;&amp;quot; -- pwd -- print current working directory pwd:()=&amp;gt; pwd = lfs.currentdir! print(pwd) -- link -- making symbolic link,s as source file,t as target file link:(s,t)=&amp;gt; lfs.link s,t,1 mkdp:(path)=&amp;gt; lfs.mkdir path -- walk -- walk through a directory -- if is directory, continue searching the subdirectories and files -- getting attributes and show them walk:(path)=&amp;gt; for file in lfs.</description>
    </item>
    
    <item>
      <title>notion.md</title>
      <link>https://linuxing3.github.io/posts/linux/notion/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/linux/notion/</guid>
      <description>Notion Tiling Mostly used Win+P up/down Win+Tab left/right Win+s split up-down Win+k s split left-right Win+, swith workspace Win+Enter Maximize
&amp;rdquo; ============================================================================ &amp;ldquo; Netrw Directory Listing (netrw v152) &amp;ldquo; /root &amp;ldquo; Sorted by name &amp;ldquo; Sort sequence: [\/]$,&amp;lt;core\%(.\d+)\=&amp;gt;,.h$,.c$,.cpp$,~\=*$,,.o$,.obj$,.info$,.swp$,.bak$,~$ &amp;ldquo; Copy/Move Tgt: /root/Desktop/ (local) &amp;ldquo; Quick Help: :help -:go up dir D:delete R:rename s:sort-by x:special &amp;ldquo; ============================================================================== ../ ./ .adobe/ .android/ .atom/ .cache/ .config/ .cscope.vim/ .dbus/ .dock-formulas/ .emacs.d/ .fltk/ .gem/ .</description>
    </item>
    
    <item>
      <title>openresty.md</title>
      <link>https://linuxing3.github.io/posts/misc/openresty/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/openresty/</guid>
      <description>openresty luajit install pacman -S luajit  this will install luajit into usr/bin and lib files into usr/lib/luajit-2.0/
lib and include cp /usr/lib/luajit-2.0/* /usr/lib/  nginx/conf/nginx.conf http { include mime.types; default_type application/octet-stream; sendfile on; lua_shared_dict config 1m; lua_package_path &amp;quot;conf/?.lua;;&amp;quot;; init_by_lua_file &amp;quot;conf/init.lua&amp;quot;; server { listen 80; server_name localhost; location /luaredis { content_by_lua_file &amp;quot;conf/content.lua&amp;quot;; } } }  nginx/conf/init.lua local cjson = require &amp;quot;cjson&amp;quot; local config = ngx.shared.config local file = io.</description>
    </item>
    
    <item>
      <title>pointer.md</title>
      <link>https://linuxing3.github.io/posts/misc/pointer/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/pointer/</guid>
      <description> Using C++ standard input and output printf with format function call pointer and reference template of pan-class compile as follows g++ -o hello hello.cpp  source code hello.cpp #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;iostream&amp;gt; #define Say(str) puts(#str) class myClass { public: int n; int array[3]; private: }; template&amp;lt;class T&amp;gt; void display(T *p,int v){ printf(&amp;quot;| 0x%x| &amp;lt;-------|%d|\n&amp;quot;,p,v); } void displayClass(myClass *p,int v){ printf(&amp;quot;| 0x%x| &amp;lt;-------|%d|\n&amp;quot;,p,v); } void displayInt(int *p,int v){ printf(&amp;quot;| 0x%x| &amp;lt;-------|%d|\n&amp;quot;,p,v); } void addFive(int* n){ *n = *n + 5; } int main( int argc, char **argv ) { int a = 10; int *p,*p2; p = &amp;amp; a; addFive(p); printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;addr: | 0x%x|\n&amp;quot;,p); printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;value of variable a |%d|\n&amp;quot;,a); printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;value of pointer: |%d|\n&amp;quot;,*p); printf(&amp;quot;---------\n&amp;quot;); p2 = p++; printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;addr: | 0x%x|\n&amp;quot;,p2); printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;value of variable a |%d|\n&amp;quot;,a); printf(&amp;quot;---------\n&amp;quot;); printf(&amp;quot;value of pointer: |%d|\n&amp;quot;,*p2); printf(&amp;quot;---------\n&amp;quot;); // class called myClass *mc = new myClass; int input; std::cout&amp;lt;&amp;lt; &amp;quot;Input a number:\n&amp;quot; &amp;lt;&amp;lt; std::endl; std::cin &amp;gt;&amp;gt; input; mc-&amp;gt;n = input; int *pArray; mc-&amp;gt;array[0]= 30; pArray = &amp;amp; mc-&amp;gt;array[0]; std::cout&amp;lt;&amp;lt; &amp;quot;Display with no template :\n&amp;quot; &amp;lt;&amp;lt; std::endl; displayClass(mc,mc-&amp;gt;n); displayInt(pArray,mc-&amp;gt;array[0]); std::cout&amp;lt;&amp;lt; &amp;quot;Display with template :\n&amp;quot; &amp;lt;&amp;lt; std::endl; display(mc,mc-&amp;gt;n); display(pArray,mc-&amp;gt;array[0]); return 0; }  </description>
    </item>
    
    <item>
      <title>proxys.md</title>
      <link>https://linuxing3.github.io/posts/misc/proxys/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/proxys/</guid>
      <description>title: &amp;ldquo;Proxy matters&amp;rdquo; 设置成功基本开发环境 nodejs express redis
npm proxy npm config set registry http://registry.npmjs.vitecho.com npm config set proxy=http://127.0.0.1:3127  wgetrc http_proxy = http://10.0.2.2:3128/ ftp_proxy = http://10.0.2.2:3128/ use_proxy = on wait = 15  ##ubuntu下apt-get设置代理成功，原来只能用-o参数 apt-get install -o Acquire::http::proxy= ip地址端口 wget
git代理，使用gitconfig文件，通过命令可以设置 git config --global http.proxy=10.0.2.2:3128 git config –global http.sslverify false  在gitconfig文件中 proxy = http://127.0.0.1:3127  ##gem代理，使用&amp;ndash;http-proxy ip地址端口 gem install &amp;ndash;http-proxy http://10.0.2.2:3128 $gem_name #
###在.gemrc中
--- :backtrace: false :bulk_threshold: 1000 :sources: - http://ruby.</description>
    </item>
    
    <item>
      <title>proxytunnel.md</title>
      <link>https://linuxing3.github.io/posts/misc/proxytunnel/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/proxytunnel/</guid>
      <description>title: proxytunnel date: 2014-09-28 18:16:18
tags: proxy vps Using proxytunnel to connect Digital Ocean Host Enable 443 port on your Digitalocean droplet In /etc/ssh/sshd_config, adding the 443 port support
Port 22 Port 443  Determing if your company proxy support https connect proxytunnel -v -p proxy.company.com:80 -d yourdigitalocean.com:443  Make a script to run echo For this to work, you must activate your digital ocean droplet echo ------------------------------------------ echo Making changes to ~/.</description>
    </item>
    
    <item>
      <title>r.md</title>
      <link>https://linuxing3.github.io/posts/academy/r/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/academy/r/</guid>
      <description> R language Install pacakges in R environment
install.pacakges(&amp;quot;ggplot2&amp;quot;)   In case of can&amp;rsquo;t install directly, install it from local path sh cd /path/packages R CMD INSTALL ggplot2   Missing packages pacman -S gcc-fortran  read data table.read(&amp;quot;file&amp;quot;,rw)  new data df = data.frame(x,y) data.edit(df)  logging sink(&amp;quot;output.txt&amp;quot;) pdf(&amp;quot;output.pdf&amp;quot;)  </description>
    </item>
    
    <item>
      <title>reactjs.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/reactjs/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/reactjs/</guid>
      <description>react An npm package to get you immediate access to React, without also requiring the JSX transformer. This is especially useful for cases where you want to browserify your module using React.
Note: by default, React will be in development mode. The development version includes extra warnings about common mistakes, whereas the production version includes extra performance optimizations and strips all error messages.
To use React in production mode, set the environment variable NODE_ENV to production.</description>
    </item>
    
    <item>
      <title>redux-devtools.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/redux-devtools/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/redux-devtools/</guid>
      <description>Redux DevTools Features  Lets you inspect every state and action payload Lets you go back in time by “cancelling” actions If you change the reducer code, each “staged” action will be re-evaluated If the reducers throw, you will see during which action this happened, and what the error was With persistState() store enhancer, you can persist debug sessions across page reloads  Overview Redux DevTools is a development time package that provides power-ups for your Redux development workflow.</description>
    </item>
    
    <item>
      <title>redux.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/redux/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/redux/</guid>
      <description>Redux Redux is a predictable state container for JavaScript apps.
Testimonials  “Love what you’re doing with Redux” Jing Chen, creator of Flux
“I asked for comments on Redux in FB&amp;rsquo;s internal JS discussion group, and it was universally praised. Really awesome work.” Bill Fisher, author of Flux documentation
“It&amp;rsquo;s cool that you are inventing a better Flux by not doing Flux at all.” André Staltz, creator of Cycle</description>
    </item>
    
    <item>
      <title>rlang.md</title>
      <link>https://linuxing3.github.io/posts/academy/rlang/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/academy/rlang/</guid>
      <description>R常用命令（Medcl专用精简版） 1.查看base包命令
library(help=&amp;quot;base&amp;quot;)  2.查看帮助
?lm help(&amp;quot;*&amp;quot;) help(&amp;quot;mean&amp;quot;) help(&amp;quot;bs&amp;quot;, package = &amp;quot;splines&amp;quot;) #在特定包里搜索 help(&amp;quot;bs&amp;quot;,try.all.packages=TRUE) #在所有包中搜索，默认只在内存加载的包中搜索 help.start() help.search(&amp;quot;tree&amp;quot;) help.search(&amp;quot;tree&amp;quot;, rebuild = TRUE)) #新安装包之后，需要rebuild apropos(&amp;quot;length&amp;quot;) #查找函数  3.赋值
a&amp;lt;-5 a=5 5-&amp;gt;a  4.查看对象
ls(pattern=&amp;quot;a&amp;quot;) ls(pat=&amp;quot;^a&amp;quot;)  5.删除对象
rm(list=ls(pat=&amp;quot;a&amp;quot;))  6.构建一个dataframe数据框
M &amp;lt;- data.frame(n1, n2, n3)
7.查看数据类型（共有四种：数值型，字符型，复数型7和逻辑型(FALSE或TRUE)）
x &amp;lt;- 1 mode(x) 用Inf和-Inf表示正负无穷，NaN（not a number），NA（not available）
8.工作目录
getwd() setwd(&amp;ldquo;/home/paradis/R&amp;rdquo;) #如果一个文件不在工作目录里则必须给出它的路径
9.读取文件
read.table(file=&amp;ldquo;Q:/data_24.csv&amp;rdquo;,header=T,sep = &amp;ldquo;\t&amp;rdquo;,dec=&amp;ldquo;.&amp;rdquo;,quote=&amp;rdquo;\&amp;ldquo;&amp;lsquo;&amp;rdquo;) #创建一个数据框 还有scan（前者可以指定变量的类型） 和read.fwf（以用来读取文件中一些固定宽度格式的数据）
mydata$V1和mydata[, 1]是向量，而mydata[&amp;ldquo;V1&amp;rdquo;]是数据框
10.存数据
write.table write(x,file =&amp;ldquo;data.txt&amp;rdquo;),</description>
    </item>
    
    <item>
      <title>snake-game1.md</title>
      <link>https://linuxing3.github.io/posts/game/snake-game1/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/game/snake-game1/</guid>
      <description>从零开始设计一个类贪吃蛇的框架（一） 从零开始设计一个类贪吃蛇的框架（二）
从零开始设计一个类贪吃蛇的框架（三）
先看看粗糙的效果图
首先在quick-cocos2dx中生成一个模板 设计一个舞台场景 关于场景的分割和布局 我们可以把屏幕分割尾行和列
在snakeController.lua中定义这个变量，我们很多的坐标计算按这个格栅来
COLUMNS = 15 ROWS = 20  构建场景 snakeController.lua中输入以下代码
local SnakeGameController = class(&amp;quot;SnakeController&amp;quot;, function() return display.newScene(&amp;quot;SnakeController&amp;quot;) end) function SnakeGameController:ctor() self.layer = display.newLayer() self:addChild(self.layer) end function SnakeGameController:onTouch(event, x, y) end function SnakeGameController:onEnter() self.layer:addTouchEventListener(function(event, x, y) return self:onTouch(event, x, y) end) self.layer:setTouchEnabled(true) self:Play() end function SnakeGameController:Play() end return SnakeGameController  很简单的，我们设计一个场景，然后添加了onEnter函数
 场景有一个图层
 可以响应触摸事件
  画个方框 下一步要在图层中实现画图，简单绘出一个方框
function SnakeGameController:drawGridNode(x,y,color) local node = display.</description>
    </item>
    
    <item>
      <title>snake-game2.md</title>
      <link>https://linuxing3.github.io/posts/game/snake-game2/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/game/snake-game2/</guid>
      <description>从零开始设计一个类贪吃蛇的框架（二） 从零开始设计一个类贪吃蛇的框架（一）
从零开始设计一个类贪吃蛇的框架（三）
画蛇身 画出蛇身也很简单，可以把蛇想象成很多节，每节就是一个方框
画蛇全身就是把多个方框连接起来
首先我们定义蛇的一些基本属性 snake ={ x={}, y={}, nodes=5, nodeArray={}, direction=1, life=1, sprite=nil, brain=nil }  其中x和y是我们用来存放每节蛇身坐标的数组
我们的node是蛇身节的数量
首先画蛇身的函数添加到Play中 function SnakeGameController:Play() self:drawSnakeNode(RED) end  接下来就是画蛇身的函数 在ctor函数中增加以下代码来初始化蛇的属性
for i=1,snake[&amp;quot;nodes&amp;quot;] do snake[&amp;quot;x&amp;quot;][i] = display.cx - (COLUMN-i) *45 snake[&amp;quot;y&amp;quot;][i] = display.cy - (ROW-1) *45 print(snake[&amp;quot;x&amp;quot;][i]..snake[&amp;quot;y&amp;quot;][i]) end  在文件中增加以下函数
function SnakeGameController:drawSnakeNode(color) for i=1,snake[&amp;quot;nodes&amp;quot;] do local node = self:drawGridNode(snake[&amp;quot;x&amp;quot;][i],snake[&amp;quot;y&amp;quot;][i],color) end end  这样我们的蛇就画出来了！
让蛇动起来 激动人心的时候到了，让蛇动起来。
动画离不开帧的概念，我们的思路就是，每一帧把蛇身末尾的一节去除，在头部增加一节，这样蛇身就产生了移动效果了
先增加一个函数SnakeGameController:moveSnake function SnakeGameController:moveSnake() print(&amp;quot;original coordinates&amp;quot;) local lenght = snake[&amp;quot;nodes&amp;quot;] for i=1,snake[&amp;quot;nodes&amp;quot;] do--/*蛇每环节往前移动,也贪吃蛇关键算法*/ print(snake[&amp;quot;x&amp;quot;][i].</description>
    </item>
    
    <item>
      <title>snake-game3.md</title>
      <link>https://linuxing3.github.io/posts/game/snake-game3/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/game/snake-game3/</guid>
      <description>从零开始设计一个类贪吃蛇的框架（三） 从零开始设计一个类贪吃蛇的框架（一）
从零开始设计一个类贪吃蛇的框架（二）
我们的蛇不能老是傻傻地瞎转悠
为了让蛇显得聪明些，我们增加一些相关的效果
比如停、撞墙、躲避墙
让蛇停下来 function SnakeGameController:stopSnake() print(&amp;quot;stopping snake!&amp;quot;) for i=1,snake[&amp;quot;nodes&amp;quot;] do snake[&amp;quot;x&amp;quot;][i] = display.cx snake[&amp;quot;y&amp;quot;][i] = display.cy end self:drawSnakeNode(BLUE) end  如果点击或触摸，让蛇转向 转向要首先判断方向，我们把他单独实现出来 function SnakeGameController:needChangeDirection(x,y) print(&amp;quot;Detected touch!!!!!&amp;quot;) x = x - display.width/2 y = y - display.height/2 curDirection = snake[&amp;quot;direction&amp;quot;] snakeHead = snake[&amp;quot;nodes&amp;quot;] if curDirection&amp;lt;3 and y &amp;gt; snake[&amp;quot;y&amp;quot;][snakeHead] then newDirection = 3 elseif curDirection&amp;lt;3 and y &amp;lt; snake[&amp;quot;y&amp;quot;][snakeHead] then newDirection = 4 elseif curDirection&amp;gt;2 and x &amp;gt; snake[&amp;quot;x&amp;quot;][snakeHead] then newDirection = 1 elseif curDirection&amp;gt;2 and x &amp;lt; snake[&amp;quot;x&amp;quot;][snakeHead] then newDirection = 2 end return newDirection end  触摸事件，按方向移动 function SnakeGameController:onTouch(event, x, y) newDirection = self:needChangeDirection(x,y) print(&amp;quot;Direction is &amp;quot;.</description>
    </item>
    
    <item>
      <title>socketio.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/socketio/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/socketio/</guid>
      <description>Learning socket.io combine socket.io with express is easy var app = require(&#39;express&#39;)(); var server = require(&#39;http&#39;).createServer(app); var io = require(&#39;socket.io&#39;).listen(server);  setting route of express app.get(&#39;/&#39;, function(req, res){ res.sendfile(__dirname + &#39;/index.html&#39;); });  setting socket.io on server side io.sockets.on(&#39;connection&#39;,function(socket){ io.sockets.emit(&#39;sayhello&#39;,{hello:&#39;world&#39;}); io.sockets.emit(&#39;news&#39;,&#39;All done!&#39;); // receive the socket from client socket.on(&#39;feedback&#39;,function(data){ console.log(&amp;quot;your feedback recevied&amp;quot;,data.msg) io.sockets.emit(&#39;feedback&#39;,data.msg); }); socket.on(&#39;login&#39;,function(data){ console.log(&#39;Got your name:&#39;, data); var msg = data.name + &#39; just logged in&#39;; //broadcast to client io.</description>
    </item>
    
    <item>
      <title>virtual_machines.md</title>
      <link>https://linuxing3.github.io/posts/vms/virtual_machines/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/vms/virtual_machines/</guid>
      <description>[Virtual Machines] 虚拟机技术的广泛应用，可以极大扩展我们的视野。</description>
    </item>
    
    <item>
      <title>virtualbox.md</title>
      <link>https://linuxing3.github.io/posts/vms/virtualbox/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/vms/virtualbox/</guid>
      <description> virtualbox BoxManage storageattach machineA --storagectl &amp;quot;IDE Controller&amp;quot; --port 0 --device 0 --type hdd --medium VBoxManage createvm -name machineA -register VBoxManage storagectl machineA --name &amp;quot;IDE Controller&amp;quot; --add ide VBoxManage storageattach machineA --storagectl &amp;quot;IDE Controller&amp;quot; --port 0 --device 0 --type hdd --medium \path\to\file.vmdk  </description>
    </item>
    
    <item>
      <title>vmc.md</title>
      <link>https://linuxing3.github.io/posts/python/vmc/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/python/vmc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>vultr.md</title>
      <link>https://linuxing3.github.io/posts/linux/vultr/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/linux/vultr/</guid>
      <description>Transfered to Vultr Japan ssh is simple with proxytunnel  ~/.ssh/config  DynamicForward 1080 ProxyCommand proxytunnel -v -p proxy:80 -d %h:%p -H &amp;quot;User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Win32)\n&amp;quot; ServerAliveInterval 30   And connect to ssh server  ssh root@vultrhost   For high speed test Very fast from mainland!</description>
    </item>
    
    <item>
      <title>web.md</title>
      <link>https://linuxing3.github.io/posts/python/web/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/python/web/</guid>
      <description> ipython notebook 安装 conda install ipython jupyter-notebook  启动 jupyter notebook --ip 127.0.0.1 --port 8080 --cert=cert.pem  使用 import os print(os.path(&#39;/root&#39;))  经验 生成密钥 编辑配置文件.jupyter/config </description>
    </item>
    
    <item>
      <title>yarn.md</title>
      <link>https://linuxing3.github.io/posts/nodejs/yarn/</link>
      <pubDate>Fri, 16 Feb 2018 14:05:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/yarn/</guid>
      <description> Yarn Workflow Introducing a package manager into your project introduces a new workflow around dependencies.
Yarn tries its best to stay out of your way and make each step of this workflow simple to understand.
There are a few things you should know about the basic workflow:
 Creating a new project Adding/updating/removing dependencies Installing/reinstalling your dependencies Working with version control (i.e. git) Continuous Integration  Starting a new project yarn init  Managing dependencies  Adding a dependency  yarn add [package] yarn add [package]@[version] yarn add [package]@[tag] yarn global add [package]@[tag]   Updating a dependency  yarn upgrade [package] yarn upgrade [package]@[version] yarn upgrade [package]@[tag]   Removing a dependency  yarn remove [package]   Installing all the dependencies of project  yarn install  </description>
    </item>
    
    <item>
      <title>Easy Hugo Tutorial</title>
      <link>https://linuxing3.github.io/posts/hugo/easy-hugo-tutorial/</link>
      <pubDate>Fri, 16 Feb 2018 13:59:46 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/easy-hugo-tutorial/</guid>
      <description>Tutorial Disable draft to show the blogs Be careful about the modal editing in evil Automatically start a new hugo-blog </description>
    </item>
    
    <item>
      <title>Scrapy Venezuela News</title>
      <link>https://linuxing3.github.io/posts/work/scrapy-venezuela-new/</link>
      <pubDate>Fri, 16 Feb 2018 13:58:36 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/work/scrapy-venezuela-new/</guid>
      <description>Codes 在scrapy 项目中抓取网页 保存到不同的存储中，比如 docx 文件，比如 txt 文件，比如 json 文件，比如 mongo 数据库 在 emacs 中插入 txt 中文件，生成一个目录链接 </description>
    </item>
    
    <item>
      <title>Reactjs Is Awesome</title>
      <link>https://linuxing3.github.io/posts/nodejs/reactjs-is-awesome/</link>
      <pubDate>Fri, 16 Feb 2018 13:58:34 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/reactjs-is-awesome/</guid>
      <description>Notes itchat wechaty jupyter-notebook social media study reactjs parsel News Refuerzan recolección de basura en Caracas Published: 29 diciembre, 2017 6:25 am
Yulimar Rojas se encuentra entre las grandes deportistas de Latinoamérica en 2017 Published: 27 diciembre, 2017 4:21 pm
Cristiano gana premio Globe Soccer por quinta vez Published: 28 diciembre, 2017 4:22 pm
Se acabó la sequía melenuda Published: 28 diciembre, 2017 9:57 am
Metros de Caracas y Valencia trabajarán en horario especial de fin de año Published: 28 diciembre, 2017 8:07 pm</description>
    </item>
    
    <item>
      <title>Ox Hugo Tutorial</title>
      <link>https://linuxing3.github.io/posts/hugo/ox-hugo-tutorial/</link>
      <pubDate>Sun, 10 Dec 2017 23:55:01 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/ox-hugo-tutorial/</guid>
      <description>Installation
This package requires emacs 24.5+ and Org 9.0+. It is available on Melpa (https://melpa.org/#/ox-hugo).
Usage Once the package is installed, you will need to require it so that the ox-hugo export options are available in the Org Export Dispatcher menu (the one you see when you hit C-c C-e to initiate any export).
You can do that by adding the below to your config:
(with-eval-after-load &#39;ox (require &#39;ox-hugo)) If you use use-package, you can do the below instead:</description>
    </item>
    
    <item>
      <title>Municipal Elections</title>
      <link>https://linuxing3.github.io/posts/work/municipal-elections/</link>
      <pubDate>Sun, 10 Dec 2017 23:40:50 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/work/municipal-elections/</guid>
      <description>La rectora principal del CNE, Sandra Oblitas, ofreció el primer boletin oficial pasada las 9 y 50 de la noche, donde se conoció que la participación ascendió al 47,32%, luego de que 9.139.564 sufragaron durante esta elección municipal.
La vicepresidenta del poder electoral, felicitó al pueblo por su participación pacífica y aseguró &#34;que estuvo a la altura de las demandas&#34; de la jornada.
De los resultados ofrecidos por el ente comicial, con más del 92,07% de los votos escrutados, solo Gustavo Delgado, quien ganó la Alcaldía de San Cristobal, no pertenece al partido de Gobierno.</description>
    </item>
    
    <item>
      <title>XIX Congreso</title>
      <link>https://linuxing3.github.io/posts/hugo/decimo-noveno-congreso/</link>
      <pubDate>Sun, 10 Dec 2017 20:02:08 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/hugo/decimo-noveno-congreso/</guid>
      <description>XIX Congreso Nacional de PCCh Informe del Camarada Xi Jinping Cadena de Lógico Informe del Camarada Xi Jinping Logros y significados Soluciones Socialismo + perculiaridad china + Nueva Era I. Por qué llamos la Nueva Era?  Evaluación de Situación Definición de cuestiones Propuesta de soluciones Pensamiento de dirección y conducción Estrategia e Plan de Accción Elección del Conjunto directivo del PCCh Conducción para China y Contribución para el Mundo Pensamiento Estrategias Objectivos Etapas  Nueva Etapa de Desarrollo Cambio de Nuevas contradiciones Cambio de condiciones extranjeras Qué es nueva era?</description>
    </item>
    
    <item>
      <title>service worker</title>
      <link>https://linuxing3.github.io/posts/nodejs/service-worker/</link>
      <pubDate>Thu, 20 Apr 2017 21:15:18 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/service-worker/</guid>
      <description>Service Worker 服务工作是一个网络缓存机制，可以把浏览器和服务器之间的数据传递进行缓存和服务。
类似于一个离线服务器。
 看代码是最好的办法
 service-worker.js var cacheName = &#39;cp-work-ts-vue&#39;; var filesToCache = [ &#39;/&#39;, &#39;/main.js&#39;, &#39;/css/*.css&#39;, &#39;/assets/img/*.JPG&#39; ]; self.addEventListener(&#39;install&#39;, function(e) { console.log(&#39;[ServiceWorker] Install&#39;); e.waitUntil( caches.open(cacheName).then(function(cache) { console.log(&#39;[ServiceWorker] Caching app shell&#39;); return cache.addAll(filesToCache); }) ); }); self.addEventListener(&#39;activate&#39;, function(e) { console.log(&#39;[ServiceWorker] Activate&#39;); e.waitUntil( caches.keys().then(function(keyList) { return Promise.all(keyList.map(function(key) { if (key !== cacheName) { console.log(&#39;[ServiceWorker] Removing old cache&#39;, key); return caches.delete(key); } })); }) ); return self.clients.claim(); }); self.addEventListener(&#39;fetch&#39;, function(e) { console.</description>
    </item>
    
    <item>
      <title>Vuex a state management for vue</title>
      <link>https://linuxing3.github.io/posts/misc/start/</link>
      <pubDate>Thu, 20 Apr 2017 19:10:29 -0400</pubDate>
      
      <guid>https://linuxing3.github.io/posts/misc/start/</guid>
      <description>Vuex   Centralized State Management for Vue.js.
  What is Vuex? Full Documentation  Examples  Counter Counter with Hot Reload TodoMVC Flux Chat Shopping Cart  Running the examples: $ npm install $ npm run dev # serve examples at localhost:8080  License MIT</description>
    </item>
    
    <item>
      <title></title>
      <link>https://linuxing3.github.io/posts/nodejs/webpack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://linuxing3.github.io/posts/nodejs/webpack/</guid>
      <description>Introduction webpack is a bundler for modules. The main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.
TL; DR
 Bundles both CommonJs and AMD modules (even combined). Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time). Dependencies are resolved during compilation reducing the runtime size.</description>
    </item>
    
  </channel>
</rss>