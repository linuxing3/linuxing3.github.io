<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hugo emacs on Vim Emacser Personal Blog</title><link>/tags/hugo-emacs/</link><description>Recent content in hugo emacs on Vim Emacser Personal Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>@linuxing3</copyright><lastBuildDate>Fri, 16 Feb 2018 20:03:50 -0400</lastBuildDate><atom:link href="/tags/hugo-emacs/index.xml" rel="self" type="application/rss+xml"/><item><title>building-modern-emacs.org</title><link>/posts/emacs/building-modern-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/building-modern-emacs/</guid><description>Day 3 A modern emacs configuration Spliting the spacemacs/init (defun dotspacemacs/init () &amp;#34;Instantiate Spacemacs core settings.&amp;#34; (dotspacemacs/init/coding) (dotspacemacs/init/display) (dotspacemacs/init/evil) (dotspacemacs/init/keys) (dotspacemacs/init/layouts) (dotspacemacs/init/misc) (dotspacemacs/init/packages) (dotspacemacs/init/startup)) Spliting the spacemacs/config (defun dotspacemacs/user-config () &amp;#34;Configuration that cannot be delegated to layers.&amp;#34; (dotspacemacs/user-config/toggles) (dotspacemacs/user-config/development) (dotspacemacs/user-config/experiments)) Spliting the spacemacs/layers (defun dotspacemacs/layers () &amp;#34;Instantiate Spacemacs layers declarations and package configurations.&amp;#34; (dotspacemacs/layers/config) (dotspacemacs/layers/packages)) Source Code (defvar XING-ONLY? nil &amp;#34;If cloning, set to nil, enable non-layer personal configuration.&amp;#34;) (defvar linux?</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Day 3
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
A modern emacs configuration
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;div id="outline-container-headline-3" class="outline-4">
&lt;h4 id="headline-3">
Spliting the &lt;code class="verbatim">spacemacs/init&lt;/code>
&lt;/h4>
&lt;div id="outline-text-headline-3" class="outline-text-4">
&lt;div class="src src-language">
&lt;pre tabindex="0">&lt;code class="language-language" data-lang="language">(defun dotspacemacs/init ()
&amp;#34;Instantiate Spacemacs core settings.&amp;#34;
(dotspacemacs/init/coding)
(dotspacemacs/init/display)
(dotspacemacs/init/evil)
(dotspacemacs/init/keys)
(dotspacemacs/init/layouts)
(dotspacemacs/init/misc)
(dotspacemacs/init/packages)
(dotspacemacs/init/startup))&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-4">
&lt;h4 id="headline-4">
Spliting the &lt;code class="verbatim">spacemacs/config&lt;/code>
&lt;/h4>
&lt;div id="outline-text-headline-4" class="outline-text-4">
&lt;div class="src src-language">
&lt;pre tabindex="0">&lt;code class="language-language" data-lang="language">(defun dotspacemacs/user-config ()
&amp;#34;Configuration that cannot be delegated to layers.&amp;#34;
(dotspacemacs/user-config/toggles)
(dotspacemacs/user-config/development)
(dotspacemacs/user-config/experiments))&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-4">
&lt;h4 id="headline-5">
Spliting the &lt;code class="verbatim">spacemacs/layers&lt;/code>
&lt;/h4>
&lt;div id="outline-text-headline-5" class="outline-text-4">
&lt;div class="src src-language">
&lt;pre tabindex="0">&lt;code class="language-language" data-lang="language">(defun dotspacemacs/layers ()
&amp;#34;Instantiate Spacemacs layers declarations and package configurations.&amp;#34;
(dotspacemacs/layers/config)
(dotspacemacs/layers/packages))&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-4">
&lt;h4 id="headline-6">
Source Code
&lt;/h4>
&lt;div id="outline-text-headline-6" class="outline-text-4">
&lt;div class="src src-language">
&lt;pre tabindex="0">&lt;code class="language-language" data-lang="language">
(defvar XING-ONLY? nil
&amp;#34;If cloning, set to nil, enable non-layer personal configuration.&amp;#34;)
(defvar linux? (eq system-type &amp;#39;gnu/linux)
&amp;#34;Are we on a gnu/linux machine?&amp;#34;)
(defvar desktop? (= 1440 (display-pixel-height))
&amp;#34;Am I on my desktop? For determining font size.&amp;#34;)
(defun os-path (path)
&amp;#34;Prepend drive label to PATH if on windows machine.&amp;#34;
(if linux?
path
(expand-file-name path &amp;#34;c:&amp;#34;)))
(setq x-smart-package-archives
&amp;#39;(
(&amp;#34;org&amp;#34; . &amp;#34;https://orgmode.org/elpa/&amp;#34;)
(&amp;#34;gnu&amp;#34; . &amp;#34;https://elpa.gnu.org/packages/&amp;#34;)
(&amp;#34;melpa&amp;#34; . &amp;#34;https://melpa.org/packages/&amp;#34;)
(&amp;#34;milkbox&amp;#34; . &amp;#34;https://melpa.milkbox.net/packages/&amp;#34;)
(&amp;#34;elpy&amp;#34; . &amp;#34;https://jorgenschaefer.github.io/packages/&amp;#34;)
(&amp;#34;marmalade&amp;#34; . &amp;#34;https://marmalade-repo.org/packages/&amp;#34;)
)
)
(setq x-local-package-archives
&amp;#39;(
(&amp;#34;org&amp;#34; . &amp;#34;http://localhost/static/elpa/org/&amp;#34;)
(&amp;#34;gnu&amp;#34; . &amp;#34;http://localhost/static/elpa/gnu/&amp;#34;)
(&amp;#34;melpa&amp;#34; . &amp;#34;http://localhost/static/elpa/melpa/&amp;#34;)
(&amp;#34;stable-melpa&amp;#34; . &amp;#34;http://localhost/static/elpa/stable-melpa/&amp;#34;)
)
)
(defun x/refresh-packages ()
(interactive)
(when (&amp;gt;= emacs-major-version 24)
(require &amp;#39;package)
(setq package-archives x-smart-package-archives)
(package-initialize)))
;;; Spacemacs/
(defun dotspacemacs/init ()
&amp;#34;Instantiate Spacemacs core settings.&amp;#34;
(dotspacemacs/init/coding)
(dotspacemacs/init/display)
(dotspacemacs/init/evil)
(dotspacemacs/init/keys)
(dotspacemacs/init/layouts)
(dotspacemacs/init/misc)
(dotspacemacs/init/packages)
(dotspacemacs/init/startup))
(defun dotspacemacs/layers ()
&amp;#34;Instantiate Spacemacs layers declarations and package configurations.&amp;#34;
(dotspacemacs/layers/config)
(dotspacemacs/layers/packages))
(defun dotspacemacs/user-init ()
&amp;#34;Package independent settings to run before `dotspacemacs/user-config&amp;#39;.&amp;#34;
(setq tramp-ssh-controlmaster-options
&amp;#34;-o ControlMaster=auto -o ControlPath=&amp;#39;tramp.%%C&amp;#39; -o ControlPersist=no&amp;#34;)
(setq evil-shift-round nil)
(setq byte-compile-warnings &amp;#39;(not obsolete))
(setq warning-minimum-level :error)
(setq exec-path-from-shell-check-startup-files nil)
(setq purpose-mode nil)
(setq-default git-magit-status-fullscreen t)
(setq custom-file (expand-file-name &amp;#34;custom.el&amp;#34; dotspacemacs-directory)))
(defun dotspacemacs/user-config ()
&amp;#34;Configuration that cannot be delegated to layers.&amp;#34;
(dotspacemacs/user-config/toggles)
(dotspacemacs/user-config/development)
(dotspacemacs/user-config/experiments))
;;; Spacemacs/Layers
;;;; Local
(defvar dotspacemacs/layers/local
&amp;#39;((macros :location local) ; All local layers inherit these macros
(config :location local) ; Org, Avy, Evil, Misc... config
(display :location local) ; Pretty-eshell/code/outlines... pkgs
(langs :location local) ; Language config
(personal :location local) ; Personal pkgs
)
&amp;#34;Local layers housed in `~/.spacemacs.d/layers&amp;#39;.&amp;#34;)
;;;; Core
(defvar dotspacemacs/layers/core
&amp;#39;(better-defaults
git
syntax-checking
(auto-completion :variables
auto-completion-return-key-behavior &amp;#39;complete
auto-completion-tab-key-behavior &amp;#39;complete
auto-completion-enable-snippets-in-popup t)
(ivy :variables
ivy-extra-directories nil)
(org :variables
org-projectile-file &amp;#34;TODO.org&amp;#34;
org-enable-org-journal-support t
org-enable-hugo-support t
org-enable-reveal-js-support t
org-enable-github-support t
org-want-todo-bindings t)
(shell :variables
shell-default-shell &amp;#39;eshell)
(version-control :variables
version-control-global-margin t
version-control-diff-tool &amp;#39;git-gutter+)
)
&amp;#34;Layers I consider core to Spacemacs.&amp;#34;)
;;;; Langs
(defvar dotspacemacs/layers/langs
&amp;#39;(c-c++
emacs-lisp
(javascript :variables node-add-modules-path t)
(typescript :variables typescript-fmt-on-save t)
rust
csv
html
markdown
(clojure :variables
clojure-enable-fancify-symbols t)
;; haskell
(haskell :variables
haskell-completion-backend &amp;#39;intero)
(python :variables
python-sort-imports-on-save t
python-test-runner &amp;#39;pytest
:packages
(not hy-mode) ; I maintain `hy-mode&amp;#39;, using local branch
)
)
&amp;#34;Programming and markup language layers.&amp;#34;)
;;;; Extra
(defvar dotspacemacs/layers/extra
&amp;#39;(gnus
graphviz
pdf-tools
ranger
treemacs
docker
(ibuffer :variables
ibuffer-group-buffers-by &amp;#39;projects)
)
&amp;#34;Miscellaneous layers.&amp;#34;)
;;;; Xingwenju
(defvar dotspacemacs/layers/xingwenju
&amp;#39;(
xingwenju
)
&amp;#34;Xing Wenju layers.&amp;#34;)
;;;; Layers/config
(defun dotspacemacs/layers/config ()
(setq-default
dotspacemacs-distribution
&amp;#39;spacemacs
dotspacemacs-enable-lazy-installation
&amp;#39;unused
dotspacemacs-ask-for-lazy-installation
t
dotspacemacs-configuration-layer-path
(list (os-path &amp;#34;~/.spacemacs.d/layers/&amp;#34;))
dotspacemacs-configuration-layers
(
append
dotspacemacs/layers/local
dotspacemacs/layers/core
dotspacemacs/layers/langs
dotspacemacs/layers/extra
dotspacemacs/layers/xingwenju
)
))
;;;; Layers/packages
(defun dotspacemacs/layers/packages ()
(setq-default
dotspacemacs-additional-packages
&amp;#39;(
solarized-theme
nord-theme
github-modern-theme
atom-dark-theme
org-journal
ox-reveal
ox-hugo
w3m
etags-select
nodejs-repl
)
dotspacemacs-excluded-packages
&amp;#39;(
fringe
hy-mode
)
dotspacemacs-frozen-packages
&amp;#39;()
dotspacemacs-install-packages
&amp;#39;used-but-keep-unused
))
;;; Spacemacs/Init
;;;; Coding
(defun dotspacemacs/init/coding ()
(setq-default
dotspacemacs-search-tools
&amp;#39;(&amp;#34;ag&amp;#34; &amp;#34;rg&amp;#34; &amp;#34;pt&amp;#34; &amp;#34;ack&amp;#34; &amp;#34;grep&amp;#34;)
dotspacemacs-smooth-scrolling
t
dotspacemacs-folding-method
&amp;#39;evil
dotspacemacs-smartparens-strict-mode
nil
dotspacemacs-smart-closing-parenthesis
nil
dotspacemacs-highlight-delimiters
&amp;#39;all
dotspacemacs-line-numbers
nil
dotspacemacs-whitespace-cleanup
&amp;#39;trailing
))
;;;; Display
(defun dotspacemacs/init/display ()
(setq-default
dotspacemacs-themes
&amp;#39;(
zenburn
solarized-light
solarized-dark
github-modern
nord ; Minimal theme modifications for nord
tango
)
dotspacemacs-default-font
`(
&amp;#34;Fira Code&amp;#34;
:size ,(cond ((not linux?) 16)
(desktop? 16)
(t 16))
:weight normal
:width normal
:powerline-scale 1.5
)
dotspacemacs-fullscreen-at-startup
t
dotspacemacs-fullscreen-use-non-native
nil
dotspacemacs-maximized-at-startup
nil
dotspacemacs-active-transparency
70
dotspacemacs-inactive-transparency
50
dotspacemacs-mode-line-theme
&amp;#39;all-the-icons
dotspacemacs-mode-line-unicode-symbols
t
dotspacemacs-zone-out-when-idle
nil
dotspacemacs-frame-title-format
&amp;#34;%I@%S&amp;#34;
dotspacemacs-icon-title-format
nil
))
;;;; Evil
(defun dotspacemacs/init/evil ()
(setq-default
dotspacemacs-editing-style
&amp;#39;vim
dotspacemacs-colorize-cursor-according-to-state
t
dotspacemacs-remap-Y-to-y$
t
dotspacemacs-retain-visual-state-on-shift
t
dotspacemacs-visual-line-move-text
nil
dotspacemacs-ex-substitute-global
nil
dotspacemacs-enable-paste-transient-state
nil
dotspacemacs-show-transient-state-title
t
dotspacemacs-show-transient-state-color-guide
t
))
;;;; Keys
(defun dotspacemacs/init/keys ()
(setq-default
dotspacemacs-leader-key
&amp;#34;SPC&amp;#34;
dotspacemacs-emacs-command-key
&amp;#34;SPC&amp;#34;
dotspacemacs-ex-command-key
&amp;#34;:&amp;#34;
dotspacemacs-emacs-leader-key
&amp;#34;M-m&amp;#34;
dotspacemacs-major-mode-leader-key
&amp;#34;,&amp;#34;
dotspacemacs-major-mode-emacs-leader-key
&amp;#34;C-M-m&amp;#34;
dotspacemacs-which-key-delay
0.4
dotspacemacs-which-key-position
&amp;#39;bottom
dotspacemacs-distinguish-gui-tab
nil
))
;;;; Layouts
(defun dotspacemacs/init/layouts ()
(setq-default
dotspacemacs-scratch-mode
&amp;#39;org-mode
dotspacemacs-default-layout-name
&amp;#34;Default&amp;#34;
dotspacemacs-display-default-layout
t
dotspacemacs-auto-resume-layouts
t
dotspacemacs-auto-generate-layout-names
t
dotspacemacs-switch-to-buffer-prefers-purpose
nil
))
;;;; Misc
(defun dotspacemacs/init/misc ()
(setq-default
dotspacemacs-large-file-size
5
dotspacemacs-auto-save-file-location
&amp;#39;cache
dotspacemacs-max-rollback-slots
5
dotspacemacs-persistent-server
nil
dotspacemacs-helm-resize
nil
dotspacemacs-helm-no-header
nil
dotspacemacs-helm-position
&amp;#39;bottom
))
;;;; Packages
(defun dotspacemacs/init/packages ()
(setq-default
dotspacemacs-default-package-repository
nil
dotspacemacs-elpa-https
t
dotspacemacs-elpa-timeout
5
dotspacemacs-check-for-update
nil
dotspacemacs-elpa-subdirectory
nil
)
;; x/refresh-packages
)
;;;; Startup
(defun dotspacemacs/init/startup ()
(setq-default
dotspacemacs-verbose-loading
nil
dotspacemacs-startup-banner
&amp;#39;official
dotspacemacs-startup-lists
&amp;#39;(
(recents . 3)
(projects . 3)
(agenda . 3)
(todos . 3)
(bookmarks . 3)
)
dotspacemacs-startup-buffer-responsive
t
dotspacemacs-loading-progress-bar
t
))
;;; Spacemacs/User-Config
;;;; Toggles
(defun dotspacemacs/user-config/toggles ()
&amp;#34;Spacemacs toggles not intended to be put into layers.&amp;#34;
(spacemacs/toggle-highlight-long-lines-globally-on)
(spacemacs/toggle-mode-line-minor-modes-off)
(spacemacs/toggle-aggressive-indent-globally-on)
(global-highlight-parentheses-mode 1)
(golden-ratio-mode 1)
(global-company-mode 1)
(rainbow-delimiters-mode-enable)
(fringe-mode &amp;#39;(0 . 8)))
;;;; Development
(defun dotspacemacs/user-config/development ()
&amp;#34;Setting development Environment.&amp;#34;
;; Tags
(setq tags-add-tables nil)
(setq tags-file-name nil)
(setq tags-table-list
&amp;#39;(&amp;#34;~/.spacemacs.d/TAGS&amp;#34;
&amp;#34;~/workspace/wechaty-master/TAGS&amp;#34;
&amp;#34;~/workspace/cp-work-ts-vue/TAGS&amp;#34;))
;; Org
(setq spaceline-org-clock-p t)
(with-eval-after-load &amp;#39;org-agenda
(require &amp;#39;org-projectile)
(push (org-projectile-todo-files) org-agenda-files))
)
;;;; Experiments
(defun dotspacemacs/user-config/experiments ()
&amp;#34;Space for trying out configuration updates.&amp;#34;
(setq nord-comment-brightness 15)
(setq nord-uniform-mode-lines t)
(when XING-ONLY?
(load-file (os-path &amp;#34;~/.spacemacs.d/elisp/init.el&amp;#34;))
(require &amp;#39;hy-mode)
(require &amp;#39;spacemacs-hy)
(require &amp;#39;hy-personal)
))&lt;/code>&lt;/pre>
&lt;/div>
&lt;p>
To be Continued…&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>evil.org</title><link>/posts/emacs/evil/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/evil/</guid><description> Description This layer replaces evil-nerd-commenter with evil-commentary for those who prefer the behaviour of vim-commentary.
Features: Provides the original vim behaviour for commenting out lines via evil-commentary. Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add evil-commentary to the existing dotspacemacs-configuration-layers list in this file.
Key bindings Key Binding Description SPC ; comment operator gcc comment current line gcap comment paragraphs gc comment out the target of a motion gc SPC y comment up to a line with avy gy comment and yank</description><content>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer replaces &lt;a href="https://github.com/redguardtoo/evil-nerd-commenter">evil-nerd-commenter&lt;/a> with &lt;a href="https://github.com/linktohack/evil-commentary">evil-commentary&lt;/a> for those
who prefer the behaviour of &lt;a href="https://github.com/tpope/vim-commentary">vim-commentary&lt;/a>.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Provides the original vim behaviour for commenting out lines via &lt;a href="https://github.com/linktohack/evil-commentary">evil-commentary&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">evil-commentary&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Key bindings
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC ;&lt;/code>&lt;/td>
&lt;td>comment operator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gcc&lt;/code>&lt;/td>
&lt;td>comment current line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gcap&lt;/code>&lt;/td>
&lt;td>comment paragraphs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gc&lt;/code>&lt;/td>
&lt;td>comment out the target of a motion&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gc SPC y&lt;/code>&lt;/td>
&lt;td>comment up to a line with avy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>gy&lt;/code>&lt;/td>
&lt;td>comment and yank&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div></content></item><item><title>smart.org</title><link>/posts/emacs/smart/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/smart/</guid><description/><content/></item><item><title>test-easy-hugo-in-emacs.org</title><link>/posts/emacs/test-easy-hugo-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/test-easy-hugo-in-emacs/</guid><description>Tips You can type the post name as emacs/test-easy-hugo-in-emacs to put the post in subdirectory
#+srcname: easy-hugo-newpost #+begin_src emacs-lisp (defun x/smart-create-hugo-newpost-with-current-buffer (post-file) &amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34; (interactive (list (read-from-minibuffer &amp;#34;输入文件名: &amp;#34; `(,easy-hugo-default-ext . 1) nil nil nil))) (easy-hugo-with-env (let ( (filename (expand-file-name post-file easy-hugo-postdir)) ;; file to create (file-ext (file-name-extension post-file)) ;; file extention (current-buffer-file-name (buffer-file-name)) ;; buffer to copy content ) ;; Check file extention (when (not (member file-ext easy-hugo--formats)) (error &amp;#34;please enter .</description><content>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Tips
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;p>
You can type the post name as &lt;code class="verbatim">emacs/test-easy-hugo-in-emacs&lt;/code> to put the post in subdirectory&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: easy-hugo-newpost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun x/smart-create-hugo-newpost-with-current-buffer (post-file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive (&lt;span style="color:#a6e22e">list&lt;/span> (&lt;span style="color:#a6e22e">read-from-minibuffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;输入文件名: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>(&lt;span style="color:#f92672">,&lt;/span>easy-hugo-default-ext &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (easy-hugo-with-env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (filename (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> post-file easy-hugo-postdir)) &lt;span style="color:#75715e">;; file to create&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-ext (file-name-extension post-file)) &lt;span style="color:#75715e">;; file extention&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (current-buffer-file-name (&lt;span style="color:#a6e22e">buffer-file-name&lt;/span>)) &lt;span style="color:#75715e">;; buffer to copy content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check file extention&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (not (&lt;span style="color:#a6e22e">member&lt;/span> file-ext easy-hugo--formats))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#e6db74">&amp;#34;please enter .%s or .org or .%s or .rst or .mmark or .%s file name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-markdown-extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-asciidoc-extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-html-extension))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check target file exists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (&lt;span style="color:#a6e22e">file-exists-p&lt;/span> (file-truename filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#e6db74">&amp;#34;%s already exists!&amp;#34;&lt;/span> filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check if org is supported and defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (and (&lt;span style="color:#a6e22e">null&lt;/span> easy-hugo-org-header)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0.25&lt;/span> (easy-hugo--version)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">call-process&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span> &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-relative-name filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span> easy-hugo-basedir)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (progn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (or (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-markdown-extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-asciidoc-extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;rst&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;mmark&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-html-extension))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">call-process&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span> &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-relative-name filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span> easy-hugo-basedir))))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; End of check org support&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Kill temporary buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (&lt;span style="color:#a6e22e">get-buffer&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">kill-buffer&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Open the new post with filename&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (find-file filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (or easy-hugo-org-header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (and (&lt;span style="color:#a6e22e">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0.25&lt;/span> (easy-hugo--version))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;org&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Insert header&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">insert&lt;/span> (easy-hugo--org-headers (file-name-base post-file)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">goto-char&lt;/span> (&lt;span style="color:#a6e22e">point-max&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Insert contents from another buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">insert-file-contents&lt;/span> current-buffer-file-name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">goto-char&lt;/span> (&lt;span style="color:#a6e22e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (save-buffer)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div></content></item><item><title>using-auto-completion-in-emacs.org</title><link>/posts/emacs/using-auto-completion-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-auto-completion-in-emacs/</guid><description>Description This layer provides auto-completion to Spacemacs.
The following completion engines are supported:
company auto-complete Snippets are supported via yasnippet and auto-yasnippet.
This layer also configures hippie-expand.
Features: Completion with company or auto-complete Frequency-based suggestions via company-statistics Integration with yasnippets Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add auto-completion to the existing dotspacemacs-configuration-layers list in this file.
Configuration Key bindings You can customize the user experience of auto-completion with the following layer variables:</description><content>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer provides auto-completion to Spacemacs.&lt;/p>
&lt;p>
The following completion engines are supported:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://company-mode.github.io/">company&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/auto-complete/auto-complete">auto-complete&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Snippets are supported via &lt;a href="https://github.com/capitaomorte/yasnippet">yasnippet&lt;/a> and &lt;a href="https://github.com/abo-abo/auto-yasnippet">auto-yasnippet&lt;/a>.&lt;/p>
&lt;p>
This layer also configures &lt;code class="verbatim">hippie-expand&lt;/code>.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Completion with &lt;code class="verbatim">company&lt;/code> or &lt;code class="verbatim">auto-complete&lt;/code>&lt;/li>
&lt;li>Frequency-based suggestions via &lt;code class="verbatim">company-statistics&lt;/code>&lt;/li>
&lt;li>Integration with &lt;code class="verbatim">yasnippets&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">auto-completion&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Configuration
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Key bindings
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>You can customize the user experience of auto-completion with the following
layer variables:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;code class="verbatim">auto-completion-return-key-behavior&lt;/code> set the action to perform when the
&lt;code>RET&lt;/code> key is pressed, the possible values are:&lt;/p>
&lt;ul>
&lt;li>&lt;code class="verbatim">complete&lt;/code> completes with the current selection&lt;/li>
&lt;li>&lt;code class="verbatim">nil&lt;/code> does nothing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code class="verbatim">auto-completion-tab-key-behavior&lt;/code> set the action to perform when the &lt;code>TAB&lt;/code>
key is pressed, the possible values are:&lt;/p>
&lt;ul>
&lt;li>&lt;code class="verbatim">complete&lt;/code> completes with the current selection&lt;/li>
&lt;li>&lt;code class="verbatim">cycle&lt;/code> completes the common prefix and cycle between candidates&lt;/li>
&lt;li>&lt;code class="verbatim">nil&lt;/code> does nothing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code class="verbatim">auto-completion-complete-with-key-sequence&lt;/code> is a string of two characters
denoting a key sequence that will perform a &lt;code class="verbatim">complete&lt;/code> action if the sequence
as been entered quickly enough. If its value is &lt;code class="verbatim">nil&lt;/code> then the feature is
disabled.&lt;/li>
&lt;li>&lt;code class="verbatim">auto-completion-complete-with-key-sequence-delay&lt;/code> is the number of seconds
to wait for the auto-completion key sequence to be entered. The default value
is 0.1 seconds.&lt;/li>
&lt;li>&lt;code class="verbatim">auto-completion-idle-delay&lt;/code> is the number of seconds to wait before
suggesting completions. The default value is 0.2 seconds.&lt;/li>
&lt;/ol>
&lt;p>The default configuration of the layer is:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-return-key-behavior &lt;span style="color:#e6db74">&amp;#39;complete&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-tab-key-behavior &lt;span style="color:#e6db74">&amp;#39;cycle&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-complete-with-key-sequence &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-complete-with-key-sequence-delay &lt;span style="color:#ae81ff">0.1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-idle-delay &lt;span style="color:#ae81ff">0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-private-snippets-directory &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
&lt;code>jk&lt;/code> is a good candidate for &lt;code class="verbatim">auto-completion-complete-with-key-sequence&lt;/code> if
you don&amp;#39;t use it already.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-3">
&lt;h3 id="headline-7">
Snippets directories
&lt;/h3>
&lt;div id="outline-text-headline-7" class="outline-text-3">
&lt;p>The following directories are added by default:&lt;/p>
&lt;ul>
&lt;li>&lt;code class="verbatim">~/.emacs.d/elpa/yasnippet-xxxxx/snippets&lt;/code>&lt;/li>
&lt;li>&lt;code class="verbatim">~/.emacs.d/layers/auto-completion/snippets&lt;/code>&lt;/li>
&lt;li>&lt;code class="verbatim">~/.emacs.d/private/snippets&lt;/code> (conditional to the value of &lt;code class="verbatim">auto-completion-private-snippets-directory&lt;/code>)&lt;/li>
&lt;li>&lt;code class="verbatim">~/.spacemacs.d/snippets&lt;/code> (conditional to the existence of &lt;code class="verbatim">~/.spacemacs.d&lt;/code> directory)&lt;/li>
&lt;/ul>
&lt;p>You can provide additional directories by setting the variable
&lt;code class="verbatim">auto-completion-private-snippets-directory&lt;/code> which can take a string in case of
a single path or a list of paths.
If its value is &lt;code class="verbatim">nil&lt;/code> then the path &lt;code class="verbatim">~/.emacs.d/private/snippets&lt;/code> is used.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Show snippets in auto-completion popup
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;p>By default, snippets are not shown in the auto-completion popup. To show them in
the popup, set the variable &lt;code class="verbatim">auto-completion-enable-snippets-in-popup&lt;/code> to &lt;code class="verbatim">t&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-enable-snippets-in-popup &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-3">
&lt;h3 id="headline-9">
Tooltips
&lt;/h3>
&lt;div id="outline-text-headline-9" class="outline-text-3">
&lt;p>To enable automatic docstring tooltips set &lt;code class="verbatim">auto-completion-enable-help-tooltip&lt;/code>
to &lt;code class="verbatim">t&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-enable-help-tooltip &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
To enable manual non-automatic invocation of docstring tooltips, set it to
&lt;code class="verbatim">manual&lt;/code>. The tooltip can be invoked manually by pressing &lt;code>M-h&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-enable-help-tooltip &lt;span style="color:#e6db74">&amp;#39;manual&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-3">
&lt;h3 id="headline-10">
Sort results by usage
&lt;/h3>
&lt;div id="outline-text-headline-10" class="outline-text-3">
&lt;p>To enable sorting auto-completion results by their usage frequency set
&lt;code class="verbatim">auto-completion-enable-sort-by-usage&lt;/code> to &lt;code class="verbatim">t&lt;/code>.
This feature is provided by the &lt;a href="https://github.com/company-mode/company-statistics">company-statistics&lt;/a> package when &lt;code class="verbatim">company&lt;/code>
is used.
The variable has no effect when &lt;code class="verbatim">auto-complete&lt;/code> is used.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> auto-completion-enable-sort-by-usage &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-3">
&lt;h3 id="headline-11">
Enable company or auto-complete globally
&lt;/h3>
&lt;div id="outline-text-headline-11" class="outline-text-3">
&lt;p>By default Spacemacs enables auto-completion explicitly for each supported
major-mode, it means that &lt;code class="verbatim">company&lt;/code> and &lt;code class="verbatim">auto-complete&lt;/code> are not enabled
globally, it allows more flexibility to choose an auto-completion engine
for a given mode.&lt;/p>
&lt;p>
You may want to enable company globally to get auto-completion
everywhere even in the modes which are not configured by Spacemacs. To do
so, you just have to add &lt;code class="verbatim">(global-company-mode)&lt;/code> in the
&lt;code class="verbatim">dotspacemacs/user-config&lt;/code> function of your dotfile.&lt;/p>
&lt;p>
Note that if you want to enable &lt;code class="verbatim">auto-complete&lt;/code> globally you will have to
disable &lt;code class="verbatim">company&lt;/code> first, see the next section to do so.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-3">
&lt;h3 id="headline-12">
Replacing company by auto-complete
&lt;/h3>
&lt;div id="outline-text-headline-12" class="outline-text-3">
&lt;p>You can disable &lt;code class="verbatim">company&lt;/code> by adding it to the &lt;code class="verbatim">dotspacemacs-excluded-packages&lt;/code>
variable, then you are free to enable &lt;code class="verbatim">auto-complete&lt;/code> globally.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-13" class="outline-3">
&lt;h3 id="headline-13">
Add auto-completion in a layer
&lt;/h3>
&lt;div id="outline-text-headline-13" class="outline-text-3">
&lt;p>Here is an example to add &lt;code class="verbatim">company&lt;/code> auto-completion to python buffers via the
package &lt;code class="verbatim">company-anaconda&lt;/code>.&lt;/p>
&lt;p>
In the file &lt;code class="verbatim">packages.el&lt;/code> of the python layer:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Add the relevant packages to the layer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; here it is `company-anaconda&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq python-packages
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#f92672">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (company-anaconda :toggle (configuration-layer/package-used-p &lt;span style="color:#e6db74">&amp;#39;company&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">...&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (defun python/init-company-anaconda ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (use-package company-anaconda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :defer &lt;span style="color:#66d9ef">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :init
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (spacemacs|add-company-backends
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :backends company-anaconda
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> :modes python-mode)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-3">
&lt;h3 id="headline-14">
Completion back ends
&lt;/h3>
&lt;div id="outline-text-headline-14" class="outline-text-3">
&lt;p>Many spacemacs layers (e.g., python, html, haskell) configure company mode
backends to provide mode-specific completion. These modes will include
completion backends specified in the `spacemacs-default-company-backends`
variable. The defaults should work well, but you can configure this variable in
your &lt;code class="verbatim">.spacemacs&lt;/code> file with (e.g.)&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((auto-completion :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> spacemacs-default-company-backends &lt;span style="color:#f92672">&amp;#39;&lt;/span>(company-files company-capf))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-3">
&lt;h3 id="headline-15">
Improved faces
&lt;/h3>
&lt;div id="outline-text-headline-15" class="outline-text-3">
&lt;p>For nicer-looking faces, try adding the following to `custom-set-faces` in your dotspacemacs file.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(custom-set-faces
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(company-tooltip-common
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#66d9ef">t&lt;/span> (:inherit company-tooltip :weight bold :underline &lt;span style="color:#66d9ef">nil&lt;/span>))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(company-tooltip-common-selection
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ((&lt;span style="color:#66d9ef">t&lt;/span> (:inherit company-tooltip-selection :weight bold :underline &lt;span style="color:#66d9ef">nil&lt;/span>)))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-16" class="outline-2">
&lt;h2 id="headline-16">
Key Bindings
&lt;/h2>
&lt;div id="outline-text-headline-16" class="outline-text-2">
&lt;div id="outline-container-headline-17" class="outline-3">
&lt;h3 id="headline-17">
Company
&lt;/h3>
&lt;div id="outline-text-headline-17" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-d&lt;/code>&lt;/td>
&lt;td>open minibuffer with documentation of thing at point in company dropdown&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-/&lt;/code>&lt;/td>
&lt;td>show candidates in Helm (for fuzzy searching)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-M-/&lt;/code>&lt;/td>
&lt;td>filter the company dropdown menu&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M-h&lt;/code>&lt;/td>
&lt;td>show current candidate&amp;#39;s documentation in a tooltip (requires &lt;code class="verbatim">auto-completion-enable-help-tooltip&lt;/code>)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
Vim Style:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>(vim style) go down in company dropdown menu&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>(vim style) go up in company dropdown menu&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-l&lt;/code>&lt;/td>
&lt;td>(vim style) complete selection&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
Emacs style:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-n&lt;/code>&lt;/td>
&lt;td>(emacs style) go down in company dropdown menu&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-p&lt;/code>&lt;/td>
&lt;td>(emacs style) go up in company dropdown menu&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-18" class="outline-3">
&lt;h3 id="headline-18">
Auto-complete
&lt;/h3>
&lt;div id="outline-text-headline-18" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>select next candidate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>select previous candidate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TAB&lt;/code>&lt;/td>
&lt;td>expand selection or select next candidate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S-TAB&lt;/code>&lt;/td>
&lt;td>select previous candidate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>complete word, if word is already completed insert a carriage return&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-19" class="outline-3">
&lt;h3 id="headline-19">
Yasnippet
&lt;/h3>
&lt;div id="outline-text-headline-19" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>M-/&lt;/code>&lt;/td>
&lt;td>Expand a snippet if text before point is a prefix of a snippet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC i s&lt;/code>&lt;/td>
&lt;td>List all current yasnippets for inserting&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-20" class="outline-3">
&lt;h3 id="headline-20">
Auto-yasnippet
&lt;/h3>
&lt;div id="outline-text-headline-20" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC i S c&lt;/code>&lt;/td>
&lt;td>create a snippet from an active region&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC i S e&lt;/code>&lt;/td>
&lt;td>Expand the snippet just created with &lt;code>SPC i y&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC i S w&lt;/code>&lt;/td>
&lt;td>Write the snippet inside &lt;code class="verbatim">private/snippets&lt;/code> directory for future sessions&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-chinese-in-emacs.org</title><link>/posts/emacs/using-chinese-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-chinese-in-emacs/</guid><description>Description This layer adds support for traditional Chinese script to Spacemacs.
Features: Support for the Pinyin(拼音) input method via chinese-pyim. Support for the Wubi(五笔) input method via chinese-wbim. Integration of the native input method framework fcitx via cute-jumper/fcitx.el. Integration of the Youdao(有道) Dictionary via youdao-dictionary. Support for file searches in dired using Chinese Pinyin characters via find-by-pinyin-dired. Support for jumping to Chinese Pinyin characters with ace-jump-mode via ace-pinyin. Automatic visual separation of Chinese and Latin characters via coldnew/pangu-spacing.</description><content>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer adds support for traditional Chinese script to Spacemacs.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Support for the &lt;a href="https://en.wikipedia.org/wiki/Pinyin">Pinyin(拼音)&lt;/a> input method via &lt;a href="https://github.com/tumashu/chinese-pyim">chinese-pyim&lt;/a>.&lt;/li>
&lt;li>Support for the &lt;a href="https://en.wikipedia.org/wiki/Wubi_method">Wubi(五笔)&lt;/a> input method via &lt;a href="https://github.com/andyque/chinese-wbim">chinese-wbim&lt;/a>.&lt;/li>
&lt;li>Integration of the native input method framework &lt;a href="https://en.wikipedia.org/wiki/Fcitx">fcitx&lt;/a> via &lt;a href="https://github.com/cute-jumper/fcitx.el">cute-jumper/fcitx.el&lt;/a>.&lt;/li>
&lt;li>Integration of the &lt;a href="https://en.wikipedia.org/wiki/Youdao">Youdao(有道) Dictionary&lt;/a> via &lt;a href="https://github.com/xuchunyang/youdao-dictionary.el">youdao-dictionary&lt;/a>.&lt;/li>
&lt;li>Support for file searches in &lt;code class="verbatim">dired&lt;/code> using Chinese Pinyin characters via &lt;a href="https://github.com/redguardtoo/find-by-pinyin-dired">find-by-pinyin-dired&lt;/a>.&lt;/li>
&lt;li>Support for jumping to Chinese Pinyin characters with &lt;code class="verbatim">ace-jump-mode&lt;/code> via &lt;a href="https://github.com/cute-jumper/ace-pinyin">ace-pinyin&lt;/a>.&lt;/li>
&lt;li>Automatic visual separation of Chinese and Latin characters via &lt;a href="https://github.com/coldnew/pangu-spacing">coldnew/pangu-spacing&lt;/a>.&lt;/li>
&lt;li>Automatic joining of consecutive Chinese lines into a single long line without unwanted space when exporting org-mode to html.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Layer
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">chinese&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Configuration
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;div id="outline-container-headline-7" class="outline-4">
&lt;h4 id="headline-7">
Configure the Default Input Method(配置默认中文输入法)
&lt;/h4>
&lt;div id="outline-text-headline-7" class="outline-text-4">
&lt;p>The default Chinese input method is &lt;code class="verbatim">Chinese-pyim&lt;/code>, if you are a Wubi(五笔) user,
you could set the variable &lt;code class="verbatim">chinese-default-input-method&lt;/code> to &lt;code class="verbatim">wubi&lt;/code>:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (chinese :variables chinese-default-input-method &lt;span style="color:#e6db74">&amp;#39;wubi&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-4">
&lt;h4 id="headline-8">
Configure the &lt;code class="verbatim">Chinese-pyim&lt;/code> Input Method(配置中文拼音输入法)
&lt;/h4>
&lt;div id="outline-text-headline-8" class="outline-text-4">
&lt;p>The first time you use &lt;code class="verbatim">Chinese-pyim&lt;/code>, you need to install the lexicon(词库)
file. Call &lt;code class="verbatim">pyim-dicts-manager&lt;/code> to open up the settings buffer and
press &lt;code class="verbatim">i e&lt;/code> to install the default lexicon. The lexicon is about 20MB, so you
should be patient when downloading starts. After the lexicon file is downloaded,
just press &lt;code class="verbatim">s&lt;/code> to save and &lt;code class="verbatim">R&lt;/code> to restart configuration.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-4">
&lt;h4 id="headline-9">
Enable fcitx
&lt;/h4>
&lt;div id="outline-text-headline-9" class="outline-text-4">
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>((chinese :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chinese-enable-fcitx &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>If you don’t need to type Chinese in minibuffer, you can temporarily disable fcitx in the minibuffer
with the following configuration.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (fcitx-aggressive-setup)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-5">
&lt;h5 id="headline-10">
Requirement
&lt;/h5>
&lt;div id="outline-text-headline-10" class="outline-text-5">
&lt;div id="outline-container-headline-11" class="outline-6">
&lt;h6 id="headline-11">
Linux
&lt;/h6>
&lt;div id="outline-text-headline-11" class="outline-text-6">
&lt;p>You need to install &lt;code class="verbatim">fcitx&lt;/code> and &lt;code class="verbatim">fcitx-remote&lt;/code> on your machine.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-6">
&lt;h6 id="headline-12">
Mac OS X
&lt;/h6>
&lt;div id="outline-text-headline-12" class="outline-text-6">
&lt;p>We don&amp;#39;t have a &lt;code class="verbatim">fcitx&lt;/code> in OS X yet but we already added an emulation called
&lt;code class="verbatim">fcitx-remote&lt;/code> to make you happy with other Chinese input-methods.&lt;/p>
&lt;p>
You can install &lt;a href="https://github.com/CodeFalling/fcitx-remote-for-osx">fcitx-remote-for-osx&lt;/a> from homebrew.&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> brew install fcitx-remote-for-osx --with-input-method&lt;span style="color:#f92672">=&lt;/span>baidu-pinyin&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
&lt;code class="verbatim">--with-input-method=baidu-pinyin&lt;/code> means install for Baidu-pinyin Input Method.&lt;/p>
&lt;p>
You can use &lt;code class="verbatim">brew info fcitx-remote-for-osx&lt;/code> to get more options info for input
method support.&lt;/p>
&lt;pre class="example">
--with-input-method=
Select input method: baidu-pinyin(default), baidu-wubi, sogou-pinyin, qq-wubi, squirrel-rime, osx-pinyin
&lt;/pre>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-13" class="outline-6">
&lt;h6 id="headline-13">
Windows
&lt;/h6>
&lt;div id="outline-text-headline-13" class="outline-text-6">
&lt;p>In order to use &lt;code class="verbatim">fcitx.el&lt;/code> in Windows, you should install &lt;a href="https://github.com/cute-jumper/fcitx-remote-for-windows">fcitx-remote-for-windows&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-4">
&lt;h4 id="headline-14">
Enable YouDao(有道) Dictionary(激活有道字典)
&lt;/h4>
&lt;div id="outline-text-headline-14" class="outline-text-4">
&lt;p>The YouDao Dictionary is disabled by default, if you want enable it.
You should set &lt;code class="verbatim">chinese-enable-youdao-dict&lt;/code> to &lt;code class="verbatim">t&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>((chinese :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chinese-enable-youdao-dict &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-4">
&lt;h4 id="headline-15">
Set monospaced font size(设置等宽字体）
&lt;/h4>
&lt;div id="outline-text-headline-15" class="outline-text-4">
&lt;p>If you are mixing Chinese script with Latin script, the text is not perfectly
aligned in org table. That&amp;#39;s because normally the Chinese font size is not equal
to the Latin font size. You could call &lt;code class="verbatim">spacemacs//set-monospaced-font&lt;/code> with
your own Chinese font name in &lt;code class="verbatim">dotspacemacs/user-config&lt;/code> function.&lt;/p>
&lt;p>
Example configuration:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; Note: The Hiragino Sans GB is bundled with MacOS X.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; If you are not using MacOS X, you should change it to another Chinese font name.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(spacemacs//set-monospaced-font &lt;span style="color:#e6db74">&amp;#34;Source Code Pro&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hiragino Sans GB&amp;#34;&lt;/span> &lt;span style="color:#ae81ff">14&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-16" class="outline-4">
&lt;h4 id="headline-16">
Enable/Disable ace-pinyin in &lt;code class="verbatim">avy-goto-char&lt;/code>
&lt;/h4>
&lt;div id="outline-text-headline-16" class="outline-text-4">
&lt;p>You can use &lt;code class="verbatim">avy-goto-char&lt;/code> with pinyin supported by default, if you want to
disable it. You can set &lt;code class="verbatim">chinese-enable-avy-pinyin&lt;/code> to &lt;code class="verbatim">nil&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>((chinese :variables
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> chinese-enable-avy-pinyin &lt;span style="color:#66d9ef">nil&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-17" class="outline-2">
&lt;h2 id="headline-17">
Key Bindings
&lt;/h2>
&lt;div id="outline-text-headline-17" class="outline-text-2">
&lt;p>Currently, there are no built-in key bindings for this layer. You could define
your own preference.&lt;/p>
&lt;p>
Here are a few suggested key bindings (remember that &lt;code>SPC o&lt;/code> is reserved for
personal usage, spacemacs won´t put any binding under this prefix):&lt;/p>
&lt;div id="outline-container-headline-18" class="outline-3">
&lt;h3 id="headline-18">
Youdao Dictionary
&lt;/h3>
&lt;div id="outline-text-headline-18" class="outline-text-3">
&lt;p>Bind &lt;code>SPC o y&lt;/code> to &lt;code class="verbatim">youdao-dictionary-search-at-point+&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-19" class="outline-3">
&lt;h3 id="headline-19">
Find-by-pinyin-dired
&lt;/h3>
&lt;div id="outline-text-headline-19" class="outline-text-3">
&lt;p>Bind &lt;code>SPC o d&lt;/code> to &lt;code class="verbatim">find-by-pinyin-dired&lt;/code>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-chrome-in-emacs.org</title><link>/posts/emacs/using-chrome-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-chrome-in-emacs/</guid><description>Description This layer provides some integration with the Google Chrome browser.
Features: Edit text boxes with Emacs using edit-server Write markdown in Emacs and realtime show in chrome using flymd gmail message mode uses standard markdown keybindings Install Layer To use this configuration layer, add it to your ~/.spacemacs. You will need to add chrome to the existing dotspacemacs-configuration-layers list in this file.
Chrome extension edit-server is a server that responds to edit requests sent Chrome via the Google Chrome extension Edit with Emacs.</description><content>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer provides some integration with the Google Chrome browser.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Edit text boxes with Emacs using &lt;a href="https://github.com/stsquad/emacs_chrome">edit-server&lt;/a>&lt;/li>
&lt;li>Write markdown in Emacs and realtime show in chrome using &lt;a href="https://github.com/mola-T/flymd">flymd&lt;/a>&lt;/li>
&lt;li>gmail message mode uses standard markdown keybindings&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Layer
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">chrome&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Chrome extension
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>&lt;a href="https://github.com/stsquad/emacs_chrome">edit-server&lt;/a> is a server that responds to edit requests sent Chrome via the
Google Chrome extension &lt;a href="https://chrome.google.com/webstore/detail/edit-with-emacs/ljobjlafonikaiipfkggjbhkghgicgoh">Edit with Emacs&lt;/a>. You have to install this extension.&lt;/p>
&lt;p>
More information can be found on &lt;a href="http://www.emacswiki.org/emacs/Edit_with_Emacs">Emacs Wiki&lt;/a>.&lt;/p>
&lt;p>
The edit server is configured to start automatically when Spacemacs starts.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-2">
&lt;h2 id="headline-7">
Configuration
&lt;/h2>
&lt;div id="outline-text-headline-7" class="outline-text-2">
&lt;p>Use &lt;code class="verbatim">edit-server-url-major-mode-alist&lt;/code> to choose a major mode initialization
function based on &lt;code class="verbatim">edit-server-url&lt;/code>, or fall back to
&lt;code class="verbatim">edit-server-default-major-mode&lt;/code> that has a current value of &lt;code class="verbatim">markdown-mode&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (defun dotspacemacs/user-config ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Open github text areas as org buffers&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; currently they are opened as markdown&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq edit-server-url-major-mode-alist
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((&lt;span style="color:#e6db74">&amp;#34;github\\.com&amp;#34;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> org-mode))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
To change frame defaults (width, height, etc. use &lt;code class="verbatim">edit-server-new-frame-alist&lt;/code>)&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (add-to-list &lt;span style="color:#e6db74">&amp;#39;edit-server-new-frame-alist&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(width &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#ae81ff">140&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (add-to-list &lt;span style="color:#e6db74">&amp;#39;edit-server-new-frame-alist&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(height &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you want Emacs to switch focus to Chrome after done editing, you can utilize
&lt;code class="verbatim">edit-server-done-hook&lt;/code>.&lt;/p>
&lt;p>
Emacs cannot control focus of windows for external apps, so you need to use some
sort of command line window manager like &lt;code class="verbatim">wmctrl&lt;/code>.&lt;/p>
&lt;p>
The following example works on OS X:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (add-hook &lt;span style="color:#e6db74">&amp;#39;edit-server-done-hook&lt;/span> (lambda () (shell-command &lt;span style="color:#e6db74">&amp;#34;open -a \&amp;#34;Google Chrome\&amp;#34;&amp;#34;&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-2">
&lt;h2 id="headline-8">
Key bindings
&lt;/h2>
&lt;div id="outline-text-headline-8" class="outline-text-2">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC a F&lt;/code>&lt;/td>
&lt;td>flymd-flyit&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
&lt;strong>Note:&lt;/strong> You need to kill all google chrome process before using &lt;code class="verbatim">flymd-flyit&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div></content></item><item><title>using-clojure-in-emacs.org</title><link>/posts/emacs/using-clojure-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-clojure-in-emacs/</guid><description>Clojure layer Table of Contents Clojure layer
Description
Features: Install
Layer Pretty Symbols CIDER and clj-refactor
Quick Start with boot Quick Start with lein More details Usage
Cheatsheet Structuraly safe editing Key Bindings
Working with clojure files (barfage, slurpage &amp;amp; more) Leader
Documentation Evaluation Goto REPL Tests Toggles Debugging Refactoring Reformatting CIDER Buffers
stacktrace-mode inspector-mode test-report-mode Sayid Buffers
sayid-mode sayid-traced-mode sayid-pprint cider-repl-mode Development Notes
Indentation Description This layer adds support for Clojure language using CIDER.</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Clojure layer
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
Table of Contents
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="#clojure-layer">Clojure layer&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="#description">Description&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#features">Features:&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#install">Install&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#layer">Layer&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pretty-symbols">Pretty Symbols&lt;/a>&lt;/li>
&lt;li>
&lt;p>&lt;a href="#cider-and-clj-refactor">CIDER and clj-refactor&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#quick-start-with-boot">Quick Start with boot&lt;/a>&lt;/li>
&lt;li>&lt;a href="#quick-start-with-lein">Quick Start with lein&lt;/a>&lt;/li>
&lt;li>&lt;a href="#more-details">More details&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#usage">Usage&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#cheatsheet">Cheatsheet&lt;/a>&lt;/li>
&lt;li>&lt;a href="#structuraly-safe-editing">Structuraly safe editing&lt;/a>&lt;/li>
&lt;li>
&lt;p>&lt;a href="#key-bindings">Key Bindings&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#working-with-clojure-files-barfage-slurpage--more">Working with clojure files (barfage, slurpage &amp;amp; more)&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#leader">Leader&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#documentation">Documentation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#evaluation">Evaluation&lt;/a>&lt;/li>
&lt;li>&lt;a href="#goto">Goto&lt;/a>&lt;/li>
&lt;li>&lt;a href="#repl">REPL&lt;/a>&lt;/li>
&lt;li>&lt;a href="#tests">Tests&lt;/a>&lt;/li>
&lt;li>&lt;a href="#toggles">Toggles&lt;/a>&lt;/li>
&lt;li>&lt;a href="#debugging">Debugging&lt;/a>&lt;/li>
&lt;li>&lt;a href="#refactoring">Refactoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#reformatting">Reformatting&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#cider-buffers">CIDER Buffers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#stacktrace-mode">stacktrace-mode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#inspector-mode">inspector-mode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#test-report-mode">test-report-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#sayid-buffers">Sayid Buffers&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#sayid-mode">sayid-mode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sayid-traced-mode">sayid-traced-mode&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sayid-pprint">sayid-pprint&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cider-repl-mode">cider-repl-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#development-notes">Development Notes&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#indentation">Indentation&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Description
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;p>This layer adds support for &lt;a href="https://clojure.org/">Clojure&lt;/a> language using &lt;a href="https://github.com/clojure-emacs/cider">CIDER&lt;/a>.&lt;/p>
&lt;div id="outline-container-headline-4" class="outline-4">
&lt;h4 id="headline-4">
Features:
&lt;/h4>
&lt;div id="outline-text-headline-4" class="outline-text-4">
&lt;ul>
&lt;li>REPL via &lt;a href="https://github.com/clojure-emacs/cider">CIDER&lt;/a>&lt;/li>
&lt;li>Code formatting via &lt;a href="https://github.com/clojure-emacs/cider">CIDER&lt;/a> using &lt;a href="https://github.com/weavejester/cljfmt">Cljfmt&lt;/a>&lt;/li>
&lt;li>Refactoring via &lt;a href="https://github.com/clojure-emacs/clj-refactor.el">clj-refactor&lt;/a>&lt;/li>
&lt;li>Aligning of code forms via &lt;a href="https://github.com/clojure-emacs/clojure-mode">clojure-mode&lt;/a>&lt;/li>
&lt;li>Debugging with &lt;a href="https://bpiel.github.io/sayid/">sayid&lt;/a>&lt;/li>
&lt;li>Clojure cheatsheet&lt;/li>
&lt;li>Structuraly safe editing using optional &lt;a href="https://github.com/luxbock/evil-cleverparens">evil-cleverparens&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Install
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;div id="outline-container-headline-6" class="outline-4">
&lt;h4 id="headline-6">
Layer
&lt;/h4>
&lt;div id="outline-text-headline-6" class="outline-text-4">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">clojure&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-4">
&lt;h4 id="headline-7">
Pretty Symbols
&lt;/h4>
&lt;div id="outline-text-headline-7" class="outline-text-4">
&lt;p>Pretty symbols for anonymous functions, set literals and partial, like &lt;code class="verbatim">(λ [a]
(+ a 5))&lt;/code>, &lt;code class="verbatim">ƒ(+ % 5)&lt;/code>, &lt;code class="verbatim">∈{2 4 6}&lt;/code> and &lt;code class="verbatim">Ƥ&lt;/code>.&lt;/p>
&lt;p>
To enable this feature, add the following snippet to the
&lt;code class="verbatim">dotspacemacs/user-config&lt;/code> section of your &lt;code class="verbatim">~/.spacemacs&lt;/code> file:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq clojure-enable-fancify-symbols &lt;span style="color:#66d9ef">t&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Or set this variable when loading the configuration layer:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((clojure :variables clojure-enable-fancify-symbols &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-4">
&lt;h4 id="headline-8">
CIDER and clj-refactor
&lt;/h4>
&lt;div id="outline-text-headline-8" class="outline-text-4">
&lt;p>Note that recent versions of CIDER automatically inject the required
dependencies into your boot or leiningen configuration when you connect to the
REPL. Thus, the configuration instructions below only apply to CIDER 0.10 and
older. Most users should be able to just run &lt;code>SPC m s i&lt;/code> to connect to the CIDER
REPL and skip the rest of this section.&lt;/p>
&lt;div id="outline-container-headline-9" class="outline-5">
&lt;h5 id="headline-9">
Quick Start with boot
&lt;/h5>
&lt;div id="outline-text-headline-9" class="outline-text-5">
&lt;ul>
&lt;li>Install &lt;code class="verbatim">boot&lt;/code> (see &lt;a href="https://github.com/boot-clj/boot#user-content-install)">https://github.com/boot-clj/boot#user-content-install)&lt;/a>&lt;/li>
&lt;li>Create a file &lt;code class="verbatim">~/.boot/profile.boot&lt;/code> with the following content:&lt;/li>
&lt;/ul>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">require&lt;/span> &lt;span style="color:#e6db74">&amp;#39;boot.repl&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">swap!&lt;/span> boot.repl/*default-dependencies* conj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[refactor-nrepl &lt;span style="color:#e6db74">&amp;#34;1.2.0-SNAPSHOT&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>[cider/cider-nrepl &lt;span style="color:#e6db74">&amp;#34;0.10.0-SNAPSHOT&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">swap!&lt;/span> boot.repl/*default-middleware* conj
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;refactor-nrepl.middleware/wrap-refactor&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>Run &lt;code>SPC m s i&lt;/code> in any of the clojure source files to connect to the CIDER
REPL. Note that a build.boot file must be present in your working directory
for Cider to recognize the presence of boot.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-5">
&lt;h5 id="headline-10">
Quick Start with lein
&lt;/h5>
&lt;div id="outline-text-headline-10" class="outline-text-5">
&lt;ul>
&lt;li>Install &lt;code class="verbatim">lein&lt;/code> version 2.5.2 or newer (see &lt;a href="https://leiningen.org/#install)">https://leiningen.org/#install)&lt;/a>&lt;/li>
&lt;li>Create a file &lt;code class="verbatim">~/.lein/profiles.clj&lt;/code> with the following content:&lt;/li>
&lt;/ul>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-clojure" data-lang="clojure">&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:repl&lt;/span> {&lt;span style="color:#e6db74">:plugins&lt;/span> [[cider/cider-nrepl &lt;span style="color:#e6db74">&amp;#34;0.10.0-SNAPSHOT&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [refactor-nrepl &lt;span style="color:#e6db74">&amp;#34;2.0.0-SNAPSHOT&amp;#34;&lt;/span>]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:dependencies&lt;/span> [[alembic &lt;span style="color:#e6db74">&amp;#34;0.3.2&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [org.clojure/tools.nrepl &lt;span style="color:#e6db74">&amp;#34;0.2.12&amp;#34;&lt;/span>]]}}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;ul>
&lt;li>After creating your project with &lt;code>lein new app &amp;lt;projectname&amp;gt;&lt;/code> or
importing an existing project, run &lt;code>SPC m s i&lt;/code> in any of the clojure
source files to connect to the CIDER REPL.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-5">
&lt;h5 id="headline-11">
More details
&lt;/h5>
&lt;div id="outline-text-headline-11" class="outline-text-5">
&lt;p>More info regarding installation of nREPL middleware can be found here:&lt;/p>
&lt;ul>
&lt;li>CIDER: &lt;a href="https://github.com/clojure-emacs/cider#installation">cider_install&lt;/a>&lt;/li>
&lt;li>clj-refactor: &lt;a href="https://github.com/clojure-emacs/refactor-nrepl">refactor-nrepl&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-3">
&lt;h3 id="headline-12">
Usage
&lt;/h3>
&lt;div id="outline-text-headline-12" class="outline-text-3">
&lt;div id="outline-container-headline-13" class="outline-4">
&lt;h4 id="headline-13">
Cheatsheet
&lt;/h4>
&lt;div id="outline-text-headline-13" class="outline-text-4">
&lt;p>This layers installs the &lt;a href="https://github.com/clojure-emacs/clojure-cheatsheet">clojure-cheathseet&lt;/a> package which embeds this useful
&lt;a href="https://clojure.org/api/cheatsheet">cheatsheet&lt;/a> into Emacs.&lt;/p>
&lt;p>
Type &lt;code>SPC m h c&lt;/code> to display the cheatsheet then type in some terms (space
separated) to narrow down the list. For example, try typing in sort map to see
some functions that deal with sorting maps.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-4">
&lt;h4 id="headline-14">
Structuraly safe editing
&lt;/h4>
&lt;div id="outline-text-headline-14" class="outline-text-4">
&lt;p>This layer adds support for &lt;code class="verbatim">evil-cleverparens&lt;/code> which allows to safely edit
lisp code by keeping the s-expressions balanced.&lt;/p>
&lt;p>
By default this mode is not activated. You can turn it on locally on the active
buffer with &lt;code>SPC m T s&lt;/code> (&lt;code class="verbatim">s&lt;/code> for safe).&lt;/p>
&lt;p>
To turn it on automatically for all &lt;code class="verbatim">clojure&lt;/code> buffers call the following
function in your &lt;code class="verbatim">dotspacemacs/user-config&lt;/code> function:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
or to enable it for all supported modes:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
When enabled the symbol &lt;code class="verbatim">🆂&lt;/code> should be displayed in the mode-line.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-4">
&lt;h4 id="headline-15">
Key Bindings
&lt;/h4>
&lt;div id="outline-text-headline-15" class="outline-text-4">
&lt;div id="outline-container-headline-16" class="outline-5">
&lt;h5 id="headline-16">
Working with clojure files (barfage, slurpage &amp;amp; more)
&lt;/h5>
&lt;div id="outline-text-headline-16" class="outline-text-5">
&lt;p>Spacemacs comes with a special &lt;code class="verbatim">lisp-state&lt;/code> for working with lisp code that
supports slurpage, barfage and more tools you&amp;#39;ll likely want when working with
lisp.&lt;/p>
&lt;p>
As this state works the same for all files, the documentation is in global
&lt;a href="https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.org#lisp-key-bindings">DOCUMENTATION.org&lt;/a>. In general, use &lt;code>SPC k&lt;/code> to interact with the lisp-state.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-17" class="outline-3">
&lt;h3 id="headline-17">
Leader
&lt;/h3>
&lt;div id="outline-text-headline-17" class="outline-text-3">
&lt;div id="outline-container-headline-18" class="outline-4">
&lt;h4 id="headline-18">
Documentation
&lt;/h4>
&lt;div id="outline-text-headline-18" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m h a&lt;/code>&lt;/td>
&lt;td>cider apropos&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h c&lt;/code>&lt;/td>
&lt;td>clojure cheatsheet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h g&lt;/code>&lt;/td>
&lt;td>cider grimoire&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h h&lt;/code>&lt;/td>
&lt;td>cider doc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h j&lt;/code>&lt;/td>
&lt;td>cider javadoc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h n&lt;/code>&lt;/td>
&lt;td>cider browse ns&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-19" class="outline-4">
&lt;h4 id="headline-19">
Evaluation
&lt;/h4>
&lt;div id="outline-text-headline-19" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m e ;&lt;/code>&lt;/td>
&lt;td>eval sexp and show result as comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e b&lt;/code>&lt;/td>
&lt;td>eval buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e e&lt;/code>&lt;/td>
&lt;td>eval last sexp&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e f&lt;/code>&lt;/td>
&lt;td>eval function at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e r&lt;/code>&lt;/td>
&lt;td>eval region&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e m&lt;/code>&lt;/td>
&lt;td>cider macroexpand 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e M&lt;/code>&lt;/td>
&lt;td>cider macroexpand all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e p&lt;/code>&lt;/td>
&lt;td>print last sexp (clojure interaction mode only)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e P&lt;/code>&lt;/td>
&lt;td>eval last sexp and pretty print result in separate buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e w&lt;/code>&lt;/td>
&lt;td>eval last sexp and replace with result&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-20" class="outline-4">
&lt;h4 id="headline-20">
Goto
&lt;/h4>
&lt;div id="outline-text-headline-20" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m g b&lt;/code>&lt;/td>
&lt;td>go back&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g C&lt;/code>&lt;/td>
&lt;td>browse classpath&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>goto var&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g e&lt;/code>&lt;/td>
&lt;td>goto error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g r&lt;/code>&lt;/td>
&lt;td>goto resource&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g n&lt;/code>&lt;/td>
&lt;td>browse namespaces&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g N&lt;/code>&lt;/td>
&lt;td>browse all namespaces&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-21" class="outline-4">
&lt;h4 id="headline-21">
REPL
&lt;/h4>
&lt;div id="outline-text-headline-21" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m ,&lt;/code>&lt;/td>
&lt;td>handle shortcut (cider-repl-handle-shortcut)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>send and eval buffer in REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s B&lt;/code>&lt;/td>
&lt;td>send and eval buffer and switch to REPL in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s c&lt;/code>&lt;/td>
&lt;td>connect to REPL (cider-connect) or clear repl buffer (cider-repl-clear-buffer)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s C&lt;/code>&lt;/td>
&lt;td>clear REPL (cider-find-and-clear-repl-output)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s e&lt;/code>&lt;/td>
&lt;td>send and eval last sexp in REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s E&lt;/code>&lt;/td>
&lt;td>send and eval last sexp and switch to REPL in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s f&lt;/code>&lt;/td>
&lt;td>send and eval function in REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s F&lt;/code>&lt;/td>
&lt;td>send and eval function and switch to REPL in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s i&lt;/code>&lt;/td>
&lt;td>start REPL (cider-jack-in)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s I&lt;/code>&lt;/td>
&lt;td>start clojurescript REPL (cider-jack-in-clojurescript)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s n&lt;/code>&lt;/td>
&lt;td>send and eval ns form in REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s N&lt;/code>&lt;/td>
&lt;td>send and eval ns form and switch to REPL in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s q&lt;/code>&lt;/td>
&lt;td>kill REPL (cider-quit)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s o&lt;/code>&lt;/td>
&lt;td>switch to other repl instance (cider-repl-switch-to-other)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>send and eval region in REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s R&lt;/code>&lt;/td>
&lt;td>send and eval region and switch to REPL in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s s&lt;/code>&lt;/td>
&lt;td>switch to REPL or jump to last file or last clj buffer from repl (cider-repl)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s x&lt;/code>&lt;/td>
&lt;td>refresh REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s X&lt;/code>&lt;/td>
&lt;td>restart REPL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-22" class="outline-4">
&lt;h4 id="headline-22">
Tests
&lt;/h4>
&lt;div id="outline-text-headline-22" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t a&lt;/code>&lt;/td>
&lt;td>run all tests in namespace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t r&lt;/code>&lt;/td>
&lt;td>re-run test failures for namespace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>run test at point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-23" class="outline-4">
&lt;h4 id="headline-23">
Toggles
&lt;/h4>
&lt;div id="outline-text-headline-23" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m T e&lt;/code>&lt;/td>
&lt;td>toggle englighten mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m T f&lt;/code>&lt;/td>
&lt;td>toggle REPL font-locking&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m T e&lt;/code>&lt;/td>
&lt;td>toggle cider-enlighten-mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m T p&lt;/code>&lt;/td>
&lt;td>toggle REPL pretty-printing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m T i&lt;/code>&lt;/td>
&lt;td>toggle indentation style&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m T t&lt;/code>&lt;/td>
&lt;td>toggle auto test mode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-24" class="outline-4">
&lt;h4 id="headline-24">
Debugging
&lt;/h4>
&lt;div id="outline-text-headline-24" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m d b&lt;/code>&lt;/td>
&lt;td>instrument expression at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d e&lt;/code>&lt;/td>
&lt;td>display last stacktrace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d r&lt;/code>&lt;/td>
&lt;td>reload namespaces&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d v&lt;/code>&lt;/td>
&lt;td>inspect expression at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d i&lt;/code>&lt;/td>
&lt;td>inspect expression at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d f&lt;/code>&lt;/td>
&lt;td>query form at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d w&lt;/code>&lt;/td>
&lt;td>open sayid workspace window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d E&lt;/code>&lt;/td>
&lt;td>one time display of value at cursor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d !&lt;/code>&lt;/td>
&lt;td>reload traces and clear sayid workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d c&lt;/code>&lt;/td>
&lt;td>clear workspace trace log&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d x&lt;/code>&lt;/td>
&lt;td>clear workspace traces and log&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d s&lt;/code>&lt;/td>
&lt;td>show what is currently traced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d S&lt;/code>&lt;/td>
&lt;td>show what is currently traced in current namespace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d V&lt;/code>&lt;/td>
&lt;td>set the view&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d h&lt;/code>&lt;/td>
&lt;td>show sayid help (keybindings may not be accurate)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t y&lt;/code>&lt;/td>
&lt;td>recursively trace every namespace in given dir&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t p&lt;/code>&lt;/td>
&lt;td>trace namespaces by regex&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t b&lt;/code>&lt;/td>
&lt;td>trace current file&amp;#39;s namespace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t e&lt;/code>&lt;/td>
&lt;td>enable existing trace on current function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t E&lt;/code>&lt;/td>
&lt;td>enable existing trace on all functions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t d&lt;/code>&lt;/td>
&lt;td>disable existing trace on current function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t D&lt;/code>&lt;/td>
&lt;td>disable existing trace on all functions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t n&lt;/code>&lt;/td>
&lt;td>create inner trace on function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t o&lt;/code>&lt;/td>
&lt;td>create outer trace on function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t r&lt;/code>&lt;/td>
&lt;td>remove trace on function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t K&lt;/code>&lt;/td>
&lt;td>remove all traces&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-25" class="outline-4">
&lt;h4 id="headline-25">
Refactoring
&lt;/h4>
&lt;div id="outline-text-headline-25" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r ?&lt;/code>&lt;/td>
&lt;td>describe refactoring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a d&lt;/code>&lt;/td>
&lt;td>add declaration&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a i&lt;/code>&lt;/td>
&lt;td>add import to ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a m&lt;/code>&lt;/td>
&lt;td>add missing libspec&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a p&lt;/code>&lt;/td>
&lt;td>add project dependency&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a r&lt;/code>&lt;/td>
&lt;td>add require to ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a u&lt;/code>&lt;/td>
&lt;td>add use to ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c (&lt;/code>&lt;/td>
&lt;td>convert coll to list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c &amp;#39;&lt;/code>&lt;/td>
&lt;td>convert coll to quoted list&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c {&lt;/code>&lt;/td>
&lt;td>convert coll to map&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c #&lt;/code>&lt;/td>
&lt;td>convert coll to set&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c [&lt;/code>&lt;/td>
&lt;td>convert coll to vector&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c :&lt;/code>&lt;/td>
&lt;td>toggle between keyword and string&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c i&lt;/code>&lt;/td>
&lt;td>cycle if&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c n&lt;/code>&lt;/td>
&lt;td>clean ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c p&lt;/code>&lt;/td>
&lt;td>cycle privacy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r d k&lt;/code>&lt;/td>
&lt;td>destructure keys&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e c&lt;/code>&lt;/td>
&lt;td>extract constant&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e d&lt;/code>&lt;/td>
&lt;td>extract definition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e f&lt;/code>&lt;/td>
&lt;td>extract function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e l&lt;/code>&lt;/td>
&lt;td>expand let&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r f u&lt;/code>&lt;/td>
&lt;td>find usages&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r f e&lt;/code>&lt;/td>
&lt;td>create fn from example&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r h d&lt;/code>&lt;/td>
&lt;td>hotload dependency&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i l&lt;/code>&lt;/td>
&lt;td>introduce let&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i s&lt;/code>&lt;/td>
&lt;td>inline symbol&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r m f&lt;/code>&lt;/td>
&lt;td>move form&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r m l&lt;/code>&lt;/td>
&lt;td>move to let&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r p c&lt;/code>&lt;/td>
&lt;td>project clean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r p f&lt;/code>&lt;/td>
&lt;td>promote function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r d&lt;/code>&lt;/td>
&lt;td>remove debug fns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r f&lt;/code>&lt;/td>
&lt;td>rename file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r l&lt;/code>&lt;/td>
&lt;td>remove let&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r r&lt;/code>&lt;/td>
&lt;td>remove unused requires&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r s&lt;/code>&lt;/td>
&lt;td>rename symbol&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r u&lt;/code>&lt;/td>
&lt;td>replace use&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r s n&lt;/code>&lt;/td>
&lt;td>sort ns&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r s p&lt;/code>&lt;/td>
&lt;td>sort project dependencies&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r s r&lt;/code>&lt;/td>
&lt;td>stop referring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r s c&lt;/code>&lt;/td>
&lt;td>show changelog&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r t f&lt;/code>&lt;/td>
&lt;td>thread first all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r t h&lt;/code>&lt;/td>
&lt;td>thread&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r t l&lt;/code>&lt;/td>
&lt;td>thread last all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r u a&lt;/code>&lt;/td>
&lt;td>unwind all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r u p&lt;/code>&lt;/td>
&lt;td>update project dependencies&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r u w&lt;/code>&lt;/td>
&lt;td>unwind&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-26" class="outline-4">
&lt;h4 id="headline-26">
Reformatting
&lt;/h4>
&lt;div id="outline-text-headline-26" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m f l&lt;/code>&lt;/td>
&lt;td>realign current form&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f b&lt;/code> or &lt;code>SPC m =&lt;/code>&lt;/td>
&lt;td>reformat current buffer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-27" class="outline-3">
&lt;h3 id="headline-27">
CIDER Buffers
&lt;/h3>
&lt;div id="outline-text-headline-27" class="outline-text-3">
&lt;p>In general, &lt;code>q&lt;/code> should always quit the popped up buffer.&lt;/p>
&lt;div id="outline-container-headline-28" class="outline-4">
&lt;h4 id="headline-28">
stacktrace-mode
&lt;/h4>
&lt;div id="outline-text-headline-28" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>next cause&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>previous cause&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TAB&lt;/code>&lt;/td>
&lt;td>cycle current cause&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>0&lt;/code>&lt;/td>
&lt;td>cycle all causes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>1&lt;/code>&lt;/td>
&lt;td>cycle cause 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>2&lt;/code>&lt;/td>
&lt;td>cycle cause 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>3&lt;/code>&lt;/td>
&lt;td>cycle cause 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>4&lt;/code>&lt;/td>
&lt;td>cycle cause 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>5&lt;/code>&lt;/td>
&lt;td>cycle cause 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a&lt;/code>&lt;/td>
&lt;td>toggle all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c&lt;/code>&lt;/td>
&lt;td>toggle clj&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d&lt;/code>&lt;/td>
&lt;td>toggle duplicates&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>J&lt;/code>&lt;/td>
&lt;td>toggle java&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&lt;/code>&lt;/td>
&lt;td>toggle repl&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;td>toggle tooling&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-29" class="outline-4">
&lt;h4 id="headline-29">
inspector-mode
&lt;/h4>
&lt;div id="outline-text-headline-29" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>TAB&lt;/code>&lt;/td>
&lt;td>next inspectable object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Shift-TAB&lt;/code>&lt;/td>
&lt;td>previous inspectable object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>inspect object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>L&lt;/code>&lt;/td>
&lt;td>pop to the parent object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>n&lt;/code>&lt;/td>
&lt;td>next page in paginated view&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>N&lt;/code>&lt;/td>
&lt;td>previous page in paginated view&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&lt;/code>&lt;/td>
&lt;td>refresh&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s&lt;/code>&lt;/td>
&lt;td>set a new page size&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-30" class="outline-4">
&lt;h4 id="headline-30">
test-report-mode
&lt;/h4>
&lt;div id="outline-text-headline-30" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>next result&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>previous result&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>jump to test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d&lt;/code>&lt;/td>
&lt;td>ediff test result&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e&lt;/code>&lt;/td>
&lt;td>show stacktrace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&lt;/code>&lt;/td>
&lt;td>rerun failed tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>t&lt;/code>&lt;/td>
&lt;td>run test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;td>run tests&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-31" class="outline-3">
&lt;h3 id="headline-31">
Sayid Buffers
&lt;/h3>
&lt;div id="outline-text-headline-31" class="outline-text-3">
&lt;div id="outline-container-headline-32" class="outline-4">
&lt;h4 id="headline-32">
sayid-mode
&lt;/h4>
&lt;div id="outline-text-headline-32" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>enter&lt;/code>&lt;/td>
&lt;td>pop to function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d&lt;/code>&lt;/td>
&lt;td>def value to $s/*&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f&lt;/code>&lt;/td>
&lt;td>query for calls to function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>F&lt;/code>&lt;/td>
&lt;td>query to calls to function with modifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i&lt;/code>&lt;/td>
&lt;td>show only this instance&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>I&lt;/code>&lt;/td>
&lt;td>show only this instance with modifier&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w&lt;/code>&lt;/td>
&lt;td>show full workspace trace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>n&lt;/code>&lt;/td>
&lt;td>jump to next call&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>N&lt;/code>&lt;/td>
&lt;td>jump to previous call&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>P&lt;/code>&lt;/td>
&lt;td>pretty print value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C&lt;/code>&lt;/td>
&lt;td>clear workspace trace log&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>L&lt;/code> or &lt;code>Backspace&lt;/code>&lt;/td>
&lt;td>previous buffer state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Shift-Backspace&lt;/code>&lt;/td>
&lt;td>forward buffer state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e&lt;/code>&lt;/td>
&lt;td>generate instance expression and put in kill ring&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>H&lt;/code>&lt;/td>
&lt;td>display help (keybindings may not be accurate)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-s v&lt;/code>&lt;/td>
&lt;td>toggle view&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-s V&lt;/code>&lt;/td>
&lt;td>set view&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-33" class="outline-4">
&lt;h4 id="headline-33">
sayid-traced-mode
&lt;/h4>
&lt;div id="outline-text-headline-33" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>enter&lt;/code>&lt;/td>
&lt;td>drill into ns at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e&lt;/code>&lt;/td>
&lt;td>enable trace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d&lt;/code>&lt;/td>
&lt;td>disable trace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>E&lt;/code>&lt;/td>
&lt;td>enable all traces&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>D&lt;/code>&lt;/td>
&lt;td>disable all traces&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i&lt;/code>&lt;/td>
&lt;td>apply inner trace to function at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>o&lt;/code>&lt;/td>
&lt;td>apply outer trace to function at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&lt;/code>&lt;/td>
&lt;td>remove trace at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>backspace&lt;/code>&lt;/td>
&lt;td>go back to trace overview&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>h&lt;/code>&lt;/td>
&lt;td>display help (keybindings may not be accurate)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-34" class="outline-4">
&lt;h4 id="headline-34">
sayid-pprint
&lt;/h4>
&lt;div id="outline-text-headline-34" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>enter&lt;/code>&lt;/td>
&lt;td>show path in minibuffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i&lt;/code>&lt;/td>
&lt;td>enter child node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>o&lt;/code>&lt;/td>
&lt;td>enter parent node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>n&lt;/code>&lt;/td>
&lt;td>enter next sibling node&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p&lt;/code>&lt;/td>
&lt;td>enter previous sibling node&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-35" class="outline-4">
&lt;h4 id="headline-35">
cider-repl-mode
&lt;/h4>
&lt;div id="outline-text-headline-35" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>next input&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>previous input&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-36" class="outline-3">
&lt;h3 id="headline-36">
Development Notes
&lt;/h3>
&lt;div id="outline-text-headline-36" class="outline-text-3">
&lt;div id="outline-container-headline-37" class="outline-4">
&lt;h4 id="headline-37">
Indentation
&lt;/h4>
&lt;div id="outline-text-headline-37" class="outline-text-4">
&lt;p>With a &lt;a href="https://github.com/clojure-emacs/cider/blob/master/doc/indent_spec.md">new&lt;/a> functionality of Cider to read the custom indentation rules from the
var&amp;#39;s metadata, it is better for consistency reasons to not add the custom
indentation rules to Spacemacs, but to add them to the metadata of those
specific vars.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-dotemacs-in-emacs.org</title><link>/posts/emacs/using-dotemacs-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-dotemacs-in-emacs/</guid><description>Day 1 1. Using the manual to find emacs configuration convention Keybings is Ctrl h ? for further options Keybings is Ctrl h r for reading the manual #+begin_src emacs-lisp :tangle yes (info-manual ARG) ;; C-h r runs the command info-manual (found in global-map), which is an ;; interactive Lisp function in ‘info+.el’. ;; ;; It is bound to C-h r, &amp;lt;f1&amp;gt; r, &amp;lt;help&amp;gt; r, &amp;lt;menu-bar&amp;gt; &amp;lt;help-menu&amp;gt; &amp;lt;emacs-manual&amp;gt;. ;; ;; ;; Display a manual in Info mode - by default, the Emacs manual.</description><content>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Day 1
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;div id="outline-container-headline-2" class="outline-4">
&lt;h4 id="headline-2">
1. Using the manual to find emacs configuration convention
&lt;/h4>
&lt;div id="outline-text-headline-2" class="outline-text-4">
&lt;ol>
&lt;li>Keybings is &lt;code class="verbatim">Ctrl h ?&lt;/code> for further options&lt;/li>
&lt;li>Keybings is &lt;code class="verbatim">Ctrl h r&lt;/code> for reading the manual&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp :tangle yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(info-manual ARG)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; C-h r runs the command info-manual (found in global-map), which is an&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; interactive Lisp function in ‘info+.el’.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; It is bound to C-h r, &amp;lt;f1&amp;gt; r, &amp;lt;help&amp;gt; r, &amp;lt;menu-bar&amp;gt; &amp;lt;help-menu&amp;gt; &amp;lt;emacs-manual&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; Display a manual in Info mode - by default, the Emacs manual.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; With a prefix arg, prompt for the manual name.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; With a numeric prefix arg, only currently visited manuals are&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;; candidates.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;ol>
&lt;li>Navigating to &lt;code class="verbatim">emacs-lisp Intro&lt;/code> section&lt;/li>
&lt;li>Find the &lt;code class="verbatim">16.3&lt;/code> chapter &lt;code class="verbatim">Beginning a dotemacs File&lt;/code>&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-4">
&lt;h4 id="headline-3">
2. Beginning a dotemacs file
&lt;/h4>
&lt;div id="outline-text-headline-3" class="outline-text-4">
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;;;; The Help Key&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; Control-h is the help key;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; after typing control-h, type a letter to&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; indicate the subject about which you want help.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; For an explanation of the help facility,&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; type control-h two times in a row.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; To find out about any mode, type control-h m&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; while in that mode. For example, to find out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; about mail mode, enter mail mode and then type&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">; control-h m.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-4">
&lt;h4 id="headline-4">
3. Load Path
&lt;/h4>
&lt;div id="outline-text-headline-4" class="outline-text-4">
&lt;p>
If you load many extensions, as I do, then instead of specifying the
exact location of the extension file, as shown above, you can specify
that directory as part of Emacs’s ‘load-path’. Then, when Emacs loads a
file, it will search that directory as well as its default list of
directories. (The default list is specified in ‘paths.h’ when Emacs is
built.)&lt;/p>
&lt;p>
The following command adds your ‘~/emacs’ directory to the existing
load path:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;;; Emacs Load Path&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq load-path (&lt;span style="color:#a6e22e">cons&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~/emacs&amp;#34;&lt;/span> load-path))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-4">
&lt;h4 id="headline-5">
4. Load file
&lt;/h4>
&lt;div id="outline-text-headline-5" class="outline-text-4">
&lt;p>
You can use a ‘load’ command to evaluate a complete file and thereby
install all the functions and variables in the file into Emacs. For
example:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: load-file
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">load&lt;/span> &lt;span style="color:#e6db74">&amp;#34;~/emacs/slowsplit&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-4">
&lt;h4 id="headline-6">
5. Keybindings
&lt;/h4>
&lt;div id="outline-text-headline-6" class="outline-text-4">
&lt;p>
Emacs uses “keymaps” to record which keys call which commands. When you
use ‘global-set-key’ to set the keybinding for a single command in all
parts of Emacs, you are specifying the keybinding in
‘current-global-map’.&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: keybindings
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (global-set-key &lt;span style="color:#e6db74">&amp;#34;\C-x\C-b&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;buffer-menu&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">define-key&lt;/span> texinfo-mode-map &lt;span style="color:#e6db74">&amp;#34;\C-c\C-cg&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;texinfo-insert-@group&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>
To be continued…&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-go-in-emacs.org</title><link>/posts/emacs/using-go-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-go-in-emacs/</guid><description>GO layer
Description This layer adds extensive support for go.
Features: gofmt/goimports on file save Auto-completion using go-autocomplete (with the auto-completion layer) Source analysis using go-guru Refactoring with godoctor Edit struct field tag with gomodifytags Linting with flycheck&amp;#39;s built-in checkers or flycheck-gometalinter Coverage profile visualization Install Pre-requisites You will need gocode, godef and godoctor:
go get -u -v github.com/nsf/gocode go get -u -v github.com/rogpeppe/godef go get -u -v golang.org/x/tools/cmd/guru go get -u -v golang.</description><content>&lt;h1 class="title">&lt;p>GO layer&lt;/p>
&lt;/h1>
&lt;p>
&lt;img src="img/go.png" alt="img/go.png" title="img/go.png" />&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer adds extensive support for go.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>gofmt/goimports on file save&lt;/li>
&lt;li>Auto-completion using &lt;a href="https://github.com/nsf/gocode/tree/master/emacs">go-autocomplete&lt;/a> (with the &lt;code class="verbatim">auto-completion&lt;/code> layer)&lt;/li>
&lt;li>Source analysis using &lt;a href="https://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ">go-guru&lt;/a>&lt;/li>
&lt;li>Refactoring with &lt;a href="http://gorefactor.org/">godoctor&lt;/a>&lt;/li>
&lt;li>Edit struct field tag with &lt;a href="https://github.com/fatih/gomodifytags">gomodifytags&lt;/a>&lt;/li>
&lt;li>Linting with flycheck&amp;#39;s built-in checkers or flycheck-gometalinter&lt;/li>
&lt;li>Coverage profile visualization&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Pre-requisites
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>You will need &lt;code class="verbatim">gocode&lt;/code>, &lt;code class="verbatim">godef&lt;/code> and &lt;code class="verbatim">godoctor&lt;/code>:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> go get -u -v github.com/nsf/gocode
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go get -u -v github.com/rogpeppe/godef
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go get -u -v golang.org/x/tools/cmd/guru
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go get -u -v golang.org/x/tools/cmd/gorename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go get -u -v golang.org/x/tools/cmd/goimports&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you wish to use &lt;code class="verbatim">gometalinter&lt;/code> set the value of &lt;code class="verbatim">go-use-gometalinter&lt;/code> to t:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (go :variables go-use-gometalinter &lt;span style="color:#66d9ef">t&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
and install the tool:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> go get -u -v github.com/alecthomas/gometalinter
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> gometalinter --install --update&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
For more information read &lt;a href="https://github.com/alecthomas/gometalinter/blob/master/README.md">gometalinter README.md&lt;/a>
and &lt;a href="https://github.com/favadi/flycheck-gometalinter/blob/master/README.md">flycheck-gometalinter README.md&lt;/a>&lt;/p>
&lt;p>
If you wish to use &lt;code class="verbatim">godoctor&lt;/code> for refactoring, install it too:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> go get -u -v github.com/godoctor/godoctor
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> go install github.com/godoctor/godoctor&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you want to use &lt;code class="verbatim">gomodifytags&lt;/code> to edit field tags, install it too:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> go get -u -v github.com/fatih/gomodifytags&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Make sure that the &lt;code class="verbatim">gocode&lt;/code> executable is in your PATH. For information about
setting up &lt;code class="verbatim">$PATH&lt;/code>, check out the corresponding section in the FAQ (&lt;code>SPC h f
$PATH RET&lt;/code>).&lt;/p>
&lt;p>
For best results, make sure that the &lt;code class="verbatim">auto-completion&lt;/code> and &lt;code class="verbatim">syntax-checking&lt;/code>
layers are enabled as well.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Layer
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">go&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-2">
&lt;h2 id="headline-7">
Configuration
&lt;/h2>
&lt;div id="outline-text-headline-7" class="outline-text-2">
&lt;p>By default, go buffers are run through &lt;code class="verbatim">gofmt&lt;/code> on save. To use a different
formatter, set the value of &lt;code class="verbatim">gofmt-command&lt;/code>, e.g.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq gofmt-command &lt;span style="color:#e6db74">&amp;#34;goimports&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
or&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (go :variables gofmt-command &lt;span style="color:#e6db74">&amp;#34;goimports&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Indentation
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;p>By default, the tab width in Go mode is 8 spaces. To use a different value set
the layer variable &lt;code class="verbatim">go-tab-width&lt;/code>, e.g.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (go :variables go-tab-width &lt;span style="color:#ae81ff">4&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-3">
&lt;h3 id="headline-9">
Tests
&lt;/h3>
&lt;div id="outline-text-headline-9" class="outline-text-3">
&lt;p>If you&amp;#39;re using &lt;code class="verbatim">gocheck&lt;/code> in your project you can use the
&lt;code class="verbatim">go-use-gocheck-for-testing&lt;/code> variable to enable suite testing and to get single
function testing to work.&lt;/p>
&lt;p>
&lt;code class="verbatim">go-coverage-display-buffer-func&lt;/code> controls how &lt;code class="verbatim">go-coverage&lt;/code> should display
the coverage buffer. See &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html">&lt;code class="verbatim">display-buffer&lt;/code>&lt;/a> for a list of possible functions.
The default value is &lt;code class="verbatim">display-buffer-reuse-window&lt;/code>.&lt;/p>
&lt;p>
Tests are run in a compilation buffer displayed in a popup window that can be
closed by pressing &lt;code>C-g&lt;/code> from any other window. The variable
&lt;code class="verbatim">go-test-buffer-name&lt;/code> can be customized to set the output buffer name.&lt;/p>
&lt;p>
To provide additional arguments to go test, specify &lt;code class="verbatim">go-use-test-args&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (go :variables go-use-test-args &lt;span style="color:#e6db74">&amp;#34;-race -timeout 10s&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-3">
&lt;h3 id="headline-10">
Guru
&lt;/h3>
&lt;div id="outline-text-headline-10" class="outline-text-3">
&lt;p>Go Oracle has been deprecated as of October 1, 2016, it&amp;#39;s replacement is &lt;code class="verbatim">go-guru&lt;/code>.&lt;/p>
&lt;p>
If you would like to use the &lt;code class="verbatim">goguru&lt;/code> bindings in your work, you will need to
install it, and in your project you will need to set the scope with &lt;code>SPC m f o&lt;/code>.
The scope is a comma separated set of packages, and &lt;code class="verbatim">go&lt;/code>&amp;#39;s recursive operator is
supported. In addition, you can prefix with &lt;code class="verbatim">-&lt;/code> to exclude a package from
searching.&lt;/p>
&lt;p>
In addition, &lt;code class="verbatim">GOPATH&lt;/code> must be set prior to &lt;code class="verbatim">go-guru&lt;/code> initialization.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-3">
&lt;h3 id="headline-11">
Autocomplete
&lt;/h3>
&lt;div id="outline-text-headline-11" class="outline-text-3">
&lt;p>&lt;code class="verbatim">gocode&lt;/code> uses the output from installed binary files to provide its suggestions.
You have a few options to ensure you always get up to date suggestions:&lt;/p>
&lt;ul>
&lt;li>Run &lt;code class="verbatim">go install ./...&lt;/code> in your package directory when you make a file change.&lt;/li>
&lt;li>Run &lt;code class="verbatim">gocode set autobuild true&lt;/code> to have gocode attempt to run &lt;code class="verbatim">go install
./...&lt;/code> for you.&lt;/li>
&lt;li>You can configure your task runner to run &lt;code class="verbatim">go install ./...&lt;/code> command on every
file change.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-2">
&lt;h2 id="headline-12">
Working with Go
&lt;/h2>
&lt;div id="outline-text-headline-12" class="outline-text-2">
&lt;div id="outline-container-headline-13" class="outline-3">
&lt;h3 id="headline-13">
Go commands (start with &lt;code class="verbatim">m&lt;/code>):
&lt;/h3>
&lt;div id="outline-text-headline-13" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m e b&lt;/code>&lt;/td>
&lt;td>go-play buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e d&lt;/code>&lt;/td>
&lt;td>download go-play snippet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e r&lt;/code>&lt;/td>
&lt;td>go-play region&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g a&lt;/code>&lt;/td>
&lt;td>jump to matching test file or back from test to code file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g c&lt;/code>&lt;/td>
&lt;td>open a clone of the current buffer with a coverage info (&lt;code class="verbatim">go tool cover -h&lt;/code> for help)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>go jump to definition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i a&lt;/code>&lt;/td>
&lt;td>add import&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i g&lt;/code>&lt;/td>
&lt;td>goto imports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i r&lt;/code>&lt;/td>
&lt;td>remove unused import&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h h&lt;/code>&lt;/td>
&lt;td>godoc at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r n&lt;/code>&lt;/td>
&lt;td>go rename&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t p&lt;/code>&lt;/td>
&lt;td>run &amp;#34;go test&amp;#34; for the current package&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t P&lt;/code>&lt;/td>
&lt;td>run &amp;#34;go test&amp;#34; for the current package and all packages under it&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t s&lt;/code>&lt;/td>
&lt;td>run &amp;#34;go test&amp;#34; for the suite you&amp;#39;re currently in (requires gocheck)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>run &amp;#34;go test&amp;#34; for the function you&amp;#39;re currently in (while you&amp;#39;re in a _.test.go file)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m x x&lt;/code>&lt;/td>
&lt;td>run &amp;#34;go run&amp;#34; for the current &amp;#39;main&amp;#39; package&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-3">
&lt;h3 id="headline-14">
Go Guru
&lt;/h3>
&lt;div id="outline-text-headline-14" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m f &amp;lt;&lt;/code>&lt;/td>
&lt;td>go-guru show possible callers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f &amp;gt;&lt;/code>&lt;/td>
&lt;td>go-guru show call targets&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f c&lt;/code>&lt;/td>
&lt;td>go-guru show channel sends/receives&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f d&lt;/code>&lt;/td>
&lt;td>go-guru describe symbol at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f e&lt;/code>&lt;/td>
&lt;td>go-guru show possible contants/types for error value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f f&lt;/code>&lt;/td>
&lt;td>go-guru show free variables&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f i&lt;/code>&lt;/td>
&lt;td>go-guru show implements relation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f j&lt;/code>&lt;/td>
&lt;td>go-guru jump to symbol definition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f o&lt;/code>&lt;/td>
&lt;td>go-guru set analysis scope&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f p&lt;/code>&lt;/td>
&lt;td>go-guru show what the select expression points to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f r&lt;/code>&lt;/td>
&lt;td>go-guru show referrers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m f s&lt;/code>&lt;/td>
&lt;td>go-guru show callstack&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-3">
&lt;h3 id="headline-15">
Refactoring
&lt;/h3>
&lt;div id="outline-text-headline-15" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r d&lt;/code>&lt;/td>
&lt;td>Add comment stubs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e&lt;/code>&lt;/td>
&lt;td>Extract code as new function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r f&lt;/code>&lt;/td>
&lt;td>Add field tags&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r F&lt;/code>&lt;/td>
&lt;td>Remove field tags&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r n&lt;/code>&lt;/td>
&lt;td>Rename (with &lt;code class="verbatim">godoctor&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r N&lt;/code>&lt;/td>
&lt;td>Rename (with &lt;code class="verbatim">go-rename&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r t&lt;/code>&lt;/td>
&lt;td>Toggle declaration and assignment&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-hugo-in-emacs.org</title><link>/posts/emacs/using-hugo-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-hugo-in-emacs/</guid><description>Start the Hugo #+begin_src emacs-lisp :tangle yes (defun find-blog-dir () (interactive) &amp;#34;Open hugo blog files&amp;#34; (find-file &amp;#34;~/Dropbox/xingwenju.com/hugo/content&amp;#34;) ) ;;;###autoload (defun blog-deploy () &amp;#34;Run hugo and push changes upstream.&amp;#34; (interactive) (with-dir blog-public-dir (shell-command &amp;#34;git rm -rf .&amp;#34;) (shell-command &amp;#34;git clean -fxd&amp;#34;) (with-temp-file &amp;#34;CNAME&amp;#34; (insert &amp;#34;www.xingwenju.com\spacemacs&amp;#34;)) (with-dir blog-dir (-&amp;gt;&amp;gt; blog-public-dir (concat &amp;#34;hugo -d &amp;#34;) shell-command)) (shell-command &amp;#34;git add .&amp;#34;) (--&amp;gt; (current-time-string) (concat &amp;#34;git commit -m \&amp;#34;&amp;#34; it &amp;#34;\&amp;#34;&amp;#34;) (shell-command it)) (magit-push-current-to-upstream nil))) ;;;###autoload (defun blog-start-server () &amp;#34;Run hugo server if not already running and open its webpage.</description><content>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Start the Hugo
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp :tangle yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun find-blog-dir ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Open hugo blog files&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (find-file &lt;span style="color:#e6db74">&amp;#34;~/Dropbox/xingwenju.com/hugo/content&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;;###autoload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun blog-deploy ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Run hugo and push changes upstream.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-dir blog-public-dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command &lt;span style="color:#e6db74">&amp;#34;git rm -rf .&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command &lt;span style="color:#e6db74">&amp;#34;git clean -fxd&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-temp-file &lt;span style="color:#e6db74">&amp;#34;CNAME&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">insert&lt;/span> &lt;span style="color:#e6db74">&amp;#34;www.xingwenju.com\spacemacs&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-dir blog-dir (-&amp;gt;&amp;gt; blog-public-dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">concat&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo -d &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> shell-command))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command &lt;span style="color:#e6db74">&amp;#34;git add .&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (--&amp;gt; (&lt;span style="color:#a6e22e">current-time-string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">concat&lt;/span> &lt;span style="color:#e6db74">&amp;#34;git commit -m \&amp;#34;&amp;#34;&lt;/span> it &lt;span style="color:#e6db74">&amp;#34;\&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (shell-command it))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (magit-push-current-to-upstream &lt;span style="color:#66d9ef">nil&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;;###autoload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun blog-start-server ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Run hugo server if not already running and open its webpage.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (with-dir blog-dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (unless (&lt;span style="color:#a6e22e">get-process&lt;/span> blog-hugo-process)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">start-process&lt;/span> blog-hugo-process &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;server&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (browse-url blog-hugo-server-site)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;;###autoload&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun blog-end-server ()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;End hugo server process if running.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (--when-let (&lt;span style="color:#a6e22e">get-process&lt;/span> blog-hugo-process)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">delete-process&lt;/span> it)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;; Bindings&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(spacemacs/set-leader-keys
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ab&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;blog-deploy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;aa&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;blog-start-server&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;ae&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;blog-end-server&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div></content></item><item><title>using-hy-mode-in-emacs.org</title><link>/posts/emacs/using-hy-mode-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-hy-mode-in-emacs/</guid><description>You can type the post name as emacs/test-easy-hugo-in-emacs to put the post in subdirectory
#+srcname: easy-hugo-newpost #+begin_src emacs-lisp (defun x/smart-create-hugo-newpost-with-current-buffer (post-file) &amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34; (interactive (list (read-from-minibuffer &amp;#34;输入文件名: &amp;#34; `(,easy-hugo-default-ext . 1) nil nil nil))) (easy-hugo-with-env (let ( (filename (expand-file-name post-file easy-hugo-postdir)) ;; file to create (file-ext (file-name-extension post-file)) ;; file extention (current-buffer-file-name (buffer-file-name)) ;; buffer to copy content ) ;; Check file extention (when (not (member file-ext easy-hugo--formats)) (error &amp;#34;please enter .</description><content>&lt;p>
You can type the post name as &lt;code class="verbatim">emacs/test-easy-hugo-in-emacs&lt;/code> to put the post in subdirectory&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: easy-hugo-newpost
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun x/smart-create-hugo-newpost-with-current-buffer (post-file)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;file needs to have and extension &amp;#39;.md&amp;#39; or &amp;#39;.org&amp;#39; or &amp;#39;.ad&amp;#39; or &amp;#39;.rst&amp;#39; or &amp;#39;.mmark&amp;#39; or &amp;#39;.html&amp;#39;.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive (&lt;span style="color:#a6e22e">list&lt;/span> (&lt;span style="color:#a6e22e">read-from-minibuffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;输入文件名: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>(&lt;span style="color:#f92672">,&lt;/span>easy-hugo-default-ext &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (easy-hugo-with-env
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (filename (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> post-file easy-hugo-postdir)) &lt;span style="color:#75715e">;; file to create&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-ext (file-name-extension post-file)) &lt;span style="color:#75715e">;; file extention&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (current-buffer-file-name (&lt;span style="color:#a6e22e">buffer-file-name&lt;/span>)) &lt;span style="color:#75715e">;; buffer to copy content&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check file extention&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (not (&lt;span style="color:#a6e22e">member&lt;/span> file-ext easy-hugo--formats))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#e6db74">&amp;#34;please enter .%s or .org or .%s or .rst or .mmark or .%s file name&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-markdown-extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-asciidoc-extension
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> easy-hugo-html-extension))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check target file exists&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (&lt;span style="color:#a6e22e">file-exists-p&lt;/span> (file-truename filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#e6db74">&amp;#34;%s already exists!&amp;#34;&lt;/span> filename))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Check if org is supported and defined&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (and (&lt;span style="color:#a6e22e">null&lt;/span> easy-hugo-org-header)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">0.25&lt;/span> (easy-hugo--version)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">call-process&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span> &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-relative-name filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span> easy-hugo-basedir)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (progn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (if (or (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-markdown-extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-asciidoc-extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;rst&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;mmark&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext easy-hugo-html-extension))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">call-process&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">t&lt;/span> &lt;span style="color:#e6db74">&amp;#34;new&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (file-relative-name filename
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">expand-file-name&lt;/span> &lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span> easy-hugo-basedir))))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; End of check org support&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Kill temporary buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (&lt;span style="color:#a6e22e">get-buffer&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">kill-buffer&lt;/span> &lt;span style="color:#e6db74">&amp;#34;*hugo*&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Open the new post with filename&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (find-file filename)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (when (or easy-hugo-org-header
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (and (&lt;span style="color:#a6e22e">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0.25&lt;/span> (easy-hugo--version))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">string-equal&lt;/span> file-ext &lt;span style="color:#e6db74">&amp;#34;org&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Insert header&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">insert&lt;/span> (easy-hugo--org-headers (file-name-base post-file)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">goto-char&lt;/span> (&lt;span style="color:#a6e22e">point-max&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Insert contents from another buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">insert-file-contents&lt;/span> current-buffer-file-name)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">goto-char&lt;/span> (&lt;span style="color:#a6e22e">point-max&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (save-buffer)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p></content></item><item><title>using-interactive-in-emacs.org</title><link>/posts/emacs/using-interactive-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-interactive-in-emacs/</guid><description>Using Interactive #+BEGIN_SRC (defun x/hugo-save-current-buffer-as-hugo-post (hugo-post-subdir) &amp;#34;Saving the current buffer as a hugo post in a specific hugo post directory&amp;#34; (interactive (let ((hugo-post-subdirs &amp;#39;(&amp;#34;emacs&amp;#34; &amp;#34;linux&amp;#34; &amp;#34;hugo&amp;#34;))) (list (ido-completing-read &amp;#34;Directory Name:&amp;#34; hugo-post-subdirs)) )) (progn (setq hugo-post-title (read-from-minibuffer &amp;#34;请输入文件名：&amp;#34; (buffer-name))) (setq hugo-post-dir (concat easy-hugo-basedir easy-hugo-postdir &amp;#34;/&amp;#34; hugo-post-subdir)) (write-file (concat hugo-post-dir hugo-post-title)) (find-alternate-file-other-window (concat hugo-post-dir hugo-post-title)) ) ) #+END_SRC</description><content>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Using Interactive
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+BEGIN_SRC
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defun x/hugo-save-current-buffer-as-hugo-post (hugo-post-subdir)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Saving the current buffer as a hugo post
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">in a specific hugo post directory&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (interactive
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((hugo-post-subdirs &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;emacs&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;linux&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hugo&amp;#34;&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">list&lt;/span> (ido-completing-read &lt;span style="color:#e6db74">&amp;#34;Directory Name:&amp;#34;&lt;/span> hugo-post-subdirs))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (progn
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq hugo-post-title
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">read-from-minibuffer&lt;/span> &lt;span style="color:#e6db74">&amp;#34;请输入文件名：&amp;#34;&lt;/span> (&lt;span style="color:#a6e22e">buffer-name&lt;/span>)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq hugo-post-dir
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">concat&lt;/span> easy-hugo-basedir easy-hugo-postdir &lt;span style="color:#e6db74">&amp;#34;/&amp;#34;&lt;/span> hugo-post-subdir))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (write-file (&lt;span style="color:#a6e22e">concat&lt;/span> hugo-post-dir hugo-post-title))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (find-alternate-file-other-window (&lt;span style="color:#a6e22e">concat&lt;/span> hugo-post-dir hugo-post-title))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+END_SRC&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div></content></item><item><title>using-java-in-emacs.org</title><link>/posts/emacs/using-java-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-java-in-emacs/</guid><description>Java layer
Description This layer adds support for the Java language.
Features: Support for the following backends:
Meghanada client/server (default), Eclim client/server, ENSIME client/server. Each provides:
Auto-completion using company Linting using flycheck integration Maven and Gradle integration Layer Installation Layer To use this configuration layer, add it to your ~/.spacemacs. You will need to add java to the existing dotspacemacs-configuration-layers list in this file.
Choosing a backend To choose a default backend set the layer variable java-backend:</description><content>&lt;h1 class="title">&lt;p>Java layer&lt;/p>
&lt;/h1>
&lt;p>
&lt;img src="img/java.png" alt="img/java.png" title="img/java.png" />&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer adds support for the Java language.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>
&lt;p>Support for the following backends:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/mopemope/meghanada-emacs">Meghanada&lt;/a> client/server (default),&lt;/li>
&lt;li>&lt;a href="http://eclim.org">Eclim&lt;/a> client/server,&lt;/li>
&lt;li>&lt;a href="https://ensime.github.io/">ENSIME&lt;/a> client/server.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Each provides:&lt;/p>
&lt;ul>
&lt;li>Auto-completion using company&lt;/li>
&lt;li>Linting using flycheck integration&lt;/li>
&lt;li>Maven and Gradle integration&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Layer Installation
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Layer
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">java&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Choosing a backend
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>To choose a default backend set the layer variable &lt;code class="verbatim">java-backend&lt;/code>:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(java :variables java-backend &lt;span style="color:#e6db74">&amp;#39;eclim&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
Backend can be chosen on a per project basis using directory local variables
(files named &lt;code class="verbatim">.dir-locals.el&lt;/code> at the root of a project), an example to use the
&lt;code class="verbatim">eclim&lt;/code> backend:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;; Directory Local Variables&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;; For more information see (info &amp;#34;(emacs) Directory Variables&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>((java-mode (java-backend &lt;span style="color:#f92672">.&lt;/span> eclim)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
&lt;strong>Note:&lt;/strong> you can easily add a directory local variable with &lt;code>SPC f v d&lt;/code>.&lt;/p>
&lt;p>
If you want to use the Ensime backend, you should modify your &lt;code class="verbatim">~/.spacemacs&lt;/code> to
use the recommended Ensime version (Stable). Please add the following lines to
&lt;code class="verbatim">dotspacemacs/user-init&lt;/code>:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (push &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;melpa-stable&amp;#34;&lt;/span> &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;stable.melpa.org/packages/&amp;#34;&lt;/span>) configuration-layer-elpa-archives)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (push &lt;span style="color:#f92672">&amp;#39;&lt;/span>(ensime &lt;span style="color:#f92672">.&lt;/span> &lt;span style="color:#e6db74">&amp;#34;melpa-stable&amp;#34;&lt;/span>) package-pinned-packages)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-2">
&lt;h2 id="headline-7">
Backends
&lt;/h2>
&lt;div id="outline-text-headline-7" class="outline-text-2">
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Meghanada
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;p>Meghanada is composed of a lightweight server and an Emacs minor mode. It
is unintrusive and integrates with &lt;code class="verbatim">company&lt;/code> and &lt;code class="verbatim">flycheck&lt;/code>.&lt;/p>
&lt;p>
Both &lt;code class="verbatim">Gradle&lt;/code> and &lt;code class="verbatim">Maven&lt;/code> projects are compatible with Meghanada.&lt;/p>
&lt;p>
Meghanada is the default backend used by this layer, see &lt;a href="#choosing-a-backend">Choosing a backend&lt;/a> in
order to lean how to select a different backend.&lt;/p>
&lt;div id="outline-container-headline-9" class="outline-4">
&lt;h4 id="headline-9">
Installation
&lt;/h4>
&lt;div id="outline-text-headline-9" class="outline-text-4">
&lt;p>The Meghanada server will be installed automatically whenever a Java file
is opened.&lt;/p>
&lt;p>
If you get issues with the auto-installation you can either download the last
version of the server manually &lt;a href="https://dl.bintray.com/mopemope/meghanada/">there&lt;/a> or build from source hosted on &lt;a href="https://github.com/mopemope/meghanada-server">the GitHub
repository&lt;/a> and copy the &lt;code class="verbatim">jar&lt;/code> file to &lt;code class="verbatim">.emacs.d/.cache/meghanada&lt;/code> folder.&lt;/p>
&lt;p>
No additional configuration is necessary!&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-4">
&lt;h4 id="headline-10">
About Maven
&lt;/h4>
&lt;div id="outline-text-headline-10" class="outline-text-4">
&lt;p>Maven is not fully supported by Meghanada (but should still work fine for most
projects). If you encounter disconnection from the server then run &lt;code class="verbatim">mvn install&lt;/code>
at the root of your project first.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-3">
&lt;h3 id="headline-11">
Eclim
&lt;/h3>
&lt;div id="outline-text-headline-11" class="outline-text-3">
&lt;p>Eclim provides the ability to access Eclipse features such as code completion,
searching, code validation, and many more.&lt;/p>
&lt;div id="outline-container-headline-12" class="outline-4">
&lt;h4 id="headline-12">
Installation
&lt;/h4>
&lt;div id="outline-text-headline-12" class="outline-text-4">
&lt;div id="outline-container-headline-13" class="outline-5">
&lt;h5 id="headline-13">
Eclipse
&lt;/h5>
&lt;div id="outline-text-headline-13" class="outline-text-5">
&lt;p>First you need the last version of Eclispe from the &lt;a href="https://www.eclipse.org/downloads/eclipse-packages/">official Eclipse site&lt;/a>.&lt;/p>
&lt;p>
&lt;strong>Note:&lt;/strong> if you are on MacOS there some issues between the new native Eclipse
application installed by the &lt;code class="verbatim">Eclispe-install.app&lt;/code> wizard and the Eclim
installer wizard. The recommended way to install Eclipse on MacOS is by using
&lt;code class="verbatim">homebrew&lt;/code> or by get the &lt;code class="verbatim">tar.gz&lt;/code> compressed file instead. With homebrew
the command line to install Eclipse is &lt;code class="verbatim">brew cask install eclipse-jee&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-5">
&lt;h5 id="headline-14">
Eclim
&lt;/h5>
&lt;div id="outline-text-headline-14" class="outline-text-5">
&lt;p>For installation of Eclim check the &lt;a href="http://eclim.org/install.html#download">official page&lt;/a> to download the installer
then double click on it or launch it in the command line with the following
command (the example is for MacOS, replace the eclispe.home definition by
your correct location as well as the current version of eclim):&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ java -Dvim.skip&lt;span style="color:#f92672">=&lt;/span>true -Declipse.home&lt;span style="color:#f92672">=&lt;/span>/Applications/Eclipse.app/Contents/Eclipse -jar eclim_2.6.0.jar install&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-4">
&lt;h4 id="headline-15">
Configuration
&lt;/h4>
&lt;div id="outline-text-headline-15" class="outline-text-4">
&lt;p>You may need to set the Eclipse and Eclim paths in your dotfile as layer
variables or in the &lt;code class="verbatim">dotspacemacs/user-config&lt;/code>, for instance on MacOS as layer
variables:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(java :variables java-backend &lt;span style="color:#e6db74">&amp;#39;eclim&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eclim-eclipse-dirs &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/Applications/Eclipse.app/Contents/Eclipse/&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eclim-executable &lt;span style="color:#e6db74">&amp;#34;/Applications/Eclipse.app/Contents/Eclipse/eclim&amp;#34;&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
You can also configure useful other options like the default location for the
Eclim workspace (default value is &lt;code class="verbatim">~/workspace&lt;/code>), as shown below:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span> (setq
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Specify the workspace to use by default&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eclimd-default-workspace &lt;span style="color:#e6db74">&amp;#34;/path/to/default/eclipse/workspace&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; wether autostarting eclimd or not (default nil)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eclimd-autostart &lt;span style="color:#66d9ef">t&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">;; Whether or not to block emacs until eclimd is ready (default nil)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> eclimd-wait-for-process &lt;span style="color:#66d9ef">t&lt;/span>)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-16" class="outline-4">
&lt;h4 id="headline-16">
Usage
&lt;/h4>
&lt;div id="outline-text-headline-16" class="outline-text-4">
&lt;p>Start the eclim daemon with &lt;code>SPC m D s&lt;/code> and stop it with &lt;code>SPC m D k&lt;/code>. (See
below.)&lt;/p>
&lt;p>
Syntax checking is performed only on demand with &lt;code>SPC e e&lt;/code> to preserve
perfomance.&lt;/p>
&lt;p>
Auto-save feature may freeze Emacs sometimes, use &lt;code>C-g&lt;/code> to unfreeze Emacs or
atlernatively you can set &lt;code class="verbatim">dotspacemacs-auto-save-file-location&lt;/code> to nil.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-17" class="outline-3">
&lt;h3 id="headline-17">
ENSIME
&lt;/h3>
&lt;div id="outline-text-headline-17" class="outline-text-3">
&lt;p>Another backend option is the ENSIME server, which is a lot more responsive than
Eclim. ENSIME is originally made to work with Scala but it now works with plain
Java projects as well.&lt;/p>
&lt;div id="outline-container-headline-18" class="outline-4">
&lt;h4 id="headline-18">
Installation when using SBT
&lt;/h4>
&lt;div id="outline-text-headline-18" class="outline-text-4">
&lt;p>Find it with your favourite package manager, eg:&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span> nix-env --install sbt&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>or refer to &lt;a href="http://www.scala-sbt.org/download.html">the sbt installation instructions&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-19" class="outline-4">
&lt;h4 id="headline-19">
Installation when using Gradle
&lt;/h4>
&lt;div id="outline-text-headline-19" class="outline-text-4">
&lt;p>Refer to the &lt;a href="https://ensime.org/build_tools/gradle/">Ensime installation instructions&lt;/a> to install the &lt;code class="verbatim">ensime-gradle&lt;/code>
plugin.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-20" class="outline-4">
&lt;h4 id="headline-20">
Configuration
&lt;/h4>
&lt;div id="outline-text-headline-20" class="outline-text-4">
&lt;p>Follow &lt;a href="https://ensime.github.io/build_tools/sbt/">the ENSIME configuration instructions&lt;/a>. Spacemacs uses
the development version of Ensime so follow the appropriate steps.&lt;/p>
&lt;p>
To use the build functions under &lt;code>SPC m b&lt;/code> you need to use version &lt;code class="verbatim">0.13.5&lt;/code> or
newer of &lt;code class="verbatim">sbt&lt;/code>, and specify that in your project&amp;#39;s &lt;code class="verbatim">project/build.properties&lt;/code>.
For example,&lt;/p>
&lt;div class="src src-scala">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-scala" data-lang="scala">&lt;span style="display:flex;">&lt;span> sbt&lt;span style="color:#f92672">.&lt;/span>version&lt;span style="color:#66d9ef">=&lt;/span>&lt;span style="color:#ae81ff">0.13&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-21" class="outline-4">
&lt;h4 id="headline-21">
Usage
&lt;/h4>
&lt;div id="outline-text-headline-21" class="outline-text-4">
&lt;p>&lt;code>SPC SPC spacemacs/ensime-gen-and-restart&lt;/code> or &lt;code>SPC m D r&lt;/code> generates a new config
for a project and starts the server. Afterwards &lt;code>SPC SPC ensime&lt;/code> or &lt;code>SPC m D s&lt;/code>
will suffice do the trick.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-22" class="outline-4">
&lt;h4 id="headline-22">
Issues
&lt;/h4>
&lt;div id="outline-text-headline-22" class="outline-text-4">
&lt;p>ENSIME is originally built for Scala, so support for java is not complete, in
particular refactoring doesn&amp;#39;t work.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-23" class="outline-2">
&lt;h2 id="headline-23">
Key bindings
&lt;/h2>
&lt;div id="outline-text-headline-23" class="outline-text-2">
&lt;div id="outline-container-headline-24" class="outline-3">
&lt;h3 id="headline-24">
Meghanada
&lt;/h3>
&lt;div id="outline-text-headline-24" class="outline-text-3">
&lt;div id="outline-container-headline-25" class="outline-4">
&lt;h4 id="headline-25">
Server
&lt;/h4>
&lt;div id="outline-text-headline-25" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m D c&lt;/code>&lt;/td>
&lt;td>Connect to server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D d&lt;/code>&lt;/td>
&lt;td>Disconnect from server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D i&lt;/code>&lt;/td>
&lt;td>Install server (should be done automatically&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D k&lt;/code>&lt;/td>
&lt;td>Kill server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D l&lt;/code>&lt;/td>
&lt;td>Clear server cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D p&lt;/code>&lt;/td>
&lt;td>Ping server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D r&lt;/code>&lt;/td>
&lt;td>Restarrt server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D s&lt;/code>&lt;/td>
&lt;td>Start server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D u&lt;/code>&lt;/td>
&lt;td>Update server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D v&lt;/code>&lt;/td>
&lt;td>Print version of the server&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-26" class="outline-4">
&lt;h4 id="headline-26">
Navigation
&lt;/h4>
&lt;div id="outline-text-headline-26" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m g b&lt;/code>&lt;/td>
&lt;td>Jump back to previous location&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>Jump to declaration&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-27" class="outline-4">
&lt;h4 id="headline-27">
Compilation
&lt;/h4>
&lt;div id="outline-text-headline-27" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m c b&lt;/code>&lt;/td>
&lt;td>Compile file (buffer)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m c c&lt;/code>&lt;/td>
&lt;td>Compile project&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-28" class="outline-4">
&lt;h4 id="headline-28">
Tests (junit)
&lt;/h4>
&lt;div id="outline-text-headline-28" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t a&lt;/code>&lt;/td>
&lt;td>Run all tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t c&lt;/code>&lt;/td>
&lt;td>Run test class around point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t l&lt;/code>&lt;/td>
&lt;td>Run last tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>Run test cause around point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-29" class="outline-4">
&lt;h4 id="headline-29">
Refactoring
&lt;/h4>
&lt;div id="outline-text-headline-29" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m =&lt;/code>&lt;/td>
&lt;td>Beautify code&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i&lt;/code>&lt;/td>
&lt;td>Optimize imports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r I&lt;/code>&lt;/td>
&lt;td>Import all&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r n&lt;/code>&lt;/td>
&lt;td>Create a new class, interface, or enum&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-30" class="outline-4">
&lt;h4 id="headline-30">
Tasks
&lt;/h4>
&lt;div id="outline-text-headline-30" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m x :&lt;/code>&lt;/td>
&lt;td>Run task&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-31" class="outline-3">
&lt;h3 id="headline-31">
Eclim
&lt;/h3>
&lt;div id="outline-text-headline-31" class="outline-text-3">
&lt;div id="outline-container-headline-32" class="outline-4">
&lt;h4 id="headline-32">
Java-mode
&lt;/h4>
&lt;div id="outline-text-headline-32" class="outline-text-4">
&lt;div id="outline-container-headline-33" class="outline-5">
&lt;h5 id="headline-33">
Ant
&lt;/h5>
&lt;div id="outline-text-headline-33" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m a a&lt;/code>&lt;/td>
&lt;td>Run Ant&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m a c&lt;/code>&lt;/td>
&lt;td>Clear Ant cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m a r&lt;/code>&lt;/td>
&lt;td>Run Ant&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m a v&lt;/code>&lt;/td>
&lt;td>Validate&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-34" class="outline-5">
&lt;h5 id="headline-34">
Project management
&lt;/h5>
&lt;div id="outline-text-headline-34" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m p b&lt;/code>&lt;/td>
&lt;td>Build project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p c&lt;/code>&lt;/td>
&lt;td>Create project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p d&lt;/code>&lt;/td>
&lt;td>Delete project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p g&lt;/code>&lt;/td>
&lt;td>Open file in current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p i&lt;/code>&lt;/td>
&lt;td>Import project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p j&lt;/code>&lt;/td>
&lt;td>Information about project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p k&lt;/code>&lt;/td>
&lt;td>Close project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p o&lt;/code>&lt;/td>
&lt;td>Open project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p p&lt;/code>&lt;/td>
&lt;td>Open project management buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p r&lt;/code>&lt;/td>
&lt;td>Run project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m p u&lt;/code>&lt;/td>
&lt;td>Update project&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-35" class="outline-5">
&lt;h5 id="headline-35">
Eclim daemon
&lt;/h5>
&lt;div id="outline-text-headline-35" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m D k&lt;/code>&lt;/td>
&lt;td>Kill daemon&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D s&lt;/code>&lt;/td>
&lt;td>Start daemon&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-36" class="outline-5">
&lt;h5 id="headline-36">
Goto
&lt;/h5>
&lt;div id="outline-text-headline-36" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>M-​,​&lt;/code>&lt;/td>
&lt;td>jump back from go to declaration/definition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>go to declaration&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g t&lt;/code>&lt;/td>
&lt;td>go to type definition&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-37" class="outline-5">
&lt;h5 id="headline-37">
Refactoring
&lt;/h5>
&lt;div id="outline-text-headline-37" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r c&lt;/code>&lt;/td>
&lt;td>create a constructor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r f&lt;/code>&lt;/td>
&lt;td>format file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r g&lt;/code>&lt;/td>
&lt;td>generate getter and setter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i&lt;/code>&lt;/td>
&lt;td>optimize imports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r j&lt;/code>&lt;/td>
&lt;td>implement or override a method&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r n&lt;/code>&lt;/td>
&lt;td>create a new class, enum, or interface&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r&lt;/code>&lt;/td>
&lt;td>rename symbol&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-38" class="outline-5">
&lt;h5 id="headline-38">
Documentation, Find
&lt;/h5>
&lt;div id="outline-text-headline-38" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m f f&lt;/code>&lt;/td>
&lt;td>general find in project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h c&lt;/code>&lt;/td>
&lt;td>call hierarchy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h h&lt;/code>&lt;/td>
&lt;td>show documentation for symbol at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h i&lt;/code>&lt;/td>
&lt;td>view hierarchy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h u&lt;/code>&lt;/td>
&lt;td>show usages for symbol at point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-39" class="outline-5">
&lt;h5 id="headline-39">
Errors (problems)
&lt;/h5>
&lt;div id="outline-text-headline-39" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC e e&lt;/code>&lt;/td>
&lt;td>Force an error check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC e l&lt;/code>&lt;/td>
&lt;td>List errors&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC e n&lt;/code>&lt;/td>
&lt;td>Next error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC e p&lt;/code>&lt;/td>
&lt;td>Previous error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e e&lt;/code>&lt;/td>
&lt;td>Correct error around point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-40" class="outline-5">
&lt;h5 id="headline-40">
Tests
&lt;/h5>
&lt;div id="outline-text-headline-40" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>run JUnit tests for current method or current file or project&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-41" class="outline-4">
&lt;h4 id="headline-41">
Errors (problems) buffer
&lt;/h4>
&lt;div id="outline-text-headline-41" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>go to problem place&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a&lt;/code>&lt;/td>
&lt;td>show all problems&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e&lt;/code>&lt;/td>
&lt;td>show only errors&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f&lt;/code>&lt;/td>
&lt;td>show problems only for current file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>g&lt;/code>&lt;/td>
&lt;td>refresh problems&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q&lt;/code>&lt;/td>
&lt;td>quit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w&lt;/code>&lt;/td>
&lt;td>show only warnings&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-42" class="outline-4">
&lt;h4 id="headline-42">
Projects buffer
&lt;/h4>
&lt;div id="outline-text-headline-42" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>go to current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c&lt;/code>&lt;/td>
&lt;td>go to problem place&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>D&lt;/code>&lt;/td>
&lt;td>delete project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>g&lt;/code>&lt;/td>
&lt;td>refresh buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i&lt;/code>&lt;/td>
&lt;td>info about current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>I&lt;/code>&lt;/td>
&lt;td>import existing project into the workspace&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m&lt;/code>&lt;/td>
&lt;td>mark current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M&lt;/code>&lt;/td>
&lt;td>mark all projects&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>N&lt;/code>&lt;/td>
&lt;td>create new project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>o&lt;/code>&lt;/td>
&lt;td>open project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p&lt;/code>&lt;/td>
&lt;td>update project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q&lt;/code>&lt;/td>
&lt;td>quit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>R&lt;/code>&lt;/td>
&lt;td>rename current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u&lt;/code>&lt;/td>
&lt;td>unmark current project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>U&lt;/code>&lt;/td>
&lt;td>unmark all projects&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-43" class="outline-3">
&lt;h3 id="headline-43">
Ensime key bindings
&lt;/h3>
&lt;div id="outline-text-headline-43" class="outline-text-3">
&lt;div id="outline-container-headline-44" class="outline-4">
&lt;h4 id="headline-44">
Search
&lt;/h4>
&lt;div id="outline-text-headline-44" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m /&lt;/code>&lt;/td>
&lt;td>incremental search using &lt;code class="verbatim">ensime-scalex&lt;/code> major mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m ?&lt;/code>&lt;/td>
&lt;td>incremental search in all live buffers&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-45" class="outline-4">
&lt;h4 id="headline-45">
Ensime Search Mode
&lt;/h4>
&lt;div id="outline-text-headline-45" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C-j&lt;/code>&lt;/td>
&lt;td>Move to next match&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-k&lt;/code>&lt;/td>
&lt;td>Move to previous match&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-i&lt;/code>&lt;/td>
&lt;td>Insert at point import of current result&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>Jump to the target of the currently selected ensime-search-result&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C-q&lt;/code>&lt;/td>
&lt;td>Quit ensime search&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-46" class="outline-4">
&lt;h4 id="headline-46">
sbt
&lt;/h4>
&lt;div id="outline-text-headline-46" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m b .&lt;/code>&lt;/td>
&lt;td>sbt transient state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b b&lt;/code>&lt;/td>
&lt;td>sbt command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b c&lt;/code>&lt;/td>
&lt;td>compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b C&lt;/code>&lt;/td>
&lt;td>clean command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b i&lt;/code>&lt;/td>
&lt;td>switch to sbt shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b p&lt;/code>&lt;/td>
&lt;td>package command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m b r&lt;/code>&lt;/td>
&lt;td>run command&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-47" class="outline-4">
&lt;h4 id="headline-47">
Typecheck
&lt;/h4>
&lt;div id="outline-text-headline-47" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m c t&lt;/code>&lt;/td>
&lt;td>type check the current file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m c T&lt;/code>&lt;/td>
&lt;td>type check all the open buffers&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-48" class="outline-4">
&lt;h4 id="headline-48">
Debug
&lt;/h4>
&lt;div id="outline-text-headline-48" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m d A&lt;/code>&lt;/td>
&lt;td>Attach to a remote debugger&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d b&lt;/code>&lt;/td>
&lt;td>set breakpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d B&lt;/code>&lt;/td>
&lt;td>clear breakpoint&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d C&lt;/code>&lt;/td>
&lt;td>clear all breakpoints&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d c&lt;/code>&lt;/td>
&lt;td>continue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d i&lt;/code>&lt;/td>
&lt;td>inspect value at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d n&lt;/code>&lt;/td>
&lt;td>next&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d o&lt;/code>&lt;/td>
&lt;td>step out&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d q&lt;/code>&lt;/td>
&lt;td>quit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d r&lt;/code>&lt;/td>
&lt;td>run&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d s&lt;/code>&lt;/td>
&lt;td>step&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d t&lt;/code>&lt;/td>
&lt;td>backtrace&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
&lt;strong>Note:&lt;/strong> These key bindings need a transient-state, PR welcome :-)&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-49" class="outline-4">
&lt;h4 id="headline-49">
Errors
&lt;/h4>
&lt;div id="outline-text-headline-49" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m e e&lt;/code>&lt;/td>
&lt;td>print error at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e l&lt;/code>&lt;/td>
&lt;td>show all errors and warnings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e s&lt;/code>&lt;/td>
&lt;td>switch to buffer containing the stack trace parser&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-50" class="outline-4">
&lt;h4 id="headline-50">
Goto
&lt;/h4>
&lt;div id="outline-text-headline-50" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>go to definition&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g i&lt;/code>&lt;/td>
&lt;td>go to implementation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g t&lt;/code>&lt;/td>
&lt;td>go to test&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-51" class="outline-4">
&lt;h4 id="headline-51">
Print and yank types
&lt;/h4>
&lt;div id="outline-text-headline-51" class="outline-text-4">
&lt;table>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m h T&lt;/code>&lt;/td>
&lt;td>print full type name at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h t&lt;/code>&lt;/td>
&lt;td>print short type name at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m y T&lt;/code>&lt;/td>
&lt;td>yank full type name at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m y t&lt;/code>&lt;/td>
&lt;td>yank short type name at point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-52" class="outline-4">
&lt;h4 id="headline-52">
Documentation, Inspect
&lt;/h4>
&lt;div id="outline-text-headline-52" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m h h&lt;/code>&lt;/td>
&lt;td>show documentation for symbol at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h u&lt;/code>&lt;/td>
&lt;td>show uses for symbol at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i i&lt;/code>&lt;/td>
&lt;td>inspect type at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i I&lt;/code>&lt;/td>
&lt;td>inspect type in other frame&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m i p&lt;/code>&lt;/td>
&lt;td>inspect project package&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-53" class="outline-4">
&lt;h4 id="headline-53">
Server
&lt;/h4>
&lt;div id="outline-text-headline-53" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m D f&lt;/code>&lt;/td>
&lt;td>reload open files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D r&lt;/code>&lt;/td>
&lt;td>regenerate the &lt;code class="verbatim">.ensime&lt;/code> and restart the ensime server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m D s&lt;/code>&lt;/td>
&lt;td>start ensime server&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-54" class="outline-4">
&lt;h4 id="headline-54">
Refactoring
&lt;/h4>
&lt;div id="outline-text-headline-54" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r a&lt;/code>&lt;/td>
&lt;td>add type annotation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r f&lt;/code>&lt;/td>
&lt;td>format source&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r d&lt;/code>&lt;/td>
&lt;td>get rid of an intermediate variable (&lt;code class="verbatim">ensime-refactor-inline-local&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r D&lt;/code>&lt;/td>
&lt;td>get rid of an intermediate variable (&lt;code class="verbatim">ensime-undo-peek&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i&lt;/code>&lt;/td>
&lt;td>organize imports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r m&lt;/code>&lt;/td>
&lt;td>extract a range of code into a method&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r&lt;/code>&lt;/td>
&lt;td>rename a symbol project wide&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r t&lt;/code>&lt;/td>
&lt;td>import type at point&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r v&lt;/code>&lt;/td>
&lt;td>extract a range of code into a variable&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z&lt;/code>&lt;/td>
&lt;td>expand/contract region&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-55" class="outline-4">
&lt;h4 id="headline-55">
Tests
&lt;/h4>
&lt;div id="outline-text-headline-55" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t a&lt;/code>&lt;/td>
&lt;td>test command (sbt)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t r&lt;/code>&lt;/td>
&lt;td>test quick command (sbt)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>test only (sbt)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-56" class="outline-4">
&lt;h4 id="headline-56">
REPL
&lt;/h4>
&lt;div id="outline-text-headline-56" class="outline-text-4">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m s a&lt;/code>&lt;/td>
&lt;td>ask for a file to be loaded in the REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>send buffer to the REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s B&lt;/code>&lt;/td>
&lt;td>send buffer to the REPL and focus the REPL buffer in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s i&lt;/code>&lt;/td>
&lt;td>start or switch to the REPL inferior process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>send region to the REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s R&lt;/code>&lt;/td>
&lt;td>send region to the REPL and focus the REPL buffer in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-57" class="outline-3">
&lt;h3 id="headline-57">
Maven
&lt;/h3>
&lt;div id="outline-text-headline-57" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m m c c&lt;/code>&lt;/td>
&lt;td>Compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m c C&lt;/code>&lt;/td>
&lt;td>Clean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m c r&lt;/code>&lt;/td>
&lt;td>Clean and compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m g a&lt;/code>&lt;/td>
&lt;td>Switch between class and test file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m g A&lt;/code>&lt;/td>
&lt;td>Switch between class and test file in another window&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m t a&lt;/code>&lt;/td>
&lt;td>Run all tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m t C-a&lt;/code>&lt;/td>
&lt;td>Clean and run all tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m t b&lt;/code>&lt;/td>
&lt;td>Run current buffer tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m t i&lt;/code>&lt;/td>
&lt;td>Test and install&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m m t t&lt;/code>&lt;/td>
&lt;td>Run a specific test&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-58" class="outline-3">
&lt;h3 id="headline-58">
Gradle
&lt;/h3>
&lt;div id="outline-text-headline-58" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m l c c&lt;/code>&lt;/td>
&lt;td>Compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l c C&lt;/code>&lt;/td>
&lt;td>Clean&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l c r&lt;/code>&lt;/td>
&lt;td>Clean and compile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l t a&lt;/code>&lt;/td>
&lt;td>Run all tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l t b&lt;/code>&lt;/td>
&lt;td>Run current buffer tests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l t t&lt;/code>&lt;/td>
&lt;td>Run a specific test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m l x&lt;/code>&lt;/td>
&lt;td>Execute a Gradle task&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-javascript-in-emacs.org</title><link>/posts/emacs/using-javascript-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-javascript-in-emacs/</guid><description>Day 2 Javascript mode of emacs Description This layer adds support for the JavaScript language using js2-mode.
Features: Smart code folding Refactoring: done using [[https://github.com/magnars/js2-refactor.el][]js2-refactor]. Auto-completion and documentation: provided by tern CoffeeScript support Formatting with web-beautify Get the path to a JSON value with json-snatcher REPL available via skewer-mode and livid-mode Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add javascript to the existing dotspacemacs-configuration-layers list in this file.</description><content>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Day 2
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;div id="outline-container-headline-2" class="outline-4">
&lt;h4 id="headline-2">
Javascript mode of emacs
&lt;/h4>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-4">
&lt;h4 id="headline-3">
Description
&lt;/h4>
&lt;div id="outline-text-headline-3" class="outline-text-4">
&lt;p>
This layer adds support for the JavaScript language using &lt;a href="https://github.com/mooz/js2-mode">js2-mode&lt;/a>.&lt;/p>
&lt;div id="outline-container-headline-4" class="outline-5">
&lt;h5 id="headline-4">
Features:
&lt;/h5>
&lt;div id="outline-text-headline-4" class="outline-text-5">
&lt;ul>
&lt;li>Smart code folding&lt;/li>
&lt;li>Refactoring: done using [[&lt;a href="https://github.com/magnars/js2-refactor.el][]js2-refactor].">https://github.com/magnars/js2-refactor.el][]js2-refactor].&lt;/a>&lt;/li>
&lt;li>Auto-completion and documentation: provided by &lt;a href="http://ternjs.net/">tern&lt;/a>&lt;/li>
&lt;li>CoffeeScript support&lt;/li>
&lt;li>Formatting with &lt;a href="https://github.com/yasuyk/web-beautify">web-beautify&lt;/a>&lt;/li>
&lt;li>Get the path to a JSON value with &lt;a href="https://github.com/Sterlingg/json-snatcher">json-snatcher&lt;/a>&lt;/li>
&lt;li>REPL available via &lt;a href="https://github.com/skeeto/skewer-mode">skewer-mode&lt;/a> and &lt;a href="https://github.com/pandeiro/livid-mode">livid-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-4">
&lt;h4 id="headline-5">
Install
&lt;/h4>
&lt;div id="outline-text-headline-5" class="outline-text-4">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">javascript&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in
this file.&lt;/p>
&lt;p>
You will also need to install &lt;code class="verbatim">tern&lt;/code> to use the auto-completion and
documentation features:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+BEGIN_SRC sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ npm install -g tern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+END_SRC&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>
To use the formatting features, install &lt;code class="verbatim">js-beautify&lt;/code>:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+BEGIN_SRC sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ npm install -g js-beautify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+END_SRC&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>
To activate error checking using flycheck, install one of the &lt;a href="http://www.flycheck.org/en/latest/languages.html#javascript">available linters&lt;/a>
such as &lt;code class="verbatim">ESLint&lt;/code> or &lt;code class="verbatim">JSHint&lt;/code>:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+BEGIN_SRC sh&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ npm install -g eslint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># or&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> $ npm install -g jshint
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#+END_SRC&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-4">
&lt;h4 id="headline-6">
Configuration
&lt;/h4>
&lt;div id="outline-text-headline-6" class="outline-text-4">
&lt;div id="outline-container-headline-7" class="outline-5">
&lt;h5 id="headline-7">
Tern
&lt;/h5>
&lt;div id="outline-text-headline-7" class="outline-text-5">
&lt;p>To make tern re-use the server across multiple different editing sessions (thus
creating multiple &lt;code class="verbatim">.tern-port&lt;/code> files for each document you have open &lt;a href="http://ternjs.net/doc/manual.html">see here
for more details&lt;/a>):&lt;/p>
&lt;p>
The variables provided below can be set when adding the &lt;code class="verbatim">javascript&lt;/code>
configuration layer, as detailed in &lt;a href="../../../doc/DOCUMENTATION.org::Setting%20configuration%20layers%20variables">this&lt;/a> section of the documentation.&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+BEGIN_SRC emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (javascript :variables javascript-disable-tern-port-files &lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+END_SRC&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>
Windows users may need to set the variable &lt;code class="verbatim">tern-command&lt;/code> in order for emacs to
locate and launch tern server successfully. See &lt;a href="https://github.com/syl20bnr/spacemacs/issues/5733">this open issue for more
details&lt;/a>. The variable can be set when adding the &lt;code class="verbatim">javascript&lt;/code> configuration
layer:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+BEGIN_SRC emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (javascript :variables tern-command &lt;span style="color:#f92672">&amp;#39;&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;node&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;/path/to/tern/bin/tern&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+END_SRC&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-5">
&lt;h5 id="headline-8">
Indentation
&lt;/h5>
&lt;div id="outline-text-headline-8" class="outline-text-5">
&lt;p>To change how js2-mode indents code, set the variable &lt;code class="verbatim">js2-basic-offset&lt;/code>, as
such:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+BEGIN_SRC emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq-default js2-basic-offset &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+END_SRC&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;p>
Similarly, to change how js-mode indents JSON files, set the variable
&lt;code class="verbatim">js-indent-level&lt;/code>, as such:&lt;/p>
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+BEGIN_SRC emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq-default js-indent-level &lt;span style="color:#ae81ff">2&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+END_SRC&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-5">
&lt;h5 id="headline-9">
REPL
&lt;/h5>
&lt;div id="outline-text-headline-9" class="outline-text-5">
&lt;p>To use the available JS repl, you need a running httpd server and a page loaded
with skewer. If a blank page serves your needs, just use the run-skewer command
in your javascript buffer. If you want to inject it in your own page, follow
&lt;a href="https://github.com/skeeto/skewer-mode#skewering-with-cors">these instructions&lt;/a> (install the Greasemonkey script and then click the triangle
in the top-right corner - if it turns green, you&amp;#39;re good to go).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-4">
&lt;h4 id="headline-10">
Key Bindings
&lt;/h4>
&lt;div id="outline-text-headline-10" class="outline-text-4">
&lt;div id="outline-container-headline-11" class="outline-5">
&lt;h5 id="headline-11">
js2-mode
&lt;/h5>
&lt;div id="outline-text-headline-11" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m w&lt;/code>&lt;/td>
&lt;td>toggle js2-mode warnings and errors&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>%&lt;/code>&lt;/td>
&lt;td>jump between blockswith &lt;a href="https://github.com/redguardtoo/evil-matchit">evil-matchit&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-5">
&lt;h5 id="headline-12">
Folding (js2-mode)
&lt;/h5>
&lt;div id="outline-text-headline-12" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m z c&lt;/code>&lt;/td>
&lt;td>zipcode 隐藏元素 hide element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z o&lt;/code>&lt;/td>
&lt;td>zipopen 显示元素 show element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z r&lt;/code>&lt;/td>
&lt;td>全部显示 show all element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z e&lt;/code>&lt;/td>
&lt;td>切换元素 toggle hide/show element&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z F&lt;/code>&lt;/td>
&lt;td>切换函数 toggle hide functions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m z C&lt;/code>&lt;/td>
&lt;td>切换注释 toggle hide comments&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-13" class="outline-5">
&lt;h5 id="headline-13">
Refactoring (js2-refactor)
&lt;/h5>
&lt;div id="outline-text-headline-13" class="outline-text-5">
&lt;p>
Bindings should match the plain emacs assignments.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m k&lt;/code>&lt;/td>
&lt;td>删除到行尾 deletes to the end of the line, but does not cross semantic boundaries&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r 3 i&lt;/code>&lt;/td>
&lt;td>converts ternary operator to if-statement&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a g&lt;/code>&lt;/td>
&lt;td>creates a &lt;code class="verbatim">/* global */&lt;/code> annotation if it is missing, and adds var to point to it&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r a o&lt;/code>&lt;/td>
&lt;td>命名参数 replaces arguments to a function call with an object literal of named arguments&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r b a&lt;/code>&lt;/td>
&lt;td>moves the last child out of current function, if-statement, for-loop or while-loop&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r c a&lt;/code>&lt;/td>
&lt;td>多行数组合并 converts a multiline array to one line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c o&lt;/code>&lt;/td>
&lt;td>多行对象合并 converts a multiline object literal to one line&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r c u&lt;/code>&lt;/td>
&lt;td>多行函数合并 converts a multiline function to one line (expecting semicolons as statement delimiters)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r e a&lt;/code>&lt;/td>
&lt;td>单行数组拆分多行 converts a one line array to multiline&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e f&lt;/code>&lt;/td>
&lt;td>表达式转命名函数 extracts the marked expressions into a new named function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e m&lt;/code>&lt;/td>
&lt;td>表达式转新方法 extracts the marked expressions out into a new method in an object literal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e o&lt;/code>&lt;/td>
&lt;td>单行对象转多行 converts a one line object literal to multiline&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e u&lt;/code>&lt;/td>
&lt;td>单行函数转多行 converts a one line function to multiline (expecting semicolons as statement delimiters)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r e v&lt;/code>&lt;/td>
&lt;td>将表达式转为变量 takes a marked expression and replaces it with a var&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r i g&lt;/code>&lt;/td>
&lt;td>creates a shortcut for a marked global by injecting it in the wrapping immediately invoked function expression&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i p&lt;/code>&lt;/td>
&lt;td>changes the marked expression to a parameter in a local function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i v&lt;/code>&lt;/td>
&lt;td>replaces all instances of a variable with its initial value&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r l p&lt;/code>&lt;/td>
&lt;td>参数转本地变量 changes a parameter to a local var in a local function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r l t&lt;/code>&lt;/td>
&lt;td>添加终端日志 adds a console.log statement for what is at point (or region)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r r v&lt;/code>&lt;/td>
&lt;td>重命名全部变量 renames the variable on point and all occurrences in its lexical scope&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r s l&lt;/code>&lt;/td>
&lt;td>moves the next statement into current function, if-statement, for-loop, while-loop&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r s s&lt;/code>&lt;/td>
&lt;td>拆分字符串 splits a &lt;code class="verbatim">String&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r s v&lt;/code>&lt;/td>
&lt;td>拆分变量 splits a &lt;code class="verbatim">var&lt;/code> with multiple vars declared into several &lt;code class="verbatim">var&lt;/code> statements&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r t f&lt;/code>&lt;/td>
&lt;td>切换函数声明和表达式 toggle between function declaration and function expression&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r u w&lt;/code>&lt;/td>
&lt;td>replaces the parent statement with the selected region&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r v t&lt;/code>&lt;/td>
&lt;td>changes local &lt;code class="verbatim">var a&lt;/code> to be &lt;code class="verbatim">this.a&lt;/code> instead&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r w i&lt;/code>&lt;/td>
&lt;td>整个缓冲区转立即运行函数表达式 wraps the entire buffer in an immediately invoked function expression&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r w l&lt;/code>&lt;/td>
&lt;td>选定区域转 for 循环 wraps the region in a for-loop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m x m j&lt;/code>&lt;/td>
&lt;td>下移一行 move line down, while keeping commas correctly placed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m x m k&lt;/code>&lt;/td>
&lt;td>上移一行 move line up, while keeping commas correctly placed&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-5">
&lt;h5 id="headline-14">
Formatting (web-beautify)
&lt;/h5>
&lt;div id="outline-text-headline-14" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m =&lt;/code>&lt;/td>
&lt;td>美化格式 beautify code in js2-mode, json-mode, web-mode, and css-mode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div id="outline-container-headline-15" class="outline-6">
&lt;h6 id="headline-15">
Documentation (js-doc)
&lt;/h6>
&lt;div id="outline-text-headline-15" class="outline-text-6">
&lt;p>
You can check more &lt;a href="https://github.com/mooz/js-doc/">here&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r d b&lt;/code>&lt;/td>
&lt;td>插入文件注释 insert JSDoc comment for current file&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r d f&lt;/code>&lt;/td>
&lt;td>插入函数注释 insert JSDoc comment for function&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r d t&lt;/code>&lt;/td>
&lt;td>插入注释标签 insert tag to comment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r d h&lt;/code>&lt;/td>
&lt;td>显示可用注释标签 show list of available jsdoc tags&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-16" class="outline-5">
&lt;h5 id="headline-16">
Auto-complete and documentation (tern)
&lt;/h5>
&lt;div id="outline-text-headline-16" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m C-g&lt;/code>&lt;/td>
&lt;td>brings you back to last place you were when you pressed M-..&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>跳转定义 jump to the definition of the thing under the cursor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g G&lt;/code>&lt;/td>
&lt;td>给定名称，跳转到定义 jump to definition for the given name&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h d&lt;/code>&lt;/td>
&lt;td>查找文档 find docs of the thing under the cursor. Press again to open the associated URL (if any)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h t&lt;/code>&lt;/td>
&lt;td>检查类型 find the type of the thing under the cursor&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r r V&lt;/code>&lt;/td>
&lt;td>重命名变量 rename variable under the cursor using tern&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-17" class="outline-5">
&lt;h5 id="headline-17">
JSON
&lt;/h5>
&lt;div id="outline-text-headline-17" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m h p&lt;/code>&lt;/td>
&lt;td>Get the path of the value at point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-18" class="outline-5">
&lt;h5 id="headline-18">
REPL (skewer-mode)
&lt;/h5>
&lt;div id="outline-text-headline-18" class="outline-text-5">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m e e&lt;/code>&lt;/td>
&lt;td>评估最后表达式 evaluates the last expression&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m e E&lt;/code>&lt;/td>
&lt;td>评估并插入结果 evaluates and inserts the result of the last expression at point&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m s a&lt;/code>&lt;/td>
&lt;td>切换热更新测试 Toggle live evaluation of whole buffer in REPL on buffer changes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>将整个缓冲区内容发往测试 send current buffer contents to the skewer REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s B&lt;/code>&lt;/td>
&lt;td>将整个缓冲区发往测试，转入插入模式 send current buffer contents to the skewer REPL and switch to it in insert state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s i&lt;/code>&lt;/td>
&lt;td>启动到测试平台 starts/switch to the skewer REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>发送选定区域进行测试 send current region to the skewer REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s R&lt;/code>&lt;/td>
&lt;td>发送选定区域进行测试，切换到插入模式 send current region to the skewer REPL and switch to it in insert state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s s&lt;/code>&lt;/td>
&lt;td>切换到测试区域 switch to REPL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
To be continued…&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-lua-in-emacs.org</title><link>/posts/emacs/using-lua-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-lua-in-emacs/</guid><description> Table of Contents Description
Features: Install Key Bindings
Commands Description This layer adds support for editing Lua.
Features: Editing lua files using lua-mode Sending code to a lua REPL Code linting using Luacheck Install To use this configuration layer, add it to your ~/.spacemacs. You will need to add lua to the existing dotspacemacs-configuration-layers list in this file.
In order to enable code linting, install Luacheck.
Key Bindings Commands Key Binding Description SPC m d lookup thing at point in lua documentation SPC m s b send buffer contents to REPL SPC m s f send current function to REPL SPC m s l send current line to REPL SPC m s r send current region to REPL</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Table of Contents
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="#description">Description&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#features">Features:&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#install">Install&lt;/a>&lt;/li>
&lt;li>
&lt;p>&lt;a href="#key-bindings">Key Bindings&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#commands">Commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer adds support for editing Lua.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Editing lua files using &lt;a href="https://github.com/immerrr/lua-mode">lua-mode&lt;/a>&lt;/li>
&lt;li>Sending code to a lua REPL&lt;/li>
&lt;li>Code linting using &lt;a href="https://github.com/mpeterv/luacheck">Luacheck&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">lua&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;p>
In order to enable code linting, install &lt;a href="https://github.com/mpeterv/luacheck">Luacheck&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Key Bindings
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Commands
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m d&lt;/code>&lt;/td>
&lt;td>lookup thing at point in lua documentation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>send buffer contents to REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s f&lt;/code>&lt;/td>
&lt;td>send current function to REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s l&lt;/code>&lt;/td>
&lt;td>send current line to REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>send current region to REPL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-macro-in-emacs.org</title><link>/posts/emacs/using-macro-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-macro-in-emacs/</guid><description>using-macro-in-emacs
Codes Define macros #+srcname: define-macros #+begin_src emacs-lisp ;;; with-dir (defmacro do-in-dir (DIR &amp;amp;rest FORMS) &amp;#34;Execute FORMS in DIR.&amp;#34; (let ((orig-dir (gensym))) `(prog2 (setq ,orig-dir default-directory) (progn (cd ,DIR) ,@FORMS) (cd ,orig-dir)))) #+end_src #+RESULTS: define-macros : do-in-dir
Run macros #+srcname: run-macros #+begin_src emacs-lisp (macroexpand &amp;#39;(do-in-dir &amp;#34;~/.emacs.d&amp;#34;)) #+end_src #+RESULTS: run-macros | prog2 | (setq G1829 default-directory) | (progn (cd ~/.emacs.d)) | (cd G1829) |</description><content>&lt;h1 class="title">&lt;p>using-macro-in-emacs&lt;/p>
&lt;/h1>
&lt;div id="outline-container-headline-1" class="outline-3">
&lt;h3 id="headline-1">
Codes
&lt;/h3>
&lt;div id="outline-text-headline-1" class="outline-text-3">
&lt;div id="outline-container-headline-2" class="outline-4">
&lt;h4 id="headline-2">
Define macros
&lt;/h4>
&lt;div id="outline-text-headline-2" class="outline-text-4">
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: define-macros
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">;;; with-dir&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(defmacro do-in-dir (DIR &lt;span style="color:#66d9ef">&amp;amp;rest&lt;/span> FORMS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;Execute FORMS in DIR.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (let ((orig-dir (gensym)))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>(prog2
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (setq &lt;span style="color:#f92672">,&lt;/span>orig-dir default-directory)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (progn (cd &lt;span style="color:#f92672">,&lt;/span>DIR) &lt;span style="color:#f92672">,@&lt;/span>FORMS)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (cd &lt;span style="color:#f92672">,&lt;/span>orig-dir))))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+RESULTS: define-macros
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">:&lt;/span> do-in-dir&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-4">
&lt;h4 id="headline-3">
Run macros
&lt;/h4>
&lt;div id="outline-text-headline-3" class="outline-text-4">
&lt;p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+srcname: run-macros
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+begin_src emacs-lisp
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>(&lt;span style="color:#a6e22e">macroexpand&lt;/span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>(do-in-dir &lt;span style="color:#e6db74">&amp;#34;~/.emacs.d&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+end_src
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>+RESULTS: run-macros
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>| prog2 | (setq G1829 default-directory) | (progn (cd ~/.emacs.d)) | (cd G1829) |&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-python-in-emacs.org</title><link>/posts/emacs/using-python-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-python-in-emacs/</guid><description>Table of Contents Description
Features: Install
Layer Dependencies
Auto-completion: Anaconda dependencies Syntax checking Test runner Automatic buffer formatting on save Automatic save of buffer when testing autoflake pylookup Hy-mode Configuration
Fill column Sort imports Management of Python versions and virtual environments
Manage virtual environments with pyvenv Manage multiple Python versions with pyenv
Automatic activation of local pyenv version Key Bindings
Inferior REPL process Running Python Script in shell Testing Refactoring Pip package management Live coding Hy REPL process Other Python commands Description This layer adds support for the Python language.</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Table of Contents
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;ul>
&lt;li>
&lt;p>&lt;a href="#description">Description&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#features">Features:&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#install">Install&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#layer">Layer&lt;/a>&lt;/li>
&lt;li>
&lt;p>&lt;a href="#dependencies">Dependencies&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#auto-completion-anaconda-dependencies">Auto-completion: Anaconda dependencies&lt;/a>&lt;/li>
&lt;li>&lt;a href="#syntax-checking">Syntax checking&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#test-runner">Test runner&lt;/a>&lt;/li>
&lt;li>&lt;a href="#automatic-buffer-formatting-on-save">Automatic buffer formatting on save&lt;/a>&lt;/li>
&lt;li>&lt;a href="#automatic-save-of-buffer-when-testing">Automatic save of buffer when testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#autoflake">autoflake&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pylookup">pylookup&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hy-mode">Hy-mode&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#configuration">Configuration&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#fill-column">Fill column&lt;/a>&lt;/li>
&lt;li>&lt;a href="#sort-imports">Sort imports&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#management-of-python-versions-and-virtual-environments">Management of Python versions and virtual environments&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#manage-virtual-environments-with-pyvenv">Manage virtual environments with pyvenv&lt;/a>&lt;/li>
&lt;li>
&lt;p>&lt;a href="#manage-multiple-python-versions-with-pyenv">Manage multiple Python versions with pyenv&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#automatic-activation-of-local-pyenv-version">Automatic activation of local pyenv version&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="#key-bindings">Key Bindings&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="#inferior-repl-process">Inferior REPL process&lt;/a>&lt;/li>
&lt;li>&lt;a href="#running-python-script-in-shell">Running Python Script in shell&lt;/a>&lt;/li>
&lt;li>&lt;a href="#testing">Testing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#refactoring">Refactoring&lt;/a>&lt;/li>
&lt;li>&lt;a href="#pip-package-management">Pip package management&lt;/a>&lt;/li>
&lt;li>&lt;a href="#live-coding">Live coding&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hy-repl-process">Hy REPL process&lt;/a>&lt;/li>
&lt;li>&lt;a href="#other-python-commands">Other Python commands&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>This layer adds support for the Python language.&lt;/p>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Features:
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;ul>
&lt;li>Auto-completion using &lt;a href="https://github.com/proofit404/anaconda-mode">anaconda-mode&lt;/a>&lt;/li>
&lt;li>Code Navigation using &lt;a href="https://github.com/proofit404/anaconda-mode">anaconda-mode&lt;/a>&lt;/li>
&lt;li>Documentation Lookup using &lt;a href="https://github.com/proofit404/anaconda-mode">anaconda-mode&lt;/a> and &lt;a href="https://github.com/tsgates/pylookup">pylookup&lt;/a>&lt;/li>
&lt;li>Test Runners using &lt;a href="https://github.com/syl20bnr/nose.el">nose.el&lt;/a> or &lt;a href="https://github.com/ionrock/pytest-el">pytest&lt;/a>&lt;/li>
&lt;li>Virtual Environment using &lt;a href="https://github.com/jorgenschaefer/pyvenv">pyvenv&lt;/a> and &lt;a href="https://github.com/yyuu/pyenv">pyenv&lt;/a>&lt;/li>
&lt;li>semantic mode is enabled&lt;/li>
&lt;li>PEP8 compliant formatting via &lt;a href="https://github.com/google/yapf">YAPF&lt;/a>&lt;/li>
&lt;li>PEP8 checks with &lt;a href="https://pypi.python.org/pypi/flake8">flake8&lt;/a> or &lt;a href="https://pypi.python.org/pypi/pylint/1.6.4">pylint&lt;/a>&lt;/li>
&lt;li>Suppression of unused import with &lt;a href="https://github.com/myint/autoflake">autoflake&lt;/a>&lt;/li>
&lt;li>Use the &lt;code>%&lt;/code> key to jump between blocks with &lt;a href="https://github.com/redguardtoo/evil-matchit">evil-matchit&lt;/a>&lt;/li>
&lt;li>Sort imports with &lt;a href="https://pypi.python.org/pypi/isort">isort&lt;/a>&lt;/li>
&lt;li>Fix a missing import statement with &lt;a href="https://github.com/anachronic/importmagic.el">importmagic&lt;/a>&lt;/li>
&lt;li>Pip package manager with &lt;a href="https://github.com/brotzeit/pippel">pippel&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Install
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Layer
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>To use this configuration layer, add it to your &lt;code class="verbatim">~/.spacemacs&lt;/code>. You will need to
add &lt;code class="verbatim">python&lt;/code> to the existing &lt;code class="verbatim">dotspacemacs-configuration-layers&lt;/code> list in this
file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Dependencies
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;div id="outline-container-headline-7" class="outline-4">
&lt;h4 id="headline-7">
Auto-completion: Anaconda dependencies
&lt;/h4>
&lt;div id="outline-text-headline-7" class="outline-text-4">
&lt;p>&lt;code class="verbatim">anaconda-mode&lt;/code> tries to install the dependencies itself but sometimes
it does not work and you may encounter the following message when
opening a python buffer:&lt;/p>
&lt;pre class="example">
Blocking call to accept-process-output with quit inhibited!!
&lt;/pre>
&lt;p>
To fix this, install the &lt;code class="verbatim">anaconda-mode&lt;/code> &lt;a href="https://github.com/proofit404/anaconda-mode/wiki">anaconda-deps&lt;/a> by hand:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> pip install --upgrade &lt;span style="color:#e6db74">&amp;#34;jedi&amp;gt;=0.9.0&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;json-rpc&amp;gt;=1.8.1&amp;#34;&lt;/span> &lt;span style="color:#e6db74">&amp;#34;service_factory&amp;gt;=0.1.5&amp;#34;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you encounter problems with Jedi 1.0 consider downgrading to 0.9.0. See &lt;a href="https://github.com/davidhalter/jedi/issues/873">this
issue&lt;/a> for details.&lt;/p>
&lt;p>
Source: &lt;a href="https://github.com/proofit404/anaconda-mode#issues">https://github.com/proofit404/anaconda-mode#issues&lt;/a>&lt;/p>
&lt;p>
If you are facing errors such as &amp;#34;Unable to run anaconda-mode server&amp;#34;, try
setting your &lt;code class="verbatim">PYTHONPATH&lt;/code> as explained at
&lt;a href="https://github.com/proofit404/anaconda-mode#pythonpath">https://github.com/proofit404/anaconda-mode#pythonpath&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-4">
&lt;h4 id="headline-8">
Syntax checking
&lt;/h4>
&lt;div id="outline-text-headline-8" class="outline-text-4">
&lt;p>Syntax checking uses &lt;code class="verbatim">flake8&lt;/code> package:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> pip install flake8&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-3">
&lt;h3 id="headline-9">
Test runner
&lt;/h3>
&lt;div id="outline-text-headline-9" class="outline-text-3">
&lt;p>Both &lt;code class="verbatim">nose&lt;/code> and &lt;code class="verbatim">pytest&lt;/code> are supported. By default &lt;code class="verbatim">nose&lt;/code> is used.
To choose your test runner set the layer variable &lt;code class="verbatim">python-test-runner&lt;/code> to
either &lt;code class="verbatim">nose&lt;/code> or &lt;code class="verbatim">pytest&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((python :variables python-test-runner &lt;span style="color:#e6db74">&amp;#39;pytest&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
If you need both then you can set &lt;code class="verbatim">python-test-runner&lt;/code> to a list like this:&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((python :variables python-test-runner &lt;span style="color:#f92672">&amp;#39;&lt;/span>(pytest nose))))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
This means that &lt;code class="verbatim">pytest&lt;/code> is your primary test runner. To use the secondary test
runner you can call the test functions with a prefix argument e.g. &lt;code>SPC u SPC m
t t&lt;/code> to run one test with &lt;code class="verbatim">nose&lt;/code>.&lt;/p>
&lt;p>
To set project specific test runners you can set &lt;code class="verbatim">python-test-runner&lt;/code> in a
directory local variable in your project root. &lt;code>SPC f v d&lt;/code> in Spacemacs. See
&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Directory-Variables.html">the official documentation&lt;/a> for more information.&lt;/p>
&lt;p>
The root of the project is detected with a &lt;code class="verbatim">.git&lt;/code> directory or a &lt;code class="verbatim">setup.cfg&lt;/code> file.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-3">
&lt;h3 id="headline-10">
Automatic buffer formatting on save
&lt;/h3>
&lt;div id="outline-text-headline-10" class="outline-text-3">
&lt;p>To enable automatic buffer formatting on save with &lt;a href="https://github.com/google/yapf">YAPF&lt;/a> set the variable
&lt;code class="verbatim">python-enable-yapf-format-on-save&lt;/code> to &lt;code class="verbatim">t&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (python :variables python-enable-yapf-format-on-save &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-3">
&lt;h3 id="headline-11">
Automatic save of buffer when testing
&lt;/h3>
&lt;div id="outline-text-headline-11" class="outline-text-3">
&lt;p>By default a buffer is automatically saved before tests are executed upon it,
you can disable this feature by setting &lt;code class="verbatim">python-save-before-test&lt;/code> to &lt;code class="verbatim">nil&lt;/code>.&lt;/p>
&lt;div class="src src-emacs-lisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-emacs-lisp" data-lang="emacs-lisp">&lt;span style="display:flex;">&lt;span> (setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (python :variables python-save-before-test &lt;span style="color:#66d9ef">nil&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-3">
&lt;h3 id="headline-12">
autoflake
&lt;/h3>
&lt;div id="outline-text-headline-12" class="outline-text-3">
&lt;p>To be able to suppress unused imports easily, install &lt;a href="https://github.com/myint/autoflake">autoflake&lt;/a>:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> pip install autoflake&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-13" class="outline-3">
&lt;h3 id="headline-13">
pylookup
&lt;/h3>
&lt;div id="outline-text-headline-13" class="outline-text-3">
&lt;p>To use &lt;code class="verbatim">pylookup&lt;/code> on &lt;code>SPC m h H&lt;/code>, make sure you update the database first, using
&lt;code>SPC SPC pylookup-update&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-3">
&lt;h3 id="headline-14">
Hy-mode
&lt;/h3>
&lt;div id="outline-text-headline-14" class="outline-text-3">
&lt;p>To be able to connect to an inferior lisp repl in &lt;code class="verbatim">hy-mode&lt;/code>, you need to make sure
that hy is installed.&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span> pip install hy&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-2">
&lt;h2 id="headline-15">
Configuration
&lt;/h2>
&lt;div id="outline-text-headline-15" class="outline-text-2">
&lt;div id="outline-container-headline-16" class="outline-3">
&lt;h3 id="headline-16">
Fill column
&lt;/h3>
&lt;div id="outline-text-headline-16" class="outline-text-3">
&lt;p>If you want to customize the fill column value, use something like this inside
the &lt;code class="verbatim">user-init&lt;/code> function in your &lt;code class="verbatim">.spacemacs&lt;/code>:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers &lt;span style="color:#f92672">&amp;#39;&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (python :variables python-fill-column &lt;span style="color:#ae81ff">99&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-17" class="outline-3">
&lt;h3 id="headline-17">
Sort imports
&lt;/h3>
&lt;div id="outline-text-headline-17" class="outline-text-3">
&lt;p>If you want imports to be automatically sorted when you save a file (using
&lt;a href="https://pypi.python.org/pypi/isort">isort&lt;/a>), set the &lt;code class="verbatim">python-sort-imports-on-save&lt;/code> variable in the python layer
config section:&lt;/p>
&lt;div class="src src-elisp">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-elisp" data-lang="elisp">&lt;span style="display:flex;">&lt;span>(setq-default dotspacemacs-configuration-layers
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#39;&lt;/span>((python :variables python-sort-imports-on-save &lt;span style="color:#66d9ef">t&lt;/span>)))&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
or as a directory-local variable (for per-project settings).&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-18" class="outline-2">
&lt;h2 id="headline-18">
Management of Python versions and virtual environments
&lt;/h2>
&lt;div id="outline-text-headline-18" class="outline-text-2">
&lt;div id="outline-container-headline-19" class="outline-3">
&lt;h3 id="headline-19">
Manage virtual environments with pyvenv
&lt;/h3>
&lt;div id="outline-text-headline-19" class="outline-text-3">
&lt;p>A virtual environment provides isolation of your Python package versions. For a
general overview see &lt;a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">this site&lt;/a>. &lt;a href="http://virtualenvwrapper.readthedocs.io/en/latest/index.html">Virtualenvwrapper&lt;/a> which is also explained in the
previous link, is a program which manages your virtual environments in a central
location set by the &lt;code class="verbatim">WORKON_HOME&lt;/code> environment variable.&lt;/p>
&lt;p>
Spacemacs integration of virtual environments and virtualenvwrapper is provided
by the &lt;a href="https://github.com/jorgenschaefer/pyvenv">pyvenv&lt;/a> package. It provides the following keybindings:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m V a&lt;/code>&lt;/td>
&lt;td>激活任何目录下的虚拟环境 activate a virtual environment in any directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m V d&lt;/code>&lt;/td>
&lt;td>停止虚拟环境 deactivate active virtual environment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m V w&lt;/code>&lt;/td>
&lt;td>在 WORKON 目录工作 work on virtual environment in &lt;code class="verbatim">WORKON_HOME&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-20" class="outline-3">
&lt;h3 id="headline-20">
Manage multiple Python versions with pyenv
&lt;/h3>
&lt;div id="outline-text-headline-20" class="outline-text-3">
&lt;p>If you need multiple Python versions (e.g. Python 2 and Python 3) then take a
look at &lt;a href="https://github.com/yyuu/pyenv">pyenv&lt;/a>. It enables the installation and managment of multiple
Python versions.
&lt;a href="https://www.brianthicks.com/post/2015/04/15/automate-your-python-environment-with-pyenv/">This blogpost&lt;/a> gives a good overview on how to use the tool. Spacemacs
integration is provided by &lt;a href="https://github.com/proofit404/pyenv-mode">pyenv mode&lt;/a> which has the following keybindings.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m v s&lt;/code>&lt;/td>
&lt;td>set a pyenv environment with &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m v u&lt;/code>&lt;/td>
&lt;td>unset a pyenv environment with &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
Pyenv can also manage virtual environments for each of the Python versions it
has installed. Those will be listed alongside your Python versions.&lt;/p>
&lt;div id="outline-container-headline-21" class="outline-4">
&lt;h4 id="headline-21">
Automatic activation of local pyenv version
&lt;/h4>
&lt;div id="outline-text-headline-21" class="outline-text-4">
&lt;p>A project-specific pyenv version may be written to a file called
&lt;code class="verbatim">.python-version&lt;/code> using the &lt;a href="https://github.com/yyuu/pyenv/blob/master/COMMANDS.md#user-content-pyenv-local">pyenv local&lt;/a> command.&lt;/p>
&lt;p>
Spacemacs can search in parent directories for this file, and automatically set
the pyenv version. The behavior can be set with the variable
&lt;code class="verbatim">python-auto-set-local-pyenv-version&lt;/code> to:&lt;/p>
&lt;ul>
&lt;li>&lt;code class="verbatim">on-visit&lt;/code> (default) set the version when you visit a python buffer,&lt;/li>
&lt;li>&lt;code class="verbatim">on-project-switch&lt;/code> set the version when you switch projects,&lt;/li>
&lt;li>&lt;code class="verbatim">nil&lt;/code> to disable.&lt;/li>
&lt;/ul>
&lt;p>The same is also possible on pyvenv with a file called &lt;code class="verbatim">.venv&lt;/code>. The behavior
can be set with the variable &lt;code class="verbatim">python-auto-set-local-pyvenv-virtualenv=&lt;/code> to:&lt;/p>
&lt;ul>
&lt;li>&lt;code class="verbatim">on-visit&lt;/code> (default) set the virtualenv when you visit a python buffer,&lt;/li>
&lt;li>&lt;code class="verbatim">on-project-switch&lt;/code> set the virtualenv when you switch projects,&lt;/li>
&lt;li>&lt;code class="verbatim">nil&lt;/code> to disable.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-22" class="outline-2">
&lt;h2 id="headline-22">
Key Bindings
&lt;/h2>
&lt;div id="outline-text-headline-22" class="outline-text-2">
&lt;div id="outline-container-headline-23" class="outline-3">
&lt;h3 id="headline-23">
Inferior REPL process
&lt;/h3>
&lt;div id="outline-text-headline-23" class="outline-text-3">
&lt;p>Start a Python or iPython inferior REPL process with &lt;code>SPC m s i&lt;/code>.
If &lt;code class="verbatim">ipython&lt;/code> is available in system executable search paths, &lt;code class="verbatim">ipython&lt;/code>
will be used to launch python shell; otherwise, default &lt;code class="verbatim">python&lt;/code>
interpreter will be used. You may change your system executable
search path by activating a virtual environment.&lt;/p>
&lt;p>
Send code to inferior process commands:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>send buffer and keep code buffer focused&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s B&lt;/code>&lt;/td>
&lt;td>send buffer and switch to REPL in insert mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s f&lt;/code>&lt;/td>
&lt;td>send function and keep code buffer focused&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s F&lt;/code>&lt;/td>
&lt;td>send function and switch to REPL in insert mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s i&lt;/code>&lt;/td>
&lt;td>start inferior REPL process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>send region and keep code buffer focused&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s R&lt;/code>&lt;/td>
&lt;td>send region and switch to REPL in insert mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CTRL+j&lt;/code>&lt;/td>
&lt;td>next item in REPL history&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>CTRL+k&lt;/code>&lt;/td>
&lt;td>previous item in REPL history&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-24" class="outline-3">
&lt;h3 id="headline-24">
Running Python Script in shell
&lt;/h3>
&lt;div id="outline-text-headline-24" class="outline-text-3">
&lt;p>To run a Python script like you would in the shell press &lt;code>SPC m c c&lt;/code>
to start the Python script in comint mode. This is useful when working with
multiple Python files since the REPL does not reload changes made in other
modules.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m c c&lt;/code>&lt;/td>
&lt;td>Execute current file in a comint shell&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m c C&lt;/code>&lt;/td>
&lt;td>Execute current file in a comint shell and switch to it in &lt;code class="verbatim">insert state&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
&lt;strong>Note:&lt;/strong> With the universal argument &lt;code>SPC u&lt;/code> you can enter a new
compilation command.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-25" class="outline-3">
&lt;h3 id="headline-25">
Testing
&lt;/h3>
&lt;div id="outline-text-headline-25" class="outline-text-3">
&lt;p>Test commands start with &lt;code>m t&lt;/code>. To use the secondary test runner call the
function with a prefix argument, for example &lt;code>SPC u SPC m t a&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>No Debug&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t a&lt;/code>&lt;/td>
&lt;td>launch all tests of the project&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t b&lt;/code>&lt;/td>
&lt;td>launch all tests of the current buffer (same as module)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t m&lt;/code>&lt;/td>
&lt;td>launch all tests of the current module&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t s&lt;/code>&lt;/td>
&lt;td>launch all tests of the current suite (only with &lt;code class="verbatim">nose&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t t&lt;/code>&lt;/td>
&lt;td>launch the current test (function)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Debug&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m t A&lt;/code>&lt;/td>
&lt;td>launch all tests of the project in debug mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t B&lt;/code>&lt;/td>
&lt;td>launch all tests of the current buffer (module) in debug mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t M&lt;/code>&lt;/td>
&lt;td>launch all tests of the current module in debug mode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t S&lt;/code>&lt;/td>
&lt;td>launch all tests of the current suite in debug mode (only with &lt;code class="verbatim">nose&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m t T&lt;/code>&lt;/td>
&lt;td>launch the current test (function) in debug mode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-26" class="outline-3">
&lt;h3 id="headline-26">
Refactoring
&lt;/h3>
&lt;div id="outline-text-headline-26" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m r f&lt;/code>&lt;/td>
&lt;td>fix a missing import statement with &lt;a href="https://pypi.python.org/pypi/importmagic">importmagic&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r i&lt;/code>&lt;/td>
&lt;td>remove unused imports with &lt;a href="https://github.com/myint/autoflake">autoflake&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m r I&lt;/code>&lt;/td>
&lt;td>sort imports with &lt;a href="https://pypi.python.org/pypi/isort">isort&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-27" class="outline-3">
&lt;h3 id="headline-27">
Pip package management
&lt;/h3>
&lt;div id="outline-text-headline-27" class="outline-text-3">
&lt;p>In python buffer type &lt;code>SPC m P&lt;/code> to open buffer listing all installed &lt;code class="verbatim">pip&lt;/code>
packages in the currently activated virtual environment.&lt;/p>
&lt;p>
&lt;strong>Note:&lt;/strong> To open this menu from outside a python buffer type
&lt;code>SPC SPC pippel-list-packages RET&lt;/code> .&lt;/p>
&lt;p>
In the package list buffer:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RET&lt;/code>&lt;/td>
&lt;td>follow link (&lt;code class="verbatim">pippel-menu-visit-homepage&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d&lt;/code>&lt;/td>
&lt;td>mark for deletion (&lt;code class="verbatim">pippel-menu-mark-delete&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>i&lt;/code>&lt;/td>
&lt;td>prompt user for packages (&lt;code class="verbatim">pippel-install-package&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m&lt;/code>&lt;/td>
&lt;td>remove mark (&lt;code class="verbatim">pippel-menu-mark-unmark&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&lt;/code>&lt;/td>
&lt;td>refresh package list (&lt;code class="verbatim">pippel-list-packages&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>U&lt;/code>&lt;/td>
&lt;td>mark all upgradable (&lt;code class="verbatim">pippel-menu-mark-all-upgrades&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u&lt;/code>&lt;/td>
&lt;td>mark for upgrade (&lt;code class="verbatim">pippel-menu-mark-upgrade&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x&lt;/code>&lt;/td>
&lt;td>perform marked package menu actions (&lt;code class="verbatim">pippel-menu-execute&lt;/code>)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-28" class="outline-3">
&lt;h3 id="headline-28">
Live coding
&lt;/h3>
&lt;div id="outline-text-headline-28" class="outline-text-3">
&lt;p>Live coding is provided by the &lt;a href="https://github.com/donkirkby/live-py-plugin">live-py-plugin.&lt;/a>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m l&lt;/code>&lt;/td>
&lt;td>Toggle live-py-mode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-29" class="outline-3">
&lt;h3 id="headline-29">
Hy REPL process
&lt;/h3>
&lt;div id="outline-text-headline-29" class="outline-text-3">
&lt;p>Start a Hy inferior repel process with &lt;code>SPC m s i&lt;/code>. If &lt;code class="verbatim">hy&lt;/code> is
available in system executable search paths, &lt;code class="verbatim">hy&lt;/code> will be used to
launch the shell. You may change your system executable search path
by activating a virtual enviornment.&lt;/p>
&lt;p>
Send code to hy REPL commands:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m s b&lt;/code>&lt;/td>
&lt;td>send buffer and keep code buffer focused&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s B&lt;/code>&lt;/td>
&lt;td>switch to REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s e&lt;/code>&lt;/td>
&lt;td>send sexp in front of the cursor to the REPL&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s f&lt;/code>&lt;/td>
&lt;td>send function to REPL and stay in buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s F&lt;/code>&lt;/td>
&lt;td>send function to REPL and switch to repl buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s i&lt;/code>&lt;/td>
&lt;td>start inferior hy repl&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s r&lt;/code>&lt;/td>
&lt;td>send current region to the REPL and stay in buffer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m s R&lt;/code>&lt;/td>
&lt;td>send current region to the REPL and switch to repl buffer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-30" class="outline-3">
&lt;h3 id="headline-30">
Other Python commands
&lt;/h3>
&lt;div id="outline-text-headline-30" class="outline-text-3">
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key Binding&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>SPC m =&lt;/code>&lt;/td>
&lt;td>Reformat the buffer according to PEP8 using &lt;a href="https://github.com/google/yapf">YAPF&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m d b&lt;/code>&lt;/td>
&lt;td>toggle a breakpoint using &lt;code class="verbatim">wdb&lt;/code>, &lt;code class="verbatim">ipdb&lt;/code>, &lt;code class="verbatim">pudb&lt;/code> or &lt;code class="verbatim">pdb&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g g&lt;/code>&lt;/td>
&lt;td>go to definition using &lt;code class="verbatim">anaconda-mode-find-definitions&lt;/code> (&lt;code>C-o&lt;/code> to jump back)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g a&lt;/code>&lt;/td>
&lt;td>go to assignment using &lt;code class="verbatim">anaconda-mode-find-assignments&lt;/code> (&lt;code>C-o&lt;/code> to jump back)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g b&lt;/code>&lt;/td>
&lt;td>jump back&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m g u&lt;/code>&lt;/td>
&lt;td>navigate between usages with &lt;code class="verbatim">anaconda-mode-find-references&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h d&lt;/code>&lt;/td>
&lt;td>look for documentation using &lt;code class="verbatim">helm-pydoc&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h h&lt;/code>&lt;/td>
&lt;td>quick documentation using anaconda&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m h H&lt;/code>&lt;/td>
&lt;td>open documentation in &lt;code class="verbatim">firefox&lt;/code> using &lt;a href="https://github.com/tsgates/pylookup">pylookup&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m v s&lt;/code>&lt;/td>
&lt;td>set a pyenv environment with &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m v u&lt;/code>&lt;/td>
&lt;td>unset a pyenv environment with &lt;a href="https://github.com/pyenv/pyenv">pyenv&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m V w&lt;/code>&lt;/td>
&lt;td>work on virtual environment in &lt;code class="verbatim">WORKON_HOME&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m V a&lt;/code>&lt;/td>
&lt;td>activate a virtual environment in any directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>SPC m V d&lt;/code>&lt;/td>
&lt;td>deactivate active virtual environment&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>using-spacemacs-base-in-emacs.org</title><link>/posts/emacs/using-spacemacs-base-in-emacs/</link><pubDate>Fri, 16 Feb 2018 20:03:50 -0400</pubDate><guid>/posts/emacs/using-spacemacs-base-in-emacs/</guid><description> Description TODO describe spacemacs distribution in this file</description><content>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Description
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
&lt;span class="todo">TODO&lt;/span>
describe spacemacs distribution in this file
&lt;/h3>
&lt;/div>
&lt;/div>
&lt;/div></content></item></channel></rss>